{"ast":null,"code":"import { Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-zcash\";\nimport base58 from \"bs58\";\nimport { Insight } from \"./APIs/insight\";\nimport { SoChain, SoChainNetwork } from \"./APIs/sochain\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { validateAddress } from \"./utils\";\nvar InsightEndpoints;\n\n(function (InsightEndpoints) {\n  // Testnet\n  InsightEndpoints[\"TestnetZCash\"] = \"https://explorer.testnet.z.cash/api/\"; // Mainnet\n\n  InsightEndpoints[\"ZCash\"] = \"https://explorer.z.cash/api/\";\n  InsightEndpoints[\"ZecBlockExplorer\"] = \"https://zecblockexplorer.com/api/\";\n  InsightEndpoints[\"ZecChain\"] = \"https://zechain.net/api/v1/\";\n  InsightEndpoints[\"BlockExplorer\"] = \"https://zcash.blockexplorer.com/api/\";\n})(InsightEndpoints || (InsightEndpoints = {}));\n\nexport class ZcashClass extends BitcoinClass {\n  constructor() {\n    super(...arguments);\n    this.chain = ZcashClass.chain;\n    this.name = ZcashClass.chain;\n    this.legacyName = \"Zec\";\n\n    this.withDefaultAPIs = network => {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return this.withAPI(Insight(InsightEndpoints.ZCash)).withAPI(Insight(InsightEndpoints.ZecBlockExplorer)).withAPI(Insight(InsightEndpoints.ZecChain)).withAPI(Insight(InsightEndpoints.BlockExplorer)).withAPI(SoChain(SoChainNetwork.ZEC), {\n            priority: 15\n          });\n\n        case \"testnet\":\n          // prettier-ignore\n          return this.withAPI(Insight(InsightEndpoints.TestnetZCash)).withAPI(SoChain(SoChainNetwork.ZECTEST), {\n            priority: 15\n          });\n\n        case \"regtest\":\n          throw new Error(`Regtest is currently not supported.`);\n      }\n    };\n\n    this.asset = \"ZEC\";\n    this.utils = utilsWithChainNetwork(Zcash.utils, () => this.chainNetwork);\n  }\n\n}\nZcashClass.chain = \"Zcash\";\nZcashClass.asset = \"ZEC\";\nZcashClass.utils = {\n  resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n  p2shPrefix: {\n    mainnet: Buffer.from([0x1c, 0xbd]),\n    testnet: Buffer.from([0x1c, 0xba])\n  },\n  createAddress: createAddress(base58.encode, Networks, Opcode, Script),\n  calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n  addressIsValid: (address, network = \"mainnet\") => validateAddress(address, ZcashClass.asset, Zcash.utils.resolveChainNetwork(network)),\n  transactionIsValid: (transaction, _network = \"mainnet\") => isHex(typeof transaction === \"string\" ? transaction : transaction.txHash, {\n    length: 32\n  }),\n  addressExplorerLink: (address, network = \"mainnet\") => {\n    switch (Zcash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return `https://sochain.com/address/ZEC/${address}/`;\n\n      case \"testnet\":\n        return `https://sochain.com/address/ZECTEST/${address}/`;\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: (tx, network = \"mainnet\") => {\n    const txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (Zcash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return `https://sochain.com/tx/ZEC/${txHash}/`;\n\n      case \"testnet\":\n        return `https://sochain.com/tx/ZECTEST/${txHash}/`;\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport const Zcash = Callable(ZcashClass);\nconst _ = Zcash;","map":{"version":3,"sources":["../../src/zcash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-zcash\";\nimport base58 from \"bs58\";\nimport { Insight } from \"./APIs/insight\";\nimport { SoChain, SoChainNetwork } from \"./APIs/sochain\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { validateAddress } from \"./utils\";\nvar InsightEndpoints;\n(function (InsightEndpoints) {\n    // Testnet\n    InsightEndpoints[\"TestnetZCash\"] = \"https://explorer.testnet.z.cash/api/\";\n    // Mainnet\n    InsightEndpoints[\"ZCash\"] = \"https://explorer.z.cash/api/\";\n    InsightEndpoints[\"ZecBlockExplorer\"] = \"https://zecblockexplorer.com/api/\";\n    InsightEndpoints[\"ZecChain\"] = \"https://zechain.net/api/v1/\";\n    InsightEndpoints[\"BlockExplorer\"] = \"https://zcash.blockexplorer.com/api/\";\n})(InsightEndpoints || (InsightEndpoints = {}));\nexport class ZcashClass extends BitcoinClass {\n    constructor() {\n        super(...arguments);\n        this.chain = ZcashClass.chain;\n        this.name = ZcashClass.chain;\n        this.legacyName = \"Zec\";\n        this.withDefaultAPIs = (network) => {\n            switch (network) {\n                case \"mainnet\":\n                    // prettier-ignore\n                    return this\n                        .withAPI(Insight(InsightEndpoints.ZCash))\n                        .withAPI(Insight(InsightEndpoints.ZecBlockExplorer))\n                        .withAPI(Insight(InsightEndpoints.ZecChain))\n                        .withAPI(Insight(InsightEndpoints.BlockExplorer))\n                        .withAPI(SoChain(SoChainNetwork.ZEC), { priority: 15 });\n                case \"testnet\":\n                    // prettier-ignore\n                    return this\n                        .withAPI(Insight(InsightEndpoints.TestnetZCash))\n                        .withAPI(SoChain(SoChainNetwork.ZECTEST), { priority: 15 });\n                case \"regtest\":\n                    throw new Error(`Regtest is currently not supported.`);\n            }\n        };\n        this.asset = \"ZEC\";\n        this.utils = utilsWithChainNetwork(Zcash.utils, () => this.chainNetwork);\n    }\n}\nZcashClass.chain = \"Zcash\";\nZcashClass.asset = \"ZEC\";\nZcashClass.utils = {\n    resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n    p2shPrefix: {\n        mainnet: Buffer.from([0x1c, 0xbd]),\n        testnet: Buffer.from([0x1c, 0xba]),\n    },\n    createAddress: createAddress(base58.encode, Networks, Opcode, Script),\n    calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n    addressIsValid: (address, network = \"mainnet\") => validateAddress(address, ZcashClass.asset, Zcash.utils.resolveChainNetwork(network)),\n    transactionIsValid: (transaction, _network = \"mainnet\") => isHex(typeof transaction === \"string\"\n        ? transaction\n        : transaction.txHash, { length: 32 }),\n    addressExplorerLink: (address, network = \"mainnet\") => {\n        switch (Zcash.utils.resolveChainNetwork(network)) {\n            case \"mainnet\":\n                return `https://sochain.com/address/ZEC/${address}/`;\n            case \"testnet\":\n                return `https://sochain.com/address/ZECTEST/${address}/`;\n            case \"regtest\":\n                return undefined;\n        }\n    },\n    transactionExplorerLink: (tx, network = \"mainnet\") => {\n        const txHash = typeof tx === \"string\" ? tx : tx.txHash;\n        switch (Zcash.utils.resolveChainNetwork(network)) {\n            case \"mainnet\":\n                return `https://sochain.com/tx/ZEC/${txHash}/`;\n            case \"testnet\":\n                return `https://sochain.com/tx/ZECTEST/${txHash}/`;\n            case \"regtest\":\n                return undefined;\n        }\n    },\n};\nexport const Zcash = Callable(ZcashClass);\nconst _ = Zcash;\n//# sourceMappingURL=zcash.js.map"]},"metadata":{},"sourceType":"module"}