{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('./util/preconditions');\n\nvar errors = require('./errors');\n\nvar Base58Check = require('./encoding/base58check');\n\nvar Networks = require('./networks');\n\nvar Hash = require('./crypto/hash');\n\nvar JSUtil = require('./util/js');\n\nvar PublicKey = require('./publickey');\n/**\n * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n * or an instance of {@link PublicKey} or {@link Script}.\n *\n * This is an immutable class, and if the first parameter provided to this constructor is an\n * `Address` instance, the same argument will be returned.\n *\n * An address has two key properties: `network` and `type`. The type is either\n * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)\n * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.\n * You can quickly check whether an address is of a given kind by using the methods\n * `isPayToPublicKeyHash` and `isPayToScriptHash`\n *\n * @example\n * ```javascript\n * // validate that an input field is valid\n * var error = Address.getValidationError(input, 'testnet');\n * if (!error) {\n *   var address = Address(input, 'testnet');\n * } else {\n *   // invalid network or checksum (typo?)\n *   var message = error.messsage;\n * }\n *\n * // get an address from a public key\n * var address = Address(publicKey, 'testnet').toString();\n * ```\n *\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n * @constructor\n */\n\n\nfunction Address(data, network, type) {\n  /* jshint maxcomplexity: 12 */\n\n  /* jshint maxstatements: 20 */\n  if (!(this instanceof Address)) {\n    return new Address(data, network, type);\n  }\n\n  if (_.isArray(data) && _.isNumber(network)) {\n    return Address.createMultisig(data, network, type);\n  }\n\n  if (data instanceof Address) {\n    // Immutable instance\n    return data;\n  }\n\n  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Second argument must be \"livenet\" or \"testnet\".');\n  }\n\n  if (type && type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash) {\n    throw new TypeError('Third argument must be \"pubkeyhash\" or \"scripthash\".');\n  }\n\n  var info = this._classifyArguments(data, network, type); // set defaults if not set\n\n\n  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;\n  info.type = info.type || type || Address.PayToPublicKeyHash;\n  JSUtil.defineImmutable(this, {\n    hashBuffer: info.hashBuffer,\n    network: info.network,\n    type: info.type\n  });\n  return this;\n}\n/**\n * Internal function used to split different kinds of arguments of the constructor\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Object} An \"info\" object with \"type\", \"network\", and \"hashBuffer\"\n */\n\n\nAddress.prototype._classifyArguments = function (data, network, type) {\n  /* jshint maxcomplexity: 10 */\n  // transform and validate input data\n  if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) {\n    return Address._transformHash(data);\n  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) {\n    return Address._transformBuffer(data, network, type);\n  } else if (data instanceof PublicKey) {\n    return Address._transformPublicKey(data);\n  } else if (data instanceof Script) {\n    return Address._transformScript(data, network);\n  } else if (typeof data === 'string') {\n    return Address._transformString(data, network, type);\n  } else if (_.isObject(data)) {\n    return Address._transformObject(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n};\n/** @static */\n\n\nAddress.PayToPublicKeyHash = 'pubkeyhash';\n/** @static */\n\nAddress.PayToScriptHash = 'scripthash';\n/**\n * @param {Buffer} hash - An instance of a hash Buffer\n * @returns {Object} An object with keys: hashBuffer\n * @private\n */\n\nAddress._transformHash = function (hash) {\n  var info = {};\n\n  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (hash.length !== 20) {\n    throw new TypeError('Address hashbuffers must be exactly 20 bytes.');\n  }\n\n  info.hashBuffer = hash;\n  return info;\n};\n/**\n * Deserializes an address serialized through `Address#toObject()`\n * @param {Object} data\n * @param {string} data.hash - the hash that this address encodes\n * @param {string} data.type - either 'pubkeyhash' or 'scripthash'\n * @param {Network=} data.network - the name of the network associated\n * @return {Address}\n */\n\n\nAddress._transformObject = function (data) {\n  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');\n  $.checkArgument(data.type, 'Must provide a `type` property');\n  return {\n    hashBuffer: data.hash ? Buffer.from(data.hash, 'hex') : data.hashBuffer,\n    network: Networks.get(data.network) || Networks.defaultNetwork,\n    type: data.type\n  };\n};\n/**\n * Internal function to discover the network and type based on the first data byte\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @returns {Object} An object with keys: network and type\n * @private\n */\n\n\nAddress._classifyFromVersion = function (buffer) {\n  var version = {};\n  var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');\n  var scripthashNetwork = Networks.get(buffer[0], 'scripthash');\n\n  if (pubkeyhashNetwork) {\n    version.network = pubkeyhashNetwork;\n    version.type = Address.PayToPublicKeyHash;\n  } else if (scripthashNetwork) {\n    version.network = scripthashNetwork;\n    version.type = Address.PayToScriptHash;\n  }\n\n  return version;\n};\n/**\n * Internal function to transform a bitcoin address buffer\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @param {string=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\n\n\nAddress._transformBuffer = function (buffer, network, type) {\n  /* jshint maxcomplexity: 9 */\n  var info = {};\n\n  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (buffer.length !== 1 + 20) {\n    throw new TypeError('Address buffers must be exactly 21 bytes.');\n  }\n\n  var networkObj = Networks.get(network);\n\n  var bufferVersion = Address._classifyFromVersion(buffer);\n\n  if (network && !networkObj) {\n    throw new TypeError('Unknown network');\n  }\n\n  if (!bufferVersion.network || networkObj && networkObj !== bufferVersion.network) {\n    throw new TypeError('Address has mismatched network type.');\n  }\n\n  if (!bufferVersion.type || type && type !== bufferVersion.type) {\n    throw new TypeError('Address has mismatched type.');\n  }\n\n  info.hashBuffer = buffer.slice(1);\n  info.network = bufferVersion.network;\n  info.type = bufferVersion.type;\n  return info;\n};\n/**\n * Internal function to transform a {@link PublicKey}\n *\n * @param {PublicKey} pubkey - An instance of PublicKey\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\n\n\nAddress._transformPublicKey = function (pubkey) {\n  var info = {};\n\n  if (!(pubkey instanceof PublicKey)) {\n    throw new TypeError('Address must be an instance of PublicKey.');\n  }\n\n  info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());\n  info.type = Address.PayToPublicKeyHash;\n  return info;\n};\n/**\n * Internal function to transform a {@link Script} into a `info` object.\n *\n * @param {Script} script - An instance of Script\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\n\n\nAddress._transformScript = function (script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = script.getAddressInfo(network);\n\n  if (!info) {\n    throw new errors.Script.CantDeriveAddress(script);\n  }\n\n  return info;\n};\n/**\n * Creates a P2SH address from a set of public keys and a threshold.\n *\n * The addresses will be sorted lexicographically, as that is the trend in bitcoin.\n * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}\n * interface.\n *\n * @param {Array} publicKeys - a set of public keys to create an address\n * @param {number} threshold - the number of signatures needed to release the funds\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {boolean=} nestedWitness - if the address uses a nested p2sh witness\n * @return {Address}\n */\n\n\nAddress.createMultisig = function (publicKeys, threshold, network, nestedWitness) {\n  network = network || publicKeys[0].network || Networks.defaultNetwork;\n  var redeemScript = Script.buildMultisigOut(publicKeys, threshold);\n\n  if (nestedWitness) {\n    return Address.payingTo(Script.buildWitnessMultisigOutFromScript(redeemScript), network);\n  }\n\n  return Address.payingTo(redeemScript, network);\n};\n/**\n * Internal function to transform a bitcoin address string\n *\n * @param {string} data\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\n\n\nAddress._transformString = function (data, network, type) {\n  if (typeof data !== 'string') {\n    throw new TypeError('data parameter supplied is not a string.');\n  }\n\n  data = data.trim();\n  var addressBuffer = Base58Check.decode(data);\n\n  var info = Address._transformBuffer(addressBuffer, network, type);\n\n  return info;\n};\n/**\n * Instantiate an address from a PublicKey instance\n *\n * @param {PublicKey} data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromPublicKey = function (data, network) {\n  var info = Address._transformPublicKey(data);\n\n  network = network || Networks.defaultNetwork;\n  return new Address(info.hashBuffer, network, info.type);\n};\n/**\n * Instantiate an address from a ripemd160 public key hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromPublicKeyHash = function (hash, network) {\n  var info = Address._transformHash(hash);\n\n  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);\n};\n/**\n * Instantiate an address from a ripemd160 script hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromScriptHash = function (hash, network) {\n  $.checkArgument(hash, 'hash parameter is required');\n\n  var info = Address._transformHash(hash);\n\n  return new Address(info.hashBuffer, network, Address.PayToScriptHash);\n};\n/**\n * Builds a p2sh address paying to script. This will hash the script and\n * use that to create the address.\n * If you want to extract an address associated with a script instead,\n * see {{Address#fromScript}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.payingTo = function (script, network) {\n  $.checkArgument(script, 'script is required');\n  $.checkArgument(script instanceof Script, 'script must be instance of Script');\n  return Address.fromScriptHash(Hash.sha256ripemd160(script.toBuffer()), network);\n};\n/**\n * Extract address from a Script. The script must be of one\n * of the following types: p2pkh input, p2pkh output, p2sh input\n * or p2sh output.\n * This will analyze the script and extract address information from it.\n * If you want to transform any script to a p2sh Address paying\n * to that script's hash instead, use {{Address#payingTo}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromScript = function (script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n\n  var info = Address._transformScript(script, network);\n\n  return new Address(info.hashBuffer, network, info.type);\n};\n/**\n * Instantiate an address from a buffer of the address\n *\n * @param {Buffer} buffer - An instance of buffer of the address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromBuffer = function (buffer, network, type) {\n  var info = Address._transformBuffer(buffer, network, type);\n\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n/**\n * Instantiate an address from an address string\n *\n * @param {string} str - An string of the bitcoin address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromString = function (str, network, type) {\n  var info = Address._transformString(str, network, type);\n\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n/**\n * Instantiate an address from an Object\n *\n * @param {string} json - An JSON string or Object with keys: hash, network and type\n * @returns {Address} A new valid instance of an Address\n */\n\n\nAddress.fromObject = function fromObject(obj) {\n  $.checkState(JSUtil.isHexa(obj.hash), 'Unexpected hash property, \"' + obj.hash + '\", expected to be hex.');\n  var hashBuffer = Buffer.from(obj.hash, 'hex');\n  return new Address(hashBuffer, obj.network, obj.type);\n};\n/**\n * Will return a validation error if exists\n *\n * @example\n * ```javascript\n * // a network mismatch error\n * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {null|Error} The corresponding error message\n */\n\n\nAddress.getValidationError = function (data, network, type) {\n  var error;\n\n  try {\n    /* jshint nonew: false */\n    new Address(data, network, type);\n  } catch (e) {\n    error = e;\n  }\n\n  return error;\n};\n/**\n * Will return a boolean if an address is valid\n *\n * @example\n * ```javascript\n * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {boolean} The corresponding error message\n */\n\n\nAddress.isValid = function (data, network, type) {\n  return !Address.getValidationError(data, network, type);\n};\n/**\n * Returns true if an address is of pay to public key hash type\n * @return boolean\n */\n\n\nAddress.prototype.isPayToPublicKeyHash = function () {\n  return this.type === Address.PayToPublicKeyHash;\n};\n/**\n * Returns true if an address is of pay to script hash type\n * @return boolean\n */\n\n\nAddress.prototype.isPayToScriptHash = function () {\n  return this.type === Address.PayToScriptHash;\n};\n/**\n * Will return a buffer representation of the address\n *\n * @returns {Buffer} Bitcoin address buffer\n */\n\n\nAddress.prototype.toBuffer = function () {\n  var version = Buffer.from([this.network[this.type]]);\n  return Buffer.concat([version, this.hashBuffer]);\n};\n/**\n * @returns {Object} A plain object with the address information\n */\n\n\nAddress.prototype.toObject = Address.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hashBuffer.toString('hex'),\n    type: this.type,\n    network: this.network.toString()\n  };\n};\n/**\n * Will return a the string representation of the address\n *\n * @returns {string} Bitcoin address\n */\n\n\nAddress.prototype.toString = function () {\n  return Base58Check.encode(this.toBuffer());\n};\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin address\n */\n\n\nAddress.prototype.inspect = function () {\n  return '<Address: ' + this.toString() + ', type: ' + this.type + ', network: ' + this.network + '>';\n};\n\nmodule.exports = Address;\n\nvar Script = require('./script');","map":{"version":3,"sources":["/home/kesha/Downloads/ren-main/renApp/node_modules/@CoinSpace/bitcore-lib-dogecoin/lib/address.js"],"names":["_","require","$","errors","Base58Check","Networks","Hash","JSUtil","PublicKey","Address","data","network","type","isArray","isNumber","createMultisig","checkArgument","get","TypeError","PayToPublicKeyHash","PayToScriptHash","info","_classifyArguments","defaultNetwork","defineImmutable","hashBuffer","prototype","Buffer","Uint8Array","length","_transformHash","_transformBuffer","_transformPublicKey","Script","_transformScript","_transformString","isObject","_transformObject","hash","from","_classifyFromVersion","buffer","version","pubkeyhashNetwork","scripthashNetwork","networkObj","bufferVersion","slice","pubkey","sha256ripemd160","toBuffer","script","getAddressInfo","CantDeriveAddress","publicKeys","threshold","nestedWitness","redeemScript","buildMultisigOut","payingTo","buildWitnessMultisigOutFromScript","trim","addressBuffer","decode","fromPublicKey","fromPublicKeyHash","fromScriptHash","fromScript","fromBuffer","fromString","str","fromObject","obj","checkState","isHexa","getValidationError","error","e","isValid","isPayToPublicKeyHash","isPayToScriptHash","concat","toObject","toJSON","toString","encode","inspect","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('./util/preconditions');\nvar errors = require('./errors');\nvar Base58Check = require('./encoding/base58check');\nvar Networks = require('./networks');\nvar Hash = require('./crypto/hash');\nvar JSUtil = require('./util/js');\nvar PublicKey = require('./publickey');\n\n/**\n * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n * or an instance of {@link PublicKey} or {@link Script}.\n *\n * This is an immutable class, and if the first parameter provided to this constructor is an\n * `Address` instance, the same argument will be returned.\n *\n * An address has two key properties: `network` and `type`. The type is either\n * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)\n * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.\n * You can quickly check whether an address is of a given kind by using the methods\n * `isPayToPublicKeyHash` and `isPayToScriptHash`\n *\n * @example\n * ```javascript\n * // validate that an input field is valid\n * var error = Address.getValidationError(input, 'testnet');\n * if (!error) {\n *   var address = Address(input, 'testnet');\n * } else {\n *   // invalid network or checksum (typo?)\n *   var message = error.messsage;\n * }\n *\n * // get an address from a public key\n * var address = Address(publicKey, 'testnet').toString();\n * ```\n *\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n * @constructor\n */\nfunction Address(data, network, type) {\n  /* jshint maxcomplexity: 12 */\n  /* jshint maxstatements: 20 */\n\n  if (!(this instanceof Address)) {\n    return new Address(data, network, type);\n  }\n\n  if (_.isArray(data) && _.isNumber(network)) {\n    return Address.createMultisig(data, network, type);\n  }\n\n  if (data instanceof Address) {\n    // Immutable instance\n    return data;\n  }\n\n  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Second argument must be \"livenet\" or \"testnet\".');\n  }\n\n  if (type && (type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash)) {\n    throw new TypeError('Third argument must be \"pubkeyhash\" or \"scripthash\".');\n  }\n\n  var info = this._classifyArguments(data, network, type);\n\n  // set defaults if not set\n  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;\n  info.type = info.type || type || Address.PayToPublicKeyHash;\n\n  JSUtil.defineImmutable(this, {\n    hashBuffer: info.hashBuffer,\n    network: info.network,\n    type: info.type\n  });\n\n  return this;\n}\n\n/**\n * Internal function used to split different kinds of arguments of the constructor\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Object} An \"info\" object with \"type\", \"network\", and \"hashBuffer\"\n */\nAddress.prototype._classifyArguments = function(data, network, type) {\n  /* jshint maxcomplexity: 10 */\n  // transform and validate input data\n  if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) {\n    return Address._transformHash(data);\n  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) {\n    return Address._transformBuffer(data, network, type);\n  } else if (data instanceof PublicKey) {\n    return Address._transformPublicKey(data);\n  } else if (data instanceof Script) {\n    return Address._transformScript(data, network);\n  } else if (typeof(data) === 'string') {\n    return Address._transformString(data, network, type);\n  } else if (_.isObject(data)) {\n    return Address._transformObject(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n};\n\n/** @static */\nAddress.PayToPublicKeyHash = 'pubkeyhash';\n/** @static */\nAddress.PayToScriptHash = 'scripthash';\n\n/**\n * @param {Buffer} hash - An instance of a hash Buffer\n * @returns {Object} An object with keys: hashBuffer\n * @private\n */\nAddress._transformHash = function(hash) {\n  var info = {};\n  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n  if (hash.length !== 20) {\n    throw new TypeError('Address hashbuffers must be exactly 20 bytes.');\n  }\n  info.hashBuffer = hash;\n  return info;\n};\n\n/**\n * Deserializes an address serialized through `Address#toObject()`\n * @param {Object} data\n * @param {string} data.hash - the hash that this address encodes\n * @param {string} data.type - either 'pubkeyhash' or 'scripthash'\n * @param {Network=} data.network - the name of the network associated\n * @return {Address}\n */\nAddress._transformObject = function(data) {\n  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');\n  $.checkArgument(data.type, 'Must provide a `type` property');\n  return {\n    hashBuffer: data.hash ? Buffer.from(data.hash, 'hex') : data.hashBuffer,\n    network: Networks.get(data.network) || Networks.defaultNetwork,\n    type: data.type\n  };\n};\n\n/**\n * Internal function to discover the network and type based on the first data byte\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @returns {Object} An object with keys: network and type\n * @private\n */\nAddress._classifyFromVersion = function(buffer) {\n  var version = {};\n\n  var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');\n  var scripthashNetwork = Networks.get(buffer[0], 'scripthash');\n\n  if (pubkeyhashNetwork) {\n    version.network = pubkeyhashNetwork;\n    version.type = Address.PayToPublicKeyHash;\n  } else if (scripthashNetwork) {\n    version.network = scripthashNetwork;\n    version.type = Address.PayToScriptHash;\n  }\n\n  return version;\n};\n\n/**\n * Internal function to transform a bitcoin address buffer\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @param {string=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\nAddress._transformBuffer = function(buffer, network, type) {\n  /* jshint maxcomplexity: 9 */\n  var info = {};\n  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n  if (buffer.length !== 1 + 20) {\n    throw new TypeError('Address buffers must be exactly 21 bytes.');\n  }\n\n  var networkObj = Networks.get(network);\n  var bufferVersion = Address._classifyFromVersion(buffer);\n\n  if (network && !networkObj) {\n    throw new TypeError('Unknown network');\n  }\n\n  if (!bufferVersion.network || (networkObj && networkObj !== bufferVersion.network)) {\n    throw new TypeError('Address has mismatched network type.');\n  }\n\n  if (!bufferVersion.type || (type && type !== bufferVersion.type)) {\n    throw new TypeError('Address has mismatched type.');\n  }\n\n  info.hashBuffer = buffer.slice(1);\n  info.network = bufferVersion.network;\n  info.type = bufferVersion.type;\n  return info;\n};\n\n/**\n * Internal function to transform a {@link PublicKey}\n *\n * @param {PublicKey} pubkey - An instance of PublicKey\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\nAddress._transformPublicKey = function(pubkey) {\n  var info = {};\n  if (!(pubkey instanceof PublicKey)) {\n    throw new TypeError('Address must be an instance of PublicKey.');\n  }\n  info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());\n  info.type = Address.PayToPublicKeyHash;\n  return info;\n};\n\n/**\n * Internal function to transform a {@link Script} into a `info` object.\n *\n * @param {Script} script - An instance of Script\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\nAddress._transformScript = function(script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = script.getAddressInfo(network);\n  if (!info) {\n    throw new errors.Script.CantDeriveAddress(script);\n  }\n  return info;\n};\n\n/**\n * Creates a P2SH address from a set of public keys and a threshold.\n *\n * The addresses will be sorted lexicographically, as that is the trend in bitcoin.\n * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}\n * interface.\n *\n * @param {Array} publicKeys - a set of public keys to create an address\n * @param {number} threshold - the number of signatures needed to release the funds\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {boolean=} nestedWitness - if the address uses a nested p2sh witness\n * @return {Address}\n */\nAddress.createMultisig = function(publicKeys, threshold, network, nestedWitness) {\n  network = network || publicKeys[0].network || Networks.defaultNetwork;\n  var redeemScript = Script.buildMultisigOut(publicKeys, threshold);\n  if (nestedWitness) {\n    return Address.payingTo(Script.buildWitnessMultisigOutFromScript(redeemScript), network);\n  }\n  return Address.payingTo(redeemScript, network);\n};\n\n/**\n * Internal function to transform a bitcoin address string\n *\n * @param {string} data\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\nAddress._transformString = function(data, network, type) {\n  if (typeof(data) !== 'string') {\n    throw new TypeError('data parameter supplied is not a string.');\n  }\n  data = data.trim();\n  var addressBuffer = Base58Check.decode(data);\n  var info = Address._transformBuffer(addressBuffer, network, type);\n  return info;\n};\n\n/**\n * Instantiate an address from a PublicKey instance\n *\n * @param {PublicKey} data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromPublicKey = function(data, network) {\n  var info = Address._transformPublicKey(data);\n  network = network || Networks.defaultNetwork;\n  return new Address(info.hashBuffer, network, info.type);\n};\n\n/**\n * Instantiate an address from a ripemd160 public key hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromPublicKeyHash = function(hash, network) {\n  var info = Address._transformHash(hash);\n  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);\n};\n\n/**\n * Instantiate an address from a ripemd160 script hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromScriptHash = function(hash, network) {\n  $.checkArgument(hash, 'hash parameter is required');\n  var info = Address._transformHash(hash);\n  return new Address(info.hashBuffer, network, Address.PayToScriptHash);\n};\n\n/**\n * Builds a p2sh address paying to script. This will hash the script and\n * use that to create the address.\n * If you want to extract an address associated with a script instead,\n * see {{Address#fromScript}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.payingTo = function(script, network) {\n  $.checkArgument(script, 'script is required');\n  $.checkArgument(script instanceof Script, 'script must be instance of Script');\n  return Address.fromScriptHash(Hash.sha256ripemd160(script.toBuffer()), network);\n};\n\n/**\n * Extract address from a Script. The script must be of one\n * of the following types: p2pkh input, p2pkh output, p2sh input\n * or p2sh output.\n * This will analyze the script and extract address information from it.\n * If you want to transform any script to a p2sh Address paying\n * to that script's hash instead, use {{Address#payingTo}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromScript = function(script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = Address._transformScript(script, network);\n  return new Address(info.hashBuffer, network, info.type);\n};\n\n/**\n * Instantiate an address from a buffer of the address\n *\n * @param {Buffer} buffer - An instance of buffer of the address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromBuffer = function(buffer, network, type) {\n  var info = Address._transformBuffer(buffer, network, type);\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n\n/**\n * Instantiate an address from an address string\n *\n * @param {string} str - An string of the bitcoin address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromString = function(str, network, type) {\n  var info = Address._transformString(str, network, type);\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n\n/**\n * Instantiate an address from an Object\n *\n * @param {string} json - An JSON string or Object with keys: hash, network and type\n * @returns {Address} A new valid instance of an Address\n */\nAddress.fromObject = function fromObject(obj) {\n  $.checkState(\n    JSUtil.isHexa(obj.hash),\n    'Unexpected hash property, \"' + obj.hash + '\", expected to be hex.'\n  );\n  var hashBuffer = Buffer.from(obj.hash, 'hex');\n  return new Address(hashBuffer, obj.network, obj.type);\n};\n\n/**\n * Will return a validation error if exists\n *\n * @example\n * ```javascript\n * // a network mismatch error\n * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {null|Error} The corresponding error message\n */\nAddress.getValidationError = function(data, network, type) {\n  var error;\n  try {\n    /* jshint nonew: false */\n    new Address(data, network, type);\n  } catch (e) {\n    error = e;\n  }\n  return error;\n};\n\n/**\n * Will return a boolean if an address is valid\n *\n * @example\n * ```javascript\n * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {boolean} The corresponding error message\n */\nAddress.isValid = function(data, network, type) {\n  return !Address.getValidationError(data, network, type);\n};\n\n/**\n * Returns true if an address is of pay to public key hash type\n * @return boolean\n */\nAddress.prototype.isPayToPublicKeyHash = function() {\n  return this.type === Address.PayToPublicKeyHash;\n};\n\n/**\n * Returns true if an address is of pay to script hash type\n * @return boolean\n */\nAddress.prototype.isPayToScriptHash = function() {\n  return this.type === Address.PayToScriptHash;\n};\n\n/**\n * Will return a buffer representation of the address\n *\n * @returns {Buffer} Bitcoin address buffer\n */\nAddress.prototype.toBuffer = function() {\n  var version = Buffer.from([this.network[this.type]]);\n  return Buffer.concat([version, this.hashBuffer]);\n};\n\n/**\n * @returns {Object} A plain object with the address information\n */\nAddress.prototype.toObject = Address.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hashBuffer.toString('hex'),\n    type: this.type,\n    network: this.network.toString()\n  };\n};\n\n/**\n * Will return a the string representation of the address\n *\n * @returns {string} Bitcoin address\n */\nAddress.prototype.toString = function() {\n  return Base58Check.encode(this.toBuffer());\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin address\n */\nAddress.prototype.inspect = function() {\n  return '<Address: ' + this.toString() + ', type: ' + this.type + ', network: ' + this.network + '>';\n};\n\nmodule.exports = Address;\n\nvar Script = require('./script');\n"]},"metadata":{},"sourceType":"script"}