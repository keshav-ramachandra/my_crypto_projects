{"ast":null,"code":"import { getRenNetworkDetails, RenNetwork } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { StandardExplorer } from \"./networks\";\nimport { addressIsValid, transactionIsValid } from \"./utils\";\nexport const renAvalancheTestnet = {\n  name: \"Avalanche Testnet\",\n  chain: \"avalancheTestnet\",\n  isTestnet: true,\n  chainLabel: \"Avalanche Testnet\",\n  networkID: 80001,\n  addresses: {\n    GatewayRegistry: \"0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC\",\n    BasicAdapter: \"0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066\"\n  },\n  publicProvider: () => `https://api.avax-test.network/ext/bc/C/rpc`,\n  explorer: StandardExplorer(\"https://cchain.explorer.avax-test.network\"),\n\n  /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n  infura: \"https://api.avax-test.network/ext/bc/C/rpc\",\n\n  /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n  etherscan: \"https://cchain.explorer.avax-test.network\"\n};\nexport const renAvalancheMainnet = {\n  name: \"Avalanche Mainnet\",\n  chain: \"avalancheMainnet\",\n  isTestnet: false,\n  chainLabel: \"Avalanche Mainnet\",\n  networkID: 137,\n  addresses: {\n    GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n    BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\"\n  },\n  publicProvider: () => `https://api.avax.network/ext/bc/C/rpc`,\n  explorer: StandardExplorer(\"https://cchain.explorer.avax.network\"),\n\n  /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n  infura: \"https://api.avax.network/ext/bc/C/rpc\",\n\n  /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n  etherscan: \"https://cchain.explorer.avax.network\"\n};\nexport const AvalancheConfigMap = {\n  [RenNetwork.TestnetVDot3]: renAvalancheTestnet,\n  [RenNetwork.MainnetVDot3]: renAvalancheMainnet\n};\n\nconst resolveAvalancheNetwork = renNetwork => {\n  if (!renNetwork) {\n    return AvalancheConfigMap[RenNetwork.MainnetVDot3];\n  }\n\n  if (renNetwork.addresses) {\n    return renNetwork;\n  } else {\n    const details = getRenNetworkDetails( // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    renNetwork);\n    return details.isTestnet ? renAvalancheTestnet : renAvalancheMainnet;\n  }\n};\n\nexport class AvalancheClass extends EthereumClass {\n  constructor(web3Provider, renNetwork) {\n    // To be compatible with the Ethereum chain class, the first parameter\n    // is a web3Provider and the second the RenVM network. However,\n    super(web3Provider, resolveAvalancheNetwork(renNetwork));\n    this.chain = AvalancheClass.chain;\n    this.name = AvalancheClass.chain;\n    this.legacyName = undefined;\n    this.configMap = AvalancheConfigMap;\n    this.utils = utilsWithChainNetwork(AvalancheClass.utils, () => this.renNetworkDetails);\n\n    this.initialize = renNetwork => {\n      this.renNetworkDetails = this.renNetworkDetails || AvalancheConfigMap[getRenNetworkDetails(renNetwork).name];\n\n      if (!this.renNetworkDetails) {\n        throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);\n      }\n\n      return this;\n    };\n  }\n\n}\nAvalancheClass.chain = \"Avalanche\"; // public logRequestLimit = 1000;\n\nAvalancheClass.configMap = AvalancheConfigMap;\nAvalancheClass.utils = {\n  resolveChainNetwork: resolveAvalancheNetwork,\n  addressIsValid,\n  transactionIsValid,\n  addressExplorerLink: (address, network) => `${(Avalanche.utils.resolveChainNetwork(network) || renAvalancheMainnet).etherscan}/address/${address}`,\n  transactionExplorerLink: (transaction, network) => `${(Avalanche.utils.resolveChainNetwork(network) || renAvalancheMainnet).etherscan}/tx/${transaction || \"\"}`\n}; // @dev Removes any static fields, except `utils`.\n\nexport const Avalanche = Callable(AvalancheClass);","map":{"version":3,"sources":["../../src/avalanche.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getRenNetworkDetails, RenNetwork, } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { StandardExplorer } from \"./networks\";\nimport { addressIsValid, transactionIsValid } from \"./utils\";\nexport const renAvalancheTestnet = {\n    name: \"Avalanche Testnet\",\n    chain: \"avalancheTestnet\",\n    isTestnet: true,\n    chainLabel: \"Avalanche Testnet\",\n    networkID: 80001,\n    addresses: {\n        GatewayRegistry: \"0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC\",\n        BasicAdapter: \"0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066\",\n    },\n    publicProvider: () => `https://api.avax-test.network/ext/bc/C/rpc`,\n    explorer: StandardExplorer(\"https://cchain.explorer.avax-test.network\"),\n    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n    infura: \"https://api.avax-test.network/ext/bc/C/rpc\",\n    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n    etherscan: \"https://cchain.explorer.avax-test.network\",\n};\nexport const renAvalancheMainnet = {\n    name: \"Avalanche Mainnet\",\n    chain: \"avalancheMainnet\",\n    isTestnet: false,\n    chainLabel: \"Avalanche Mainnet\",\n    networkID: 137,\n    addresses: {\n        GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n        BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\",\n    },\n    publicProvider: () => `https://api.avax.network/ext/bc/C/rpc`,\n    explorer: StandardExplorer(\"https://cchain.explorer.avax.network\"),\n    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n    infura: \"https://api.avax.network/ext/bc/C/rpc\",\n    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n    etherscan: \"https://cchain.explorer.avax.network\",\n};\nexport const AvalancheConfigMap = {\n    [RenNetwork.TestnetVDot3]: renAvalancheTestnet,\n    [RenNetwork.MainnetVDot3]: renAvalancheMainnet,\n};\nconst resolveAvalancheNetwork = (renNetwork) => {\n    if (!renNetwork) {\n        return AvalancheConfigMap[RenNetwork.MainnetVDot3];\n    }\n    if (renNetwork.addresses) {\n        return renNetwork;\n    }\n    else {\n        const details = getRenNetworkDetails(\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        renNetwork);\n        return details.isTestnet ? renAvalancheTestnet : renAvalancheMainnet;\n    }\n};\nexport class AvalancheClass extends EthereumClass {\n    constructor(web3Provider, renNetwork) {\n        // To be compatible with the Ethereum chain class, the first parameter\n        // is a web3Provider and the second the RenVM network. However,\n        super(web3Provider, resolveAvalancheNetwork(renNetwork));\n        this.chain = AvalancheClass.chain;\n        this.name = AvalancheClass.chain;\n        this.legacyName = undefined;\n        this.configMap = AvalancheConfigMap;\n        this.utils = utilsWithChainNetwork(AvalancheClass.utils, () => this.renNetworkDetails);\n        this.initialize = (renNetwork) => {\n            this.renNetworkDetails =\n                this.renNetworkDetails ||\n                    AvalancheConfigMap[getRenNetworkDetails(renNetwork).name];\n            if (!this.renNetworkDetails) {\n                throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);\n            }\n            return this;\n        };\n    }\n}\nAvalancheClass.chain = \"Avalanche\";\n// public logRequestLimit = 1000;\nAvalancheClass.configMap = AvalancheConfigMap;\nAvalancheClass.utils = {\n    resolveChainNetwork: resolveAvalancheNetwork,\n    addressIsValid,\n    transactionIsValid,\n    addressExplorerLink: (address, network) => `${(Avalanche.utils.resolveChainNetwork(network) ||\n        renAvalancheMainnet).etherscan}/address/${address}`,\n    transactionExplorerLink: (transaction, network) => `${(Avalanche.utils.resolveChainNetwork(network) ||\n        renAvalancheMainnet).etherscan}/tx/${transaction || \"\"}`,\n};\n// @dev Removes any static fields, except `utils`.\nexport const Avalanche = Callable(AvalancheClass);\n//# sourceMappingURL=avalanche.js.map"]},"metadata":{},"sourceType":"module"}