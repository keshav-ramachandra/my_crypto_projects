{"ast":null,"code":"import { getRenNetworkDetails, RenNetwork } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { StandardExplorer } from \"./networks\";\nimport { addressIsValid, transactionIsValid } from \"./utils\";\nexport const renPolygonTestnet = {\n  name: \"Polygon Testnet\",\n  chain: \"polygonTestnet\",\n  isTestnet: true,\n  chainLabel: \"Polygon Testnet\",\n  networkID: 80001,\n  addresses: {\n    GatewayRegistry: \"0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC\",\n    BasicAdapter: \"0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066\"\n  },\n  publicProvider: () => `https://rpc-mumbai.maticvigil.com`,\n  explorer: StandardExplorer(\"https://explorer-mumbai.maticvigil.com\"),\n\n  /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n  infura: \"https://rpc-mumbai.maticvigil.com\",\n\n  /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n  etherscan: \"https://explorer-mumbai.maticvigil.com\"\n};\nexport const renPolygonMainnet = {\n  name: \"Polygon Mainnet\",\n  chain: \"polygonMainnet\",\n  isTestnet: false,\n  chainLabel: \"Polygon Mainnet\",\n  networkID: 137,\n  addresses: {\n    GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n    BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\"\n  },\n  publicProvider: () => `https://rpc-mainnet.maticvigil.com`,\n  explorer: StandardExplorer(\"https://polygonscan.com\"),\n\n  /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n  infura: \"https://rpc-mainnet.maticvigil.com\",\n\n  /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n  etherscan: \"https://polygonscan.com\"\n};\nexport const PolygonConfigMap = {\n  [RenNetwork.TestnetVDot3]: renPolygonTestnet,\n  [RenNetwork.MainnetVDot3]: renPolygonMainnet\n};\n\nconst resolvePolygonNetwork = renNetwork => {\n  if (!renNetwork) {\n    return PolygonConfigMap[RenNetwork.MainnetVDot3];\n  }\n\n  if (renNetwork.addresses) {\n    return renNetwork;\n  } else {\n    const details = getRenNetworkDetails( // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    renNetwork);\n    return details.isTestnet ? renPolygonTestnet : renPolygonMainnet;\n  }\n};\n\nexport class PolygonClass extends EthereumClass {\n  constructor(web3Provider, renNetwork) {\n    // To be compatible with the Ethereum chain class, the first parameter\n    // is a web3Provider and the second the RenVM network. However,\n    super(web3Provider, resolvePolygonNetwork(renNetwork));\n    this.chain = PolygonClass.chain;\n    this.name = PolygonClass.chain;\n    this.legacyName = undefined;\n    this.logRequestLimit = 1000;\n    this.configMap = PolygonConfigMap;\n    this.utils = utilsWithChainNetwork(PolygonClass.utils, () => this.renNetworkDetails);\n\n    this.initialize = renNetwork => {\n      this.renNetworkDetails = this.renNetworkDetails || PolygonConfigMap[getRenNetworkDetails(renNetwork).name];\n\n      if (!this.renNetworkDetails) {\n        throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);\n      }\n\n      return this;\n    };\n  }\n\n}\nPolygonClass.chain = \"Polygon\";\nPolygonClass.configMap = PolygonConfigMap;\nPolygonClass.utils = {\n  resolveChainNetwork: resolvePolygonNetwork,\n  addressIsValid,\n  transactionIsValid,\n  addressExplorerLink: (address, network) => `${(Polygon.utils.resolveChainNetwork(network) || renPolygonMainnet).etherscan}/address/${address}`,\n  transactionExplorerLink: (transaction, network) => `${(Polygon.utils.resolveChainNetwork(network) || renPolygonMainnet).etherscan}/tx/${transaction || \"\"}`\n}; // @dev Removes any static fields, except `utils`.\n\nexport const Polygon = Callable(PolygonClass);","map":{"version":3,"sources":["../../src/polygon.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getRenNetworkDetails, RenNetwork, } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { StandardExplorer } from \"./networks\";\nimport { addressIsValid, transactionIsValid } from \"./utils\";\nexport const renPolygonTestnet = {\n    name: \"Polygon Testnet\",\n    chain: \"polygonTestnet\",\n    isTestnet: true,\n    chainLabel: \"Polygon Testnet\",\n    networkID: 80001,\n    addresses: {\n        GatewayRegistry: \"0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC\",\n        BasicAdapter: \"0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066\",\n    },\n    publicProvider: () => `https://rpc-mumbai.maticvigil.com`,\n    explorer: StandardExplorer(\"https://explorer-mumbai.maticvigil.com\"),\n    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n    infura: \"https://rpc-mumbai.maticvigil.com\",\n    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n    etherscan: \"https://explorer-mumbai.maticvigil.com\",\n};\nexport const renPolygonMainnet = {\n    name: \"Polygon Mainnet\",\n    chain: \"polygonMainnet\",\n    isTestnet: false,\n    chainLabel: \"Polygon Mainnet\",\n    networkID: 137,\n    addresses: {\n        GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n        BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\",\n    },\n    publicProvider: () => `https://rpc-mainnet.maticvigil.com`,\n    explorer: StandardExplorer(\"https://polygonscan.com\"),\n    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n    infura: \"https://rpc-mainnet.maticvigil.com\",\n    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n    etherscan: \"https://polygonscan.com\",\n};\nexport const PolygonConfigMap = {\n    [RenNetwork.TestnetVDot3]: renPolygonTestnet,\n    [RenNetwork.MainnetVDot3]: renPolygonMainnet,\n};\nconst resolvePolygonNetwork = (renNetwork) => {\n    if (!renNetwork) {\n        return PolygonConfigMap[RenNetwork.MainnetVDot3];\n    }\n    if (renNetwork.addresses) {\n        return renNetwork;\n    }\n    else {\n        const details = getRenNetworkDetails(\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        renNetwork);\n        return details.isTestnet ? renPolygonTestnet : renPolygonMainnet;\n    }\n};\nexport class PolygonClass extends EthereumClass {\n    constructor(web3Provider, renNetwork) {\n        // To be compatible with the Ethereum chain class, the first parameter\n        // is a web3Provider and the second the RenVM network. However,\n        super(web3Provider, resolvePolygonNetwork(renNetwork));\n        this.chain = PolygonClass.chain;\n        this.name = PolygonClass.chain;\n        this.legacyName = undefined;\n        this.logRequestLimit = 1000;\n        this.configMap = PolygonConfigMap;\n        this.utils = utilsWithChainNetwork(PolygonClass.utils, () => this.renNetworkDetails);\n        this.initialize = (renNetwork) => {\n            this.renNetworkDetails =\n                this.renNetworkDetails ||\n                    PolygonConfigMap[getRenNetworkDetails(renNetwork).name];\n            if (!this.renNetworkDetails) {\n                throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);\n            }\n            return this;\n        };\n    }\n}\nPolygonClass.chain = \"Polygon\";\nPolygonClass.configMap = PolygonConfigMap;\nPolygonClass.utils = {\n    resolveChainNetwork: resolvePolygonNetwork,\n    addressIsValid,\n    transactionIsValid,\n    addressExplorerLink: (address, network) => `${(Polygon.utils.resolveChainNetwork(network) ||\n        renPolygonMainnet).etherscan}/address/${address}`,\n    transactionExplorerLink: (transaction, network) => `${(Polygon.utils.resolveChainNetwork(network) ||\n        renPolygonMainnet).etherscan}/tx/${transaction || \"\"}`,\n};\n// @dev Removes any static fields, except `utils`.\nexport const Polygon = Callable(PolygonClass);\n//# sourceMappingURL=polygon.js.map"]},"metadata":{},"sourceType":"module"}