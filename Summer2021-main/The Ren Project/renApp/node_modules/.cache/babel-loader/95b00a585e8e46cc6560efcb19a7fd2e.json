{"ast":null,"code":"var _jsxFileName = \"/home/kesha/Downloads/ren-main/renApp/src/App.js\";\nimport React from \"react\";\nimport RenJS from \"@renproject/ren\";\nimport { Bitcoin, Ethereum } from \"@renproject/chains\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport ABI from \"./ABI.json\"; // Replace with your contract's address.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0xb9b0442DE9BC214a23B434Ee2Ec7AF8A4e1b3eeE\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      let web3Provider; // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n      // Modern dApp browsers...\n\n      if (window.ethereum) {\n        web3Provider = window.ethereum;\n\n        try {\n          // Request account access\n          await window.ethereum.enable();\n        } catch (error) {\n          // User denied account access...\n          this.logError(\"Please allow access to your Web3 wallet.\");\n          return;\n        }\n      } // Legacy dApp browsers...\n      else if (window.web3) {\n        web3Provider = window.web3.currentProvider;\n      } // If no injected web3 instance is detected, fall back to Ganache\n      else {\n        this.logError(\"Please install MetaMask!\");\n        return;\n      }\n\n      const web3 = new Web3(web3Provider);\n      const networkID = await web3.eth.net.getId();\n\n      if (networkID !== 42) {\n        this.logError(\"Please set your network to Kovan.\");\n        return;\n      }\n\n      this.setState({\n        web3\n      }, () => {\n        // Update balances immediately and every 10 seconds\n        this.updateBalance();\n        setInterval(() => {\n          this.updateBalance();\n        }, 10 * 1000);\n      });\n    };\n\n    this.render = () => {\n      const {\n        balance,\n        message,\n        error\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance: \", balance, \" RenBTC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.deposit().catch(this.logError),\n            children: \"Deposit 0.0005 BTC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.withdraw().catch(this.logError),\n            children: [\"Withdraw \", balance, \" RenBTC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), message.split(\"\\n\").map(line => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: line\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 18\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.updateBalance = async () => {\n      const {\n        web3\n      } = this.state;\n      const contract = new web3.eth.Contract(ABI, contractAddress);\n      const balance = await contract.methods.balance().call();\n      this.setState({\n        balance: parseInt(balance.toString()) / 10 ** 8\n      });\n    };\n\n    this.logError = error => {\n      console.error(error);\n      this.setState({\n        error: String((error || {}).message || error)\n      });\n    };\n\n    this.log = message => {\n      this.setState({\n        message\n      });\n    };\n\n    this.deposit = async () => {\n      this.logError(\"\"); // Reset error\n\n      const {\n        web3,\n        renJS\n      } = this.state;\n      this.log(`Generating deposit address...`);\n      const amount = 0.0005; // BTC\n\n      const mint = await renJS.lockAndMint({\n        // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n        asset: \"BTC\",\n        from: Bitcoin(),\n        to: Ethereum(web3.currentProvider).Contract({\n          // The contract we want to interact with\n          sendTo: contractAddress,\n          // The name of the function we want to call\n          contractFn: \"deposit\",\n          // Arguments expected for calling `deposit`\n          contractParams: [{\n            name: \"_msg\",\n            type: \"bytes\",\n            value: Buffer.from(`Depositing ${amount} BTC`)\n          }]\n        })\n      }); // Show the gateway address to the user so that they can transfer their BTC to it.\n\n      this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n      mint.on(\"deposit\", async deposit => {\n        // Details of the deposit are available from `deposit.depositDetails`.\n        const hash = deposit.txHash();\n\n        const depositLog = msg => this.log(`BTC deposit: ${Bitcoin.utils.transactionExplorerLink(deposit.depositDetails.transaction, \"testnet\")}\\n\n          RenVM Hash: ${hash}\\n\n          Status: ${deposit.status}\\n\n          ${msg}`);\n\n        await deposit.confirmed().on(\"target\", target => depositLog(`0/${target} confirmations`)).on(\"confirmation\", (confs, target) => depositLog(`${confs}/${target} confirmations`));\n        await deposit.signed() // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n        .on(\"status\", status => depositLog(`Status: ${status}`));\n        await deposit.mint() // Print Ethereum transaction hash.\n        .on(\"transactionHash\", txHash => depositLog(`Mint tx: ${txHash}`));\n        this.log(`Deposited ${amount} BTC.`);\n      });\n    };\n\n    this.withdraw = async () => {\n      this.logError(\"\"); // Reset error\n\n      const {\n        web3,\n        renJS,\n        balance\n      } = this.state;\n      const recipient = prompt(\"Enter BTC recipient:\");\n      const amount = balance;\n      const burnAndRelease = await renJS.burnAndRelease({\n        // Send BTC from Ethereum back to the Bitcoin blockchain.\n        asset: \"BTC\",\n        to: Bitcoin().Address(recipient),\n        from: Ethereum(web3.currentProvider).Contract(btcAddress => ({\n          sendTo: contractAddress,\n          contractFn: \"withdraw\",\n          contractParams: [{\n            type: \"bytes\",\n            name: \"_msg\",\n            value: Buffer.from(`Withdrawing ${amount} BTC`)\n          }, {\n            type: \"bytes\",\n            name: \"_to\",\n            value: btcAddress\n          }, {\n            type: \"uint256\",\n            name: \"_amount\",\n            value: RenJS.utils.toSmallestUnit(amount, 8)\n          }]\n        }))\n      });\n      let confirmations = 0;\n      await burnAndRelease.burn() // Ethereum transaction confirmations.\n      .on(\"confirmation\", confs => {\n        confirmations = confs;\n      }) // Print Ethereum transaction hash.\n      .on(\"transactionHash\", txHash => this.log(`Ethereum transaction: ${String(txHash)}\\nSubmitting...`));\n      await burnAndRelease.release() // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n      .on(\"status\", status => status === \"confirming\" ? this.log(`${status} (${confirmations}/15)`) : this.log(status)) // Print RenVM transaction hash\n      .on(\"txHash\", hash => this.log(`RenVM hash: ${hash}`));\n      this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n    };\n\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\", {\n        useV2TransactionFormat: true\n      })\n    };\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kesha/Downloads/ren-main/renApp/src/App.js"],"names":["React","RenJS","Bitcoin","Ethereum","Web3","ABI","contractAddress","App","Component","constructor","props","componentDidMount","web3Provider","window","ethereum","enable","error","logError","web3","currentProvider","networkID","eth","net","getId","setState","updateBalance","setInterval","render","balance","message","state","deposit","catch","withdraw","split","map","line","color","contract","Contract","methods","call","parseInt","toString","console","String","log","renJS","amount","mint","lockAndMint","asset","from","to","sendTo","contractFn","contractParams","name","type","value","Buffer","gatewayAddress","on","hash","txHash","depositLog","msg","utils","transactionExplorerLink","depositDetails","transaction","status","confirmed","target","confs","signed","recipient","prompt","burnAndRelease","Address","btcAddress","toSmallestUnit","confirmations","burn","release","useV2TransactionFormat"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,oBAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;AAEA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;;AACA,MAAMC,eAAe,GAAG,4CAAxB;;AAEA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,iBAVmB,GAUC,YAAY;AAC9B,UAAIC,YAAJ,CAD8B,CAG9B;AACA;;AACA,UAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBF,QAAAA,YAAY,GAAGC,MAAM,CAACC,QAAtB;;AACA,YAAI;AACF;AACA,gBAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACD,SAHD,CAGE,OAAOC,KAAP,EAAc;AACd;AACA,eAAKC,QAAL,CAAc,0CAAd;AACA;AACD;AACF,OAVD,CAWA;AAXA,WAYK,IAAIJ,MAAM,CAACK,IAAX,EAAiB;AACpBN,QAAAA,YAAY,GAAGC,MAAM,CAACK,IAAP,CAAYC,eAA3B;AACD,OAFI,CAGL;AAHK,WAIA;AACH,aAAKF,QAAL,CAAc,0BAAd;AACA;AACD;;AAED,YAAMC,IAAI,GAAG,IAAId,IAAJ,CAASQ,YAAT,CAAb;AAEA,YAAMQ,SAAS,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;;AACA,UAAIH,SAAS,KAAK,EAAlB,EAAsB;AACpB,aAAKH,QAAL,CAAc,mCAAd;AACA;AACD;;AAED,WAAKO,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd,EAAwB,MAAM;AAC5B;AACA,aAAKO,aAAL;AACAC,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKD,aAAL;AACD,SAFU,EAER,KAAK,IAFG,CAAX;AAGD,OAND;AAOD,KAnDkB;;AAAA,SAqDnBE,MArDmB,GAqDV,MAAM;AACb,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,OAAX;AAAoBb,QAAAA;AAApB,UAA8B,KAAKc,KAAzC;AACA,0BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAA,kCAAaF,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,iCACE;AAAQ,YAAA,OAAO,EAAE,MAAM,KAAKG,OAAL,GAAeC,KAAf,CAAqB,KAAKf,QAA1B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAOE;AAAA,iCACE;AAAQ,YAAA,OAAO,EAAE,MAAM,KAAKgB,QAAL,GAAgBD,KAAhB,CAAsB,KAAKf,QAA3B,CAAvB;AAAA,oCACYW,OADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF,EAYGC,OAAO,CAACK,KAAR,CAAc,IAAd,EAAoBC,GAApB,CAAyBC,IAAD,iBACvB;AAAA,oBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,gBADD,CAZH,EAeGpB,KAAK,gBAAG;AAAG,UAAA,KAAK,EAAE;AAAEqB,YAAAA,KAAK,EAAE;AAAT,WAAV;AAAA,oBAA6BrB;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAAH,GAA6C,IAfrD;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAmBD,KA1EkB;;AAAA,SA4EnBS,aA5EmB,GA4EH,YAAY;AAC1B,YAAM;AAAEP,QAAAA;AAAF,UAAW,KAAKY,KAAtB;AACA,YAAMQ,QAAQ,GAAG,IAAIpB,IAAI,CAACG,GAAL,CAASkB,QAAb,CAAsBlC,GAAtB,EAA2BC,eAA3B,CAAjB;AACA,YAAMsB,OAAO,GAAG,MAAMU,QAAQ,CAACE,OAAT,CAAiBZ,OAAjB,GAA2Ba,IAA3B,EAAtB;AACA,WAAKjB,QAAL,CAAc;AAAEI,QAAAA,OAAO,EAAEc,QAAQ,CAACd,OAAO,CAACe,QAAR,EAAD,CAAR,GAA+B,MAAM;AAAhD,OAAd;AACD,KAjFkB;;AAAA,SAmFnB1B,QAnFmB,GAmFPD,KAAD,IAAW;AACpB4B,MAAAA,OAAO,CAAC5B,KAAR,CAAcA,KAAd;AACA,WAAKQ,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAE6B,MAAM,CAAC,CAAC7B,KAAK,IAAI,EAAV,EAAca,OAAd,IAAyBb,KAA1B;AAAf,OAAd;AACD,KAtFkB;;AAAA,SAwFnB8B,GAxFmB,GAwFZjB,OAAD,IAAa;AACjB,WAAKL,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AACD,KA1FkB;;AAAA,SA4FnBE,OA5FmB,GA4FT,YAAY;AACpB,WAAKd,QAAL,CAAc,EAAd,EADoB,CACD;;AAEnB,YAAM;AAAEC,QAAAA,IAAF;AAAQ6B,QAAAA;AAAR,UAAkB,KAAKjB,KAA7B;AAEA,WAAKgB,GAAL,CAAU,+BAAV;AAEA,YAAME,MAAM,GAAG,MAAf,CAPoB,CAOG;;AACvB,YAAMC,IAAI,GAAG,MAAMF,KAAK,CAACG,WAAN,CAAkB;AACnC;AACAC,QAAAA,KAAK,EAAE,KAF4B;AAGnCC,QAAAA,IAAI,EAAElD,OAAO,EAHsB;AAInCmD,QAAAA,EAAE,EAAElD,QAAQ,CAACe,IAAI,CAACC,eAAN,CAAR,CAA+BoB,QAA/B,CAAwC;AAC1C;AACAe,UAAAA,MAAM,EAAEhD,eAFkC;AAI1C;AACAiD,UAAAA,UAAU,EAAE,SAL8B;AAO1C;AACAC,UAAAA,cAAc,EAAE,CACd;AACEC,YAAAA,IAAI,EAAE,MADR;AAEEC,YAAAA,IAAI,EAAE,OAFR;AAGEC,YAAAA,KAAK,EAAEC,MAAM,CAACR,IAAP,CAAa,cAAaJ,MAAO,MAAjC;AAHT,WADc;AAR0B,SAAxC;AAJ+B,OAAlB,CAAnB,CARoB,CA8BpB;;AACA,WAAKF,GAAL,CAAU,WAAUE,MAAO,WAAUC,IAAI,CAACY,cAAe,EAAzD;AAEAZ,MAAAA,IAAI,CAACa,EAAL,CAAQ,SAAR,EAAmB,MAAO/B,OAAP,IAAmB;AACpC;AAEA,cAAMgC,IAAI,GAAGhC,OAAO,CAACiC,MAAR,EAAb;;AACA,cAAMC,UAAU,GAAIC,GAAD,IACjB,KAAKpB,GAAL,CACG,gBAAe5C,OAAO,CAACiE,KAAR,CAAcC,uBAAd,CACdrC,OAAO,CAACsC,cAAR,CAAuBC,WADT,EAEd,SAFc,CAGd;AACZ,wBAAwBP,IAAK;AAC7B,oBAAoBhC,OAAO,CAACwC,MAAO;AACnC,YAAYL,GAAI,EAPR,CADF;;AAWA,cAAMnC,OAAO,CACVyC,SADG,GAEHV,EAFG,CAEA,QAFA,EAEWW,MAAD,IAAYR,UAAU,CAAE,KAAIQ,MAAO,gBAAb,CAFhC,EAGHX,EAHG,CAGA,cAHA,EAGgB,CAACY,KAAD,EAAQD,MAAR,KAClBR,UAAU,CAAE,GAAES,KAAM,IAAGD,MAAO,gBAApB,CAJR,CAAN;AAOA,cAAM1C,OAAO,CACV4C,MADG,GAEJ;AAFI,SAGHb,EAHG,CAGA,QAHA,EAGWS,MAAD,IAAYN,UAAU,CAAE,WAAUM,MAAO,EAAnB,CAHhC,CAAN;AAKA,cAAMxC,OAAO,CACVkB,IADG,GAEJ;AAFI,SAGHa,EAHG,CAGA,iBAHA,EAGoBE,MAAD,IAAYC,UAAU,CAAE,YAAWD,MAAO,EAApB,CAHzC,CAAN;AAKA,aAAKlB,GAAL,CAAU,aAAYE,MAAO,OAA7B;AACD,OAjCD;AAkCD,KA/JkB;;AAAA,SAiKnBf,QAjKmB,GAiKR,YAAY;AACrB,WAAKhB,QAAL,CAAc,EAAd,EADqB,CACF;;AAEnB,YAAM;AAAEC,QAAAA,IAAF;AAAQ6B,QAAAA,KAAR;AAAenB,QAAAA;AAAf,UAA2B,KAAKE,KAAtC;AAEA,YAAM8C,SAAS,GAAGC,MAAM,CAAC,sBAAD,CAAxB;AACA,YAAM7B,MAAM,GAAGpB,OAAf;AACA,YAAMkD,cAAc,GAAG,MAAM/B,KAAK,CAAC+B,cAAN,CAAqB;AAChD;AACA3B,QAAAA,KAAK,EAAE,KAFyC;AAGhDE,QAAAA,EAAE,EAAEnD,OAAO,GAAG6E,OAAV,CAAkBH,SAAlB,CAH4C;AAIhDxB,QAAAA,IAAI,EAAEjD,QAAQ,CAACe,IAAI,CAACC,eAAN,CAAR,CAA+BoB,QAA/B,CAAyCyC,UAAD,KAAiB;AAC7D1B,UAAAA,MAAM,EAAEhD,eADqD;AAG7DiD,UAAAA,UAAU,EAAE,UAHiD;AAK7DC,UAAAA,cAAc,EAAE,CACd;AACEE,YAAAA,IAAI,EAAE,OADR;AAEED,YAAAA,IAAI,EAAE,MAFR;AAGEE,YAAAA,KAAK,EAAEC,MAAM,CAACR,IAAP,CAAa,eAAcJ,MAAO,MAAlC;AAHT,WADc,EAMd;AACEU,YAAAA,IAAI,EAAE,OADR;AAEED,YAAAA,IAAI,EAAE,KAFR;AAGEE,YAAAA,KAAK,EAAEqB;AAHT,WANc,EAWd;AACEtB,YAAAA,IAAI,EAAE,SADR;AAEED,YAAAA,IAAI,EAAE,SAFR;AAGEE,YAAAA,KAAK,EAAE1D,KAAK,CAACkE,KAAN,CAAYc,cAAZ,CAA2BjC,MAA3B,EAAmC,CAAnC;AAHT,WAXc;AAL6C,SAAjB,CAAxC;AAJ0C,OAArB,CAA7B;AA6BA,UAAIkC,aAAa,GAAG,CAApB;AACA,YAAMJ,cAAc,CACjBK,IADG,GAEJ;AAFI,OAGHrB,EAHG,CAGA,cAHA,EAGiBY,KAAD,IAAW;AAC7BQ,QAAAA,aAAa,GAAGR,KAAhB;AACD,OALG,EAMJ;AANI,OAOHZ,EAPG,CAOA,iBAPA,EAOoBE,MAAD,IACrB,KAAKlB,GAAL,CAAU,yBAAwBD,MAAM,CAACmB,MAAD,CAAS,iBAAjD,CARE,CAAN;AAWA,YAAMc,cAAc,CACjBM,OADG,GAEJ;AAFI,OAGHtB,EAHG,CAGA,QAHA,EAGWS,MAAD,IACZA,MAAM,KAAK,YAAX,GACI,KAAKzB,GAAL,CAAU,GAAEyB,MAAO,KAAIW,aAAc,MAArC,CADJ,GAEI,KAAKpC,GAAL,CAASyB,MAAT,CANF,EAQJ;AARI,OASHT,EATG,CASA,QATA,EASWC,IAAD,IAAU,KAAKjB,GAAL,CAAU,eAAciB,IAAK,EAA7B,CATpB,CAAN;AAWA,WAAKjB,GAAL,CAAU,YAAWE,MAAO,WAAU4B,SAAU,GAAhD;AACD,KA7NkB;;AAEjB,SAAK9C,KAAL,GAAa;AACXF,MAAAA,OAAO,EAAE,CADE;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXb,MAAAA,KAAK,EAAE,EAHI;AAIX+B,MAAAA,KAAK,EAAE,IAAI9C,KAAJ,CAAU,SAAV,EAAqB;AAAEoF,QAAAA,sBAAsB,EAAE;AAA1B,OAArB;AAJI,KAAb;AAMD;;AAT+B;;AAiOlC,eAAe9E,GAAf","sourcesContent":["import React from \"react\";\nimport RenJS from \"@renproject/ren\";\nimport { Bitcoin, Ethereum } from \"@renproject/chains\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\nimport ABI from \"./ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0xb9b0442DE9BC214a23B434Ee2Ec7AF8A4e1b3eeE\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\", { useV2TransactionFormat: true }),\n    };\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  };\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} RenBTC</p>\n        <p>\n          <button onClick={() => this.deposit().catch(this.logError)}>\n            Deposit 0.0005 BTC\n          </button>\n        </p>\n        <p>\n          <button onClick={() => this.withdraw().catch(this.logError)}>\n            Withdraw {balance} RenBTC\n          </button>\n        </p>\n        {message.split(\"\\n\").map((line) => (\n          <p>{line}</p>\n        ))}\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  };\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  };\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  };\n\n  log = (message) => {\n    this.setState({ message });\n  };\n\n  deposit = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS } = this.state;\n\n    this.log(`Generating deposit address...`);\n\n    const amount = 0.0005; // BTC\n    const mint = await renJS.lockAndMint({\n      // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n      asset: \"BTC\",\n      from: Bitcoin(),\n      to: Ethereum(web3.currentProvider).Contract({\n        // The contract we want to interact with\n        sendTo: contractAddress,\n\n        // The name of the function we want to call\n        contractFn: \"deposit\",\n\n        // Arguments expected for calling `deposit`\n        contractParams: [\n          {\n            name: \"_msg\",\n            type: \"bytes\",\n            value: Buffer.from(`Depositing ${amount} BTC`),\n          },\n        ],\n      }),\n    });\n\n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n\n    mint.on(\"deposit\", async (deposit) => {\n      // Details of the deposit are available from `deposit.depositDetails`.\n\n      const hash = deposit.txHash();\n      const depositLog = (msg) =>\n        this.log(\n          `BTC deposit: ${Bitcoin.utils.transactionExplorerLink(\n            deposit.depositDetails.transaction,\n            \"testnet\"\n          )}\\n\n          RenVM Hash: ${hash}\\n\n          Status: ${deposit.status}\\n\n          ${msg}`\n        );\n\n      await deposit\n        .confirmed()\n        .on(\"target\", (target) => depositLog(`0/${target} confirmations`))\n        .on(\"confirmation\", (confs, target) =>\n          depositLog(`${confs}/${target} confirmations`)\n        );\n\n      await deposit\n        .signed()\n        // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n        .on(\"status\", (status) => depositLog(`Status: ${status}`));\n\n      await deposit\n        .mint()\n        // Print Ethereum transaction hash.\n        .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n\n      this.log(`Deposited ${amount} BTC.`);\n    });\n  };\n\n  withdraw = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS, balance } = this.state;\n\n    const recipient = prompt(\"Enter BTC recipient:\");\n    const amount = balance;\n    const burnAndRelease = await renJS.burnAndRelease({\n      // Send BTC from Ethereum back to the Bitcoin blockchain.\n      asset: \"BTC\",\n      to: Bitcoin().Address(recipient),\n      from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n        sendTo: contractAddress,\n\n        contractFn: \"withdraw\",\n\n        contractParams: [\n          {\n            type: \"bytes\",\n            name: \"_msg\",\n            value: Buffer.from(`Withdrawing ${amount} BTC`),\n          },\n          {\n            type: \"bytes\",\n            name: \"_to\",\n            value: btcAddress,\n          },\n          {\n            type: \"uint256\",\n            name: \"_amount\",\n            value: RenJS.utils.toSmallestUnit(amount, 8),\n          },\n        ],\n      })),\n    });\n\n    let confirmations = 0;\n    await burnAndRelease\n      .burn()\n      // Ethereum transaction confirmations.\n      .on(\"confirmation\", (confs) => {\n        confirmations = confs;\n      })\n      // Print Ethereum transaction hash.\n      .on(\"transactionHash\", (txHash) =>\n        this.log(`Ethereum transaction: ${String(txHash)}\\nSubmitting...`)\n      );\n\n    await burnAndRelease\n      .release()\n      // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n      .on(\"status\", (status) =>\n        status === \"confirming\"\n          ? this.log(`${status} (${confirmations}/15)`)\n          : this.log(status)\n      )\n      // Print RenVM transaction hash\n      .on(\"txHash\", (hash) => this.log(`RenVM hash: ${hash}`));\n\n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}