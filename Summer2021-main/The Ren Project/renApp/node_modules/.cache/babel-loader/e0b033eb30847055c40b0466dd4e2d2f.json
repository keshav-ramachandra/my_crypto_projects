{"ast":null,"code":"import { fromBase64 } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\";\nexport var PackPrimitive;\n\n(function (PackPrimitive) {\n  PackPrimitive[\"Bool\"] = \"bool\";\n  PackPrimitive[\"U8\"] = \"u8\";\n  PackPrimitive[\"U16\"] = \"u16\";\n  PackPrimitive[\"U32\"] = \"u32\";\n  PackPrimitive[\"U64\"] = \"u64\";\n  PackPrimitive[\"U128\"] = \"u128\";\n  PackPrimitive[\"U256\"] = \"u256\";\n  PackPrimitive[\"Str\"] = \"string\";\n  PackPrimitive[\"Bytes\"] = \"bytes\";\n  PackPrimitive[\"Bytes32\"] = \"bytes32\";\n  PackPrimitive[\"Bytes65\"] = \"bytes65\";\n})(PackPrimitive || (PackPrimitive = {})); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport const unmarshalPackPrimitive = (type, value) => {\n  switch (type) {\n    // Booleans\n    case PackPrimitive.Bool:\n      return value;\n    // Integers\n\n    case PackPrimitive.U8:\n    case PackPrimitive.U16:\n    case PackPrimitive.U32:\n    case PackPrimitive.U64:\n    case PackPrimitive.U128:\n    case PackPrimitive.U256:\n      return new BigNumber(value);\n    // Strings\n\n    case PackPrimitive.Str:\n      return value;\n    // Bytes\n\n    case PackPrimitive.Bytes:\n    case PackPrimitive.Bytes32:\n    case PackPrimitive.Bytes65:\n      return fromBase64(value);\n  }\n};\nexport const unmarshalPackStruct = (type, value) => {\n  const struct = {};\n\n  for (const member of type.struct) {\n    const keys = Object.keys(member);\n\n    if (keys.length === 0) {\n      throw new Error(`Invalid struct member with no entries.`);\n    }\n\n    if (keys.length > 1) {\n      throw new Error(`Invalid struct member with multiple entries.`);\n    }\n\n    const key = Object.keys(member)[0];\n    const memberType = member[key];\n\n    if (value && !value.hasOwnProperty(key)) {\n      throw new Error(`Missing pack value for key ${key}.`);\n    }\n\n    struct[key] = unmarshalPackValue(memberType, value[key]);\n  }\n\n  return struct;\n};\n/**\n * Unmarshals a pack array.\n */\n\nexport const unmarshalPackArray = (type, value) => {\n  return value.map(element => unmarshalPackValue(type.list, element));\n};\nexport const unmarshalPackValue = (type, value) => {\n  if (Array.isArray(value)) {\n    return unmarshalPackArray(type, value);\n  } else if (typeof type === \"object\") {\n    return unmarshalPackStruct(type, value);\n  } else if (typeof type === \"string\") {\n    if (type === \"nil\") return null;\n    return unmarshalPackPrimitive(type, value);\n  }\n\n  throw new Error(`Unknown value type ${String(type)}${!type ? ` for value ${String(value)}` : \"\"}.`);\n};\nexport const unmarshalTypedPackValue = ({\n  t,\n  v\n}) => {\n  return unmarshalPackValue(t, v);\n};","map":{"version":3,"sources":["../../../../src/v2/pack/pack.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,mBAA3B;AACA,OAAO,SAAP,MAAsB,cAAtB;AAEA,OAAA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;AACrB,EAAA,aAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,aAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,aAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,aAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,aAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,aAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,aAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,aAAA,CAAA,KAAA,CAAA,GAAA,QAAA;AACA,EAAA,aAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACH,CAZD,EAAY,aAAa,KAAb,aAAa,GAAA,EAAA,CAAzB,E,CAyGA;;;AACA,OAAO,MAAM,sBAAsB,GAAG,CAAC,IAAD,EAAsB,KAAtB,KAAoC;AACtE,UAAQ,IAAR;AACI;AACA,SAAK,aAAa,CAAC,IAAnB;AACI,aAAO,KAAP;AACJ;;AACA,SAAK,aAAa,CAAC,EAAnB;AACA,SAAK,aAAa,CAAC,GAAnB;AACA,SAAK,aAAa,CAAC,GAAnB;AACA,SAAK,aAAa,CAAC,GAAnB;AACA,SAAK,aAAa,CAAC,IAAnB;AACA,SAAK,aAAa,CAAC,IAAnB;AACI,aAAO,IAAI,SAAJ,CAAc,KAAd,CAAP;AACJ;;AACA,SAAK,aAAa,CAAC,GAAnB;AACI,aAAO,KAAP;AACJ;;AACA,SAAK,aAAa,CAAC,KAAnB;AACA,SAAK,aAAa,CAAC,OAAnB;AACA,SAAK,aAAa,CAAC,OAAnB;AACI,aAAO,UAAU,CAAC,KAAD,CAAjB;AAnBR;AAqBH,CAtBM;AAwBP,OAAO,MAAM,mBAAmB,GAAG,CAAC,IAAD,EAAuB,KAAvB,KAAwC;AACvE,QAAM,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAM,MAAX,IAAqB,IAAI,CAAC,MAA1B,EAAkC;AAC9B,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAb;;AACA,QAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACnB,YAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,QAAI,IAAI,CAAC,MAAL,GAAc,CAAlB,EAAqB;AACjB,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,UAAM,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,CAApB,CAAZ;AACA,UAAM,UAAU,GAAG,MAAM,CAAC,GAAD,CAAzB;;AAEA,QAAI,KAAK,IAAI,CAAC,KAAK,CAAC,cAAN,CAAqB,GAArB,CAAd,EAAyC;AACrC,YAAM,IAAI,KAAJ,CAAU,8BAA8B,GAAG,GAA3C,CAAN;AACH;;AAED,IAAA,MAAM,CAAC,GAAD,CAAN,GAAc,kBAAkB,CAAC,UAAD,EAAa,KAAK,CAAC,GAAD,CAAlB,CAAhC;AACH;;AAED,SAAO,MAAP;AACH,CAtBM;AAwBP;;AAEG;;AACH,OAAO,MAAM,kBAAkB,GAAG,CAC9B,IAD8B,EAE9B,KAF8B,KAGlB;AACZ,SAAO,KAAK,CAAC,GAAN,CAAW,OAAD,IAAa,kBAAkB,CAAC,IAAI,CAAC,IAAN,EAAY,OAAZ,CAAzC,CAAP;AACH,CALM;AAOP,OAAO,MAAM,kBAAkB,GAAG,CAC9B,IAD8B,EAE9B,KAF8B,KAG9B;AACA,MAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACtB,WAAO,kBAAkB,CAAC,IAAD,EAA+B,KAA/B,CAAzB;AACH,GAFD,MAEO,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AACjC,WAAO,mBAAmB,CAAC,IAAD,EAAO,KAAP,CAA1B;AACH,GAFM,MAEA,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AACjC,QAAI,IAAI,KAAK,KAAb,EAAoB,OAAO,IAAP;AACpB,WAAO,sBAAsB,CAAC,IAAD,EAAO,KAAP,CAA7B;AACH;;AACD,QAAM,IAAI,KAAJ,CACF,sBAAsB,MAAM,CAAC,IAAD,CAAM,GAC9B,CAAC,IAAD,GAAQ,cAAc,MAAM,CAAC,KAAD,CAAO,EAAnC,GAAwC,EAC5C,GAHE,CAAN;AAKH,CAjBM;AAmBP,OAAO,MAAM,uBAAuB,GAAG,CAAC;AAAE,EAAA,CAAF;AAAK,EAAA;AAAL,CAAD,KAA6B;AAChE,SAAO,kBAAkB,CAAC,CAAD,EAAI,CAAJ,CAAzB;AACH,CAFM","sourceRoot":"","sourcesContent":["import { fromBase64 } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\";\nexport var PackPrimitive;\n(function (PackPrimitive) {\n    PackPrimitive[\"Bool\"] = \"bool\";\n    PackPrimitive[\"U8\"] = \"u8\";\n    PackPrimitive[\"U16\"] = \"u16\";\n    PackPrimitive[\"U32\"] = \"u32\";\n    PackPrimitive[\"U64\"] = \"u64\";\n    PackPrimitive[\"U128\"] = \"u128\";\n    PackPrimitive[\"U256\"] = \"u256\";\n    PackPrimitive[\"Str\"] = \"string\";\n    PackPrimitive[\"Bytes\"] = \"bytes\";\n    PackPrimitive[\"Bytes32\"] = \"bytes32\";\n    PackPrimitive[\"Bytes65\"] = \"bytes65\";\n})(PackPrimitive || (PackPrimitive = {}));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const unmarshalPackPrimitive = (type, value) => {\n    switch (type) {\n        // Booleans\n        case PackPrimitive.Bool:\n            return value;\n        // Integers\n        case PackPrimitive.U8:\n        case PackPrimitive.U16:\n        case PackPrimitive.U32:\n        case PackPrimitive.U64:\n        case PackPrimitive.U128:\n        case PackPrimitive.U256:\n            return new BigNumber(value);\n        // Strings\n        case PackPrimitive.Str:\n            return value;\n        // Bytes\n        case PackPrimitive.Bytes:\n        case PackPrimitive.Bytes32:\n        case PackPrimitive.Bytes65:\n            return fromBase64(value);\n    }\n};\nexport const unmarshalPackStruct = (type, value) => {\n    const struct = {};\n    for (const member of type.struct) {\n        const keys = Object.keys(member);\n        if (keys.length === 0) {\n            throw new Error(`Invalid struct member with no entries.`);\n        }\n        if (keys.length > 1) {\n            throw new Error(`Invalid struct member with multiple entries.`);\n        }\n        const key = Object.keys(member)[0];\n        const memberType = member[key];\n        if (value && !value.hasOwnProperty(key)) {\n            throw new Error(`Missing pack value for key ${key}.`);\n        }\n        struct[key] = unmarshalPackValue(memberType, value[key]);\n    }\n    return struct;\n};\n/**\n * Unmarshals a pack array.\n */\nexport const unmarshalPackArray = (type, value) => {\n    return value.map((element) => unmarshalPackValue(type.list, element));\n};\nexport const unmarshalPackValue = (type, value) => {\n    if (Array.isArray(value)) {\n        return unmarshalPackArray(type, value);\n    }\n    else if (typeof type === \"object\") {\n        return unmarshalPackStruct(type, value);\n    }\n    else if (typeof type === \"string\") {\n        if (type === \"nil\")\n            return null;\n        return unmarshalPackPrimitive(type, value);\n    }\n    throw new Error(`Unknown value type ${String(type)}${!type ? ` for value ${String(value)}` : \"\"}.`);\n};\nexport const unmarshalTypedPackValue = ({ t, v }) => {\n    return unmarshalPackValue(t, v);\n};\n//# sourceMappingURL=pack.js.map"]},"metadata":{},"sourceType":"module"}