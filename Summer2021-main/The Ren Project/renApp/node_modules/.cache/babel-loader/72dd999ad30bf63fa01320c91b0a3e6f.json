{"ast":null,"code":"'use strict';\n/* jshint maxparams:5 */\n\nvar _ = require('lodash');\n\nvar inherits = require('inherits');\n\nvar Input = require('./input');\n\nvar Output = require('../output');\n\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\n\nvar Signature = require('../../crypto/signature');\n\nvar Sighash = require('../sighash');\n\nvar SighashWitness = require('../sighashwitness');\n\nvar BufferWriter = require('../../encoding/bufferwriter');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar TransactionSignature = require('../signature');\n/**\n * @constructor\n */\n\n\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures, nestedWitness, opts) {\n  /* jshint maxstatements:20 */\n  opts = opts || {};\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.nestedWitness = nestedWitness ? true : false;\n\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys;\n  } else {\n    this.publicKeys = _.sortBy(pubkeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold);\n\n  if (this.nestedWitness) {\n    var nested = Script.buildWitnessMultisigOutFromScript(this.redeemScript);\n    $.checkState(Script.buildScriptHashOut(nested).equals(this.output.script), 'Provided public keys don\\'t hash to the provided output (nested witness)');\n    var scriptSig = new Script();\n    scriptSig.add(nested.toBuffer());\n    this.setScript(scriptSig);\n  } else {\n    $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script), 'Provided public keys don\\'t hash to the provided output');\n  }\n\n  this.publicKeyIndex = {};\n\n  _.each(this.publicKeys, function (publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n\n  this.threshold = threshold; // Empty array of signatures\n\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\n\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function () {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function (publicKey) {\n    return publicKey.toString();\n  });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function (signatures) {\n  return _.map(signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function () {\n  return _.map(this.signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getScriptCode = function () {\n  var writer = new BufferWriter();\n\n  if (!this.redeemScript.hasCodeseparators()) {\n    var redeemScriptBuffer = this.redeemScript.toBuffer();\n    writer.writeVarintNum(redeemScriptBuffer.length);\n    writer.write(redeemScriptBuffer);\n  } else {\n    throw new Error('@TODO');\n  }\n\n  return writer.toBuffer();\n};\n\nMultiSigScriptHashInput.prototype.getSighash = function (transaction, privateKey, index, sigtype) {\n  var self = this;\n  var hash;\n\n  if (self.nestedWitness) {\n    var scriptCode = self.getScriptCode();\n    var satoshisBuffer = self.getSatoshisBuffer();\n    hash = SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n  } else {\n    hash = Sighash.sighash(transaction, sigtype, index, self.redeemScript);\n  }\n\n  return hash;\n};\n\nMultiSigScriptHashInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var self = this;\n  var results = [];\n\n  _.each(this.publicKeys, function (publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      var signature;\n\n      if (self.nestedWitness) {\n        var scriptCode = self.getScriptCode();\n        var satoshisBuffer = self.getSatoshisBuffer();\n        signature = SighashWitness.sign(transaction, privateKey, sigtype, index, scriptCode, satoshisBuffer);\n      } else {\n        signature = Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript);\n      }\n\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: signature,\n        sigtype: sigtype\n      }));\n    }\n  });\n\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function (transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), 'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n\n  this._updateScript();\n\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function () {\n  if (this.nestedWitness) {\n    var stack = [Buffer.alloc(0)];\n\n    var signatures = this._createSignatures();\n\n    for (var i = 0; i < signatures.length; i++) {\n      stack.push(signatures[i]);\n    }\n\n    stack.push(this.redeemScript.toBuffer());\n    this.setWitnesses(stack);\n  } else {\n    var scriptSig = Script.buildP2SHMultisigIn(this.publicKeys, this.threshold, this._createSignatures(), {\n      cachedMultisig: this.redeemScript\n    });\n    this.setScript(scriptSig);\n  }\n\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function () {\n  return _.map(_.filter(this.signatures, function (signature) {\n    return !_.isUndefined(signature);\n  }), function (signature) {\n    return BufferUtil.concat([signature.signature.toDER(), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function () {\n  this.signatures = new Array(this.publicKeys.length);\n\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function () {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function () {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function () {\n  return _.reduce(this.signatures, function (sum, signature) {\n    return sum + !!signature;\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function () {\n  var self = this;\n  return _.filter(this.publicKeys, function (publicKey) {\n    return !self.signatures[self.publicKeyIndex[publicKey.toString()]];\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function (transaction, signature) {\n  if (this.nestedWitness) {\n    signature.signature.nhashtype = signature.sigtype;\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    return SighashWitness.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, scriptCode, satoshisBuffer);\n  } else {\n    // FIXME: Refactor signature so this is not necessary\n    signature.signature.nhashtype = signature.sigtype;\n    return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.redeemScript);\n  }\n};\n\nMultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG\n\nMultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\n\nMultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)\n\nMultiSigScriptHashInput.prototype._estimateSize = function () {\n  return MultiSigScriptHashInput.OPCODES_SIZE + this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE + this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;\n};\n\nmodule.exports = MultiSigScriptHashInput;","map":{"version":3,"sources":["/home/kesha/Downloads/ren-main/renApp/node_modules/@CoinSpace/bitcore-lib-dogecoin/lib/transaction/input/multisigscripthash.js"],"names":["_","require","inherits","Input","Output","$","Script","Signature","Sighash","SighashWitness","BufferWriter","BufferUtil","TransactionSignature","MultiSigScriptHashInput","input","pubkeys","threshold","signatures","nestedWitness","opts","apply","arguments","self","publicKeys","noSorting","sortBy","publicKey","toString","redeemScript","buildMultisigOut","nested","buildWitnessMultisigOutFromScript","checkState","buildScriptHashOut","equals","output","script","scriptSig","add","toBuffer","setScript","publicKeyIndex","each","index","_deserializeSignatures","Array","length","prototype","toObject","obj","map","_serializeSignatures","signature","undefined","getScriptCode","writer","hasCodeseparators","redeemScriptBuffer","writeVarintNum","write","Error","getSighash","transaction","privateKey","sigtype","hash","scriptCode","satoshisBuffer","getSatoshisBuffer","sighash","getSignatures","SIGHASH_ALL","results","sign","push","prevTxId","outputIndex","inputIndex","addSignature","isFullySigned","checkArgument","isUndefined","isValidSignature","_updateScript","stack","Buffer","alloc","_createSignatures","i","setWitnesses","buildP2SHMultisigIn","cachedMultisig","filter","concat","toDER","integerAsSingleByteBuffer","clearSignatures","countSignatures","countMissingSignatures","reduce","sum","publicKeysWithoutSignature","nhashtype","verify","OPCODES_SIZE","SIGNATURE_SIZE","PUBKEY_SIZE","_estimateSize","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint maxparams:5 */\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar SighashWitness = require('../sighashwitness');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\n * @constructor\n */\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures, nestedWitness, opts) {\n  /* jshint maxstatements:20 */\n  opts = opts || {};\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.nestedWitness = nestedWitness ? true : false;\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys\n  } else  {\n    this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  }\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold);\n  if (this.nestedWitness) {\n    var nested = Script.buildWitnessMultisigOutFromScript(this.redeemScript);\n    $.checkState(Script.buildScriptHashOut(nested).equals(this.output.script),\n                 'Provided public keys don\\'t hash to the provided output (nested witness)');\n    var scriptSig = new Script();\n    scriptSig.add(nested.toBuffer());\n    this.setScript(scriptSig);\n  } else {\n    $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script),\n               'Provided public keys don\\'t hash to the provided output');\n  }\n\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function(publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function(signatures) {\n  return _.map(signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function() {\n  return _.map(this.signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getScriptCode = function() {\n  var writer = new BufferWriter();\n  if (!this.redeemScript.hasCodeseparators()) {\n    var redeemScriptBuffer = this.redeemScript.toBuffer();\n    writer.writeVarintNum(redeemScriptBuffer.length);\n    writer.write(redeemScriptBuffer);\n  } else {\n    throw new Error('@TODO');\n  }\n  return writer.toBuffer();\n};\n\nMultiSigScriptHashInput.prototype.getSighash = function(transaction, privateKey, index, sigtype) {\n  var self = this;\n  var hash;\n  if (self.nestedWitness) {\n    var scriptCode = self.getScriptCode();\n    var satoshisBuffer = self.getSatoshisBuffer();\n    hash = SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n  } else  {\n    hash = Sighash.sighash(transaction, sigtype, index, self.redeemScript);\n  }\n  return hash;\n};\n\nMultiSigScriptHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function(publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      var signature;\n      if (self.nestedWitness) {\n        var scriptCode = self.getScriptCode();\n        var satoshisBuffer = self.getSatoshisBuffer();\n        signature = SighashWitness.sign(transaction, privateKey, sigtype, index, scriptCode, satoshisBuffer);\n      } else  {\n        signature = Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript);\n      }\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: signature,\n        sigtype: sigtype\n      }));\n    }\n  });\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function(transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]),\n                  'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function() {\n  if (this.nestedWitness) {\n    var stack = [\n      Buffer.alloc(0),\n    ];\n    var signatures = this._createSignatures();\n    for (var i = 0; i < signatures.length; i++) {\n      stack.push(signatures[i]);\n    }\n    stack.push(this.redeemScript.toBuffer());\n    this.setWitnesses(stack);\n  } else {\n    var scriptSig = Script.buildP2SHMultisigIn(\n      this.publicKeys,\n      this.threshold,\n      this._createSignatures(),\n      { cachedMultisig: this.redeemScript }\n    );\n    this.setScript(scriptSig);\n  }\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function() {\n  return _.map(\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\n    function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    }\n  );\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function() {\n  return _.reduce(this.signatures, function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function() {\n  var self = this;\n  return _.filter(this.publicKeys, function(publicKey) {\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signature) {\n  if (this.nestedWitness) {\n    signature.signature.nhashtype = signature.sigtype;\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    return SighashWitness.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      scriptCode,\n      satoshisBuffer\n    );\n  } else {\n    // FIXME: Refactor signature so this is not necessary\n    signature.signature.nhashtype = signature.sigtype;\n    return Sighash.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      this.redeemScript\n    );\n  }\n};\n\nMultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG\nMultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\nMultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)\n\nMultiSigScriptHashInput.prototype._estimateSize = function() {\n  return MultiSigScriptHashInput.OPCODES_SIZE +\n    this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE +\n    this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;\n};\n\nmodule.exports = MultiSigScriptHashInput;\n"]},"metadata":{},"sourceType":"script"}