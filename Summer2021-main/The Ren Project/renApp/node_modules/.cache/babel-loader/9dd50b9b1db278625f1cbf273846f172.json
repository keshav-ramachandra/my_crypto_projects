{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { SECONDS } from \"@renproject/utils\";\nimport Axios from \"axios\";\nimport { TerraNetwork } from \"./deposit\";\nimport { getHeight } from \"./height\";\n\nconst TERRA_DEV_URL = network => {\n  let prefix;\n\n  switch (network) {\n    case TerraNetwork.Columbus:\n      prefix = \"fcd\";\n      break;\n\n    case TerraNetwork.Tequila:\n      prefix = \"tequila-fcd\";\n      break;\n\n    default:\n      throw new Error(`Terra network ${String(network)} not supported.`);\n  }\n\n  return `https://${String(prefix)}.terra.dev/v1`;\n};\n\nconst extractDepositsFromTx = chainHeight => tx => {\n  const msgs = [];\n\n  try {\n    const decodedMsgs = tx.tx.value.msg;\n\n    for (let i = 0; i < decodedMsgs.length; i++) {\n      const msg = decodedMsgs[i];\n\n      if (msg.type === \"bank/MsgSend\") {\n        for (const amount of msg.value.amount) {\n          msgs.push(Object.assign(Object.assign(Object.assign({}, tx), {\n            messageIndex: i,\n            to_address: msg.value.to_address,\n            from_address: msg.value.from_address\n          }), amount));\n        }\n      }\n    }\n  } catch (_error) {\n    return [];\n  }\n\n  return msgs.map(msg => {\n    return {\n      hash: msg.txhash,\n      messageIndex: msg.messageIndex,\n      from: msg.from_address,\n      to: msg.to_address,\n      denomination: msg.denom,\n      amount: msg.amount,\n      memo: msg.tx.value.memo,\n      confirmations: msg.height ? chainHeight - parseInt(msg.height, 10) : msg.height\n    };\n  });\n};\n\nconst concat = (x, y) => x.concat(y);\n\nconst fetchDeposits = (address, network, memo = undefined) => __awaiter(void 0, void 0, void 0, function* () {\n  // const paramsFilterBase64 = paramsFilter && paramsFilter.toString(\"base64\");\n  // const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&page=${\n  //     page + 1\n  // }&chainId=${network}`;\n  const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&chainId=${network}`;\n  const response = (yield Axios.get(url, {\n    timeout: 60 * SECONDS\n  })).data;\n  const {\n    txs\n  } = response;\n  const filteredTxs = !memo ? txs : txs.filter(message => message.tx && message.tx.value && message.tx.value.memo === memo); // Create an entry for each message. Transactions can contain multiple\n  // messages.\n  // Fetch current height of the chain. Skip if no messages were found.\n\n  const chainHeight = filteredTxs.length > 0 ? yield getHeight(network) : 0;\n  return filteredTxs.map(extractDepositsFromTx(chainHeight)).reduce(concat, []).filter(msg => msg.to === address);\n});\n\nconst fetchDeposit = (hash, messageIndex, network) => __awaiter(void 0, void 0, void 0, function* () {\n  // const paramsFilterBase64 = paramsFilter && paramsFilter.toString(\"base64\");\n  const url = `${TERRA_DEV_URL(network)}/tx/${hash}`;\n  const tx = (yield Axios.get(url, {\n    timeout: 60 * SECONDS\n  })).data;\n\n  if (tx === null) {\n    throw new Error(`Unable to find Terra transaction ${hash}.`);\n  } // Create an entry for each message. Transactions can contain multiple\n  // messages.\n  // Fetch current height of the chain. Skip if no messages were found.\n\n\n  const chainHeight = yield getHeight(network);\n  return extractDepositsFromTx(chainHeight)(tx)[messageIndex];\n});\n\nexport const terraDev = {\n  fetchDeposits,\n  fetchDeposit\n};","map":{"version":3,"sources":["../../../src/api/terraDev.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SECONDS } from \"@renproject/utils\";\nimport Axios from \"axios\";\nimport { TerraNetwork } from \"./deposit\";\nimport { getHeight } from \"./height\";\nconst TERRA_DEV_URL = (network) => {\n    let prefix;\n    switch (network) {\n        case TerraNetwork.Columbus:\n            prefix = \"fcd\";\n            break;\n        case TerraNetwork.Tequila:\n            prefix = \"tequila-fcd\";\n            break;\n        default:\n            throw new Error(`Terra network ${String(network)} not supported.`);\n    }\n    return `https://${String(prefix)}.terra.dev/v1`;\n};\nconst extractDepositsFromTx = (chainHeight) => (tx) => {\n    const msgs = [];\n    try {\n        const decodedMsgs = tx.tx.value.msg;\n        for (let i = 0; i < decodedMsgs.length; i++) {\n            const msg = decodedMsgs[i];\n            if (msg.type === \"bank/MsgSend\") {\n                for (const amount of msg.value.amount) {\n                    msgs.push(Object.assign(Object.assign(Object.assign({}, tx), { messageIndex: i, to_address: msg.value.to_address, from_address: msg.value.from_address }), amount));\n                }\n            }\n        }\n    }\n    catch (_error) {\n        return [];\n    }\n    return msgs.map((msg) => {\n        return {\n            hash: msg.txhash,\n            messageIndex: msg.messageIndex,\n            from: msg.from_address,\n            to: msg.to_address,\n            denomination: msg.denom,\n            amount: msg.amount,\n            memo: msg.tx.value.memo,\n            confirmations: msg.height\n                ? chainHeight - parseInt(msg.height, 10)\n                : msg.height,\n        };\n    });\n};\nconst concat = (x, y) => x.concat(y);\nconst fetchDeposits = (address, network, memo = undefined) => __awaiter(void 0, void 0, void 0, function* () {\n    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString(\"base64\");\n    // const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&page=${\n    //     page + 1\n    // }&chainId=${network}`;\n    const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&chainId=${network}`;\n    const response = (yield Axios.get(url, {\n        timeout: 60 * SECONDS,\n    })).data;\n    const { txs } = response;\n    const filteredTxs = !memo\n        ? txs\n        : txs.filter((message) => message.tx &&\n            message.tx.value &&\n            message.tx.value.memo === memo);\n    // Create an entry for each message. Transactions can contain multiple\n    // messages.\n    // Fetch current height of the chain. Skip if no messages were found.\n    const chainHeight = filteredTxs.length > 0 ? yield getHeight(network) : 0;\n    return filteredTxs\n        .map(extractDepositsFromTx(chainHeight))\n        .reduce(concat, [])\n        .filter((msg) => msg.to === address);\n});\nconst fetchDeposit = (hash, messageIndex, network) => __awaiter(void 0, void 0, void 0, function* () {\n    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString(\"base64\");\n    const url = `${TERRA_DEV_URL(network)}/tx/${hash}`;\n    const tx = (yield Axios.get(url, {\n        timeout: 60 * SECONDS,\n    })).data;\n    if (tx === null) {\n        throw new Error(`Unable to find Terra transaction ${hash}.`);\n    }\n    // Create an entry for each message. Transactions can contain multiple\n    // messages.\n    // Fetch current height of the chain. Skip if no messages were found.\n    const chainHeight = yield getHeight(network);\n    return extractDepositsFromTx(chainHeight)(tx)[messageIndex];\n});\nexport const terraDev = {\n    fetchDeposits,\n    fetchDeposit,\n};\n//# sourceMappingURL=terraDev.js.map"]},"metadata":{},"sourceType":"module"}