{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { decode as decodeAddress, encode as encodeAddress, validateAddressString } from \"@glif/filecoin-address\";\nimport { getRenNetworkDetails } from \"@renproject/interfaces\";\nimport { assertType, Callable, SECONDS, sleep, toBase64, toURLBase64, utilsWithChainNetwork, isDefined, doesntError } from \"@renproject/utils\";\nimport { blake2b } from \"blakejs\";\nimport CID from \"cids\";\nimport elliptic from \"elliptic\";\nimport FilecoinClient from \"@glif/filecoin-rpc-client\";\nimport { fetchDeposits, fetchMessage } from \"./api/lotus\";\nimport { Filfox } from \"./api/explorers/filfox\";\nconst NETWORK_NOT_SUPPORTED = `Filecoin is not supported by the current RenVM network.`;\n\nconst transactionToDeposit = transaction => ({\n  transaction,\n  amount: transaction.amount.toString()\n});\n\nexport class FilecoinClass {\n  constructor(network, _a = {}) {\n    var {\n      useParams\n    } = _a,\n        options = __rest(_a, [\"useParams\"]);\n\n    this.chain = FilecoinClass.chain;\n    this.name = FilecoinClass.chain;\n    this.asset = \"FIL\";\n    this.utils = utilsWithChainNetwork(FilecoinClass.utils, () => this.chainNetwork);\n    /**\n     * See [[LockChain.initialize]].\n     */\n\n    this.initialize = renNetwork => {\n      this.renNetwork = getRenNetworkDetails(renNetwork); // Prioritize the network passed in to the constructor.\n\n      this.chainNetwork = this.chainNetwork || this.renNetwork.isTestnet ? \"testnet\" : \"mainnet\";\n      this.client = new FilecoinClient({\n        apiAddress: isDefined(this.clientOptions.apiAddress) ? this.clientOptions.apiAddress : `https://lotus-cors-proxy.herokuapp.com/${this.chainNetwork}`,\n        token: this.clientOptions.token\n      });\n\n      if (this.chainNetwork === \"mainnet\") {\n        this.filfox = new Filfox(this.chainNetwork);\n      }\n\n      return this;\n    };\n    /**\n     * See [[LockChain.assetIsNative]].\n     */\n\n\n    this.assetIsNative = asset => asset === this.asset;\n\n    this.assetIsSupported = this.assetIsNative;\n\n    this.assertAssetIsSupported = asset => {\n      if (!this.assetIsNative(asset)) {\n        throw new Error(`Asset ${asset} not supported on ${this.chain}.`);\n      }\n    };\n    /**\n     * See [[LockChain.assetDecimals]].\n     */\n\n\n    this.assetDecimals = asset => {\n      if (asset === this.asset) {\n        return 18;\n      }\n\n      throw new Error(`Asset ${asset} not supported on ${this.chain}.`);\n    };\n    /**\n     * See [[LockChain.getDeposits]].\n     */\n\n\n    this.getDeposits = (asset, address, progress, onDeposit) => __awaiter(this, void 0, void 0, function* () {\n      if (!this.chainNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      if (this.chainNetwork === \"devnet\") {\n        throw new Error(`Unable to fetch deposits on ${this.chainNetwork}.`);\n      }\n\n      this.assertAssetIsSupported(asset); // For the first time `getDeposits` is called, fetch transactions from\n      // explorer API. (mainnet only)\n\n      if (this.filfox && (!progress || progress === 0)) {\n        try {\n          const size = 100;\n          let page = 0;\n\n          while (true) {\n            const {\n              deposits,\n              totalCount\n            } = yield this.filfox.fetchDeposits(address.address, address.params, page, size);\n            yield Promise.all((deposits || []).map(tx => __awaiter(this, void 0, void 0, function* () {\n              return onDeposit(transactionToDeposit(tx));\n            })));\n\n            if (size * (page + 1) >= totalCount) {\n              break;\n            }\n\n            page += 1;\n            yield sleep(10 * SECONDS);\n          }\n        } catch (error) {// Ignore error.\n        }\n      }\n\n      let txs;\n      ({\n        txs,\n        progress\n      } = yield fetchDeposits(this.client, address.address, address.params, this.chainNetwork, progress || 0));\n      yield Promise.all((txs || []).map(tx => __awaiter(this, void 0, void 0, function* () {\n        return onDeposit(transactionToDeposit(tx));\n      })));\n      return progress;\n    });\n    /**\n     * See [[LockChain.transactionConfidence]].\n     */\n\n\n    this.transactionConfidence = transaction => __awaiter(this, void 0, void 0, function* () {\n      if (!this.chainNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      transaction = yield fetchMessage(this.client, transaction.cid, this.chainNetwork);\n      return {\n        current: transaction.confirmations,\n        target: this.chainNetwork === \"mainnet\" ? 12 : 6\n      };\n    });\n    /**\n     * See [[LockChain.getGatewayAddress]].\n     */\n\n\n    this.getGatewayAddress = (asset, compressedPublicKey, gHash) => {\n      if (!this.renNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      this.assertAssetIsSupported(asset);\n      const ec = new elliptic.ec(\"secp256k1\"); // Decode compressed RenVM public key.\n\n      const renVMPublicKey = ec.keyFromPublic(compressedPublicKey); // Interpret gHash as a private key.\n\n      const gHashKey = ec.keyFromPrivate(gHash); // If `NO_PARAMS_FLAG` is set, set renVM public key and gHash public key,\n      // and recreate key pair from resulting curve point.\n\n      const derivedPublicKey = this.noParamsFlag ? ec.keyFromPublic(renVMPublicKey.getPublic().add(gHashKey.getPublic())) : renVMPublicKey;\n      const payload = Buffer.from(blake2b(Buffer.from(derivedPublicKey.getPublic(false, \"hex\"), \"hex\"), null, 20)); // secp256k1 protocol prefix\n\n      const protocol = 1; // network prefix\n\n      const networkPrefix = this.chainNetwork === \"testnet\" ? \"t\" : \"f\";\n      const addressObject = {\n        str: Buffer.concat([Buffer.from([protocol]), payload]),\n        protocol: () => protocol,\n        payload: () => payload\n      };\n      const address = encodeAddress(networkPrefix, addressObject);\n      const params = this.noParamsFlag ? undefined : toBase64(Buffer.from(toURLBase64(gHash)));\n      return {\n        address,\n        params\n      };\n    };\n    /**\n     * See [[LockChain.addressToBytes]].\n     */\n\n\n    this.addressToBytes = address => Buffer.from(decodeAddress(typeof address === \"string\" ? address : address.address).str);\n    /** @deprecated. Renamed to addressToBytes. */\n\n\n    this.addressStringToBytes = this.addressToBytes;\n\n    this.addressToString = address => typeof address === \"string\" ? address : address.address;\n    /**\n     * See [[LockChain.transactionID]].\n     */\n\n\n    this.transactionID = transaction => transaction.cid;\n\n    this.transactionIDFromRPCFormat = (txid, _txindex) => typeof txid === \"string\" ? txid : new CID(txid).toString();\n\n    this.transactionFromRPCFormat = (txid, _txindex) => __awaiter(this, void 0, void 0, function* () {\n      if (!this.chainNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      return fetchMessage(this.client, typeof txid === \"string\" ? txid : new CID(txid).toString(), this.chainNetwork);\n    });\n    /**\n     * @deprecated Renamed to `transactionFromRPCFormat`.\n     * Will be removed in 3.0.0.\n     */\n\n\n    this.transactionFromID = this.transactionFromRPCFormat;\n\n    this.depositV1HashString = _deposit => {\n      throw new Error(NETWORK_NOT_SUPPORTED);\n    };\n\n    this.transactionRPCFormat = (transaction, v2) => {\n      if (!v2) {\n        throw new Error(NETWORK_NOT_SUPPORTED);\n      }\n\n      return {\n        txid: Buffer.from(new CID(transaction.cid).bytes),\n        txindex: transaction.nonce.toFixed()\n      };\n    };\n\n    this.transactionRPCTxidFromID = transactionID => Buffer.from(new CID(transactionID).bytes);\n    /** @category Main */\n\n\n    this.Address = address => {\n      // Type validation\n      assertType(\"string\", {\n        address\n      });\n\n      this.getBurnPayload = () => address;\n\n      return this;\n    };\n\n    this.burnPayload = () => {\n      return this.getBurnPayload ? this.getBurnPayload() : undefined;\n    };\n\n    this.chainNetwork = network;\n    this.clientOptions = options;\n    this.noParamsFlag = !useParams;\n  }\n\n}\nFilecoinClass.chain = \"Filecoin\";\nFilecoinClass.utils = {\n  resolveChainNetwork: network => {\n    if (network === \"mainnet\" || network === \"testnet\" || network === \"devnet\") {\n      return network;\n    }\n\n    const renNetwork = getRenNetworkDetails(network);\n    return renNetwork.isTestnet ? \"testnet\" : \"mainnet\";\n  },\n  addressIsValid: (address, _network = \"mainnet\") => validateAddressString(typeof address === \"string\" ? address : address.address),\n  transactionIsValid: doesntError((transaction, _network = \"mainnet\") => {\n    const transactionString = typeof transaction === \"string\" ? transaction : transaction.cid;\n    const cid = new CID(transactionString);\n    return transactionString === cid.toString() && cid.bytes.length === 38;\n  }),\n  addressExplorerLink: (address, _network = \"mainnet\") => {\n    // TODO: Check network.\n    return `https://filfox.info/en/address/${typeof address === \"string\" ? address : address.address}`;\n  },\n  transactionExplorerLink: (transaction, _network = \"mainnet\") => {\n    // TODO: Check network.\n    return `https://filfox.info/en/message/${typeof transaction === \"string\" ? transaction : transaction.cid}`;\n  }\n}; // @dev Removes any static fields, except `utils`.\n\nexport const Filecoin = Callable(FilecoinClass);\nconst _ = Filecoin;\n\nconst __ = Filecoin();","map":{"version":3,"sources":["../../src/filecoin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { decode as decodeAddress, encode as encodeAddress, validateAddressString, } from \"@glif/filecoin-address\";\nimport { getRenNetworkDetails, } from \"@renproject/interfaces\";\nimport { assertType, Callable, SECONDS, sleep, toBase64, toURLBase64, utilsWithChainNetwork, isDefined, doesntError, } from \"@renproject/utils\";\nimport { blake2b } from \"blakejs\";\nimport CID from \"cids\";\nimport elliptic from \"elliptic\";\nimport FilecoinClient from \"@glif/filecoin-rpc-client\";\nimport { fetchDeposits, fetchMessage } from \"./api/lotus\";\nimport { Filfox } from \"./api/explorers/filfox\";\nconst NETWORK_NOT_SUPPORTED = `Filecoin is not supported by the current RenVM network.`;\nconst transactionToDeposit = (transaction) => ({\n    transaction,\n    amount: transaction.amount.toString(),\n});\nexport class FilecoinClass {\n    constructor(network, _a = {}) {\n        var { useParams } = _a, options = __rest(_a, [\"useParams\"]);\n        this.chain = FilecoinClass.chain;\n        this.name = FilecoinClass.chain;\n        this.asset = \"FIL\";\n        this.utils = utilsWithChainNetwork(FilecoinClass.utils, () => this.chainNetwork);\n        /**\n         * See [[LockChain.initialize]].\n         */\n        this.initialize = (renNetwork) => {\n            this.renNetwork = getRenNetworkDetails(renNetwork);\n            // Prioritize the network passed in to the constructor.\n            this.chainNetwork =\n                this.chainNetwork || this.renNetwork.isTestnet\n                    ? \"testnet\"\n                    : \"mainnet\";\n            this.client = new FilecoinClient({\n                apiAddress: isDefined(this.clientOptions.apiAddress)\n                    ? this.clientOptions.apiAddress\n                    : `https://lotus-cors-proxy.herokuapp.com/${this.chainNetwork}`,\n                token: this.clientOptions.token,\n            });\n            if (this.chainNetwork === \"mainnet\") {\n                this.filfox = new Filfox(this.chainNetwork);\n            }\n            return this;\n        };\n        /**\n         * See [[LockChain.assetIsNative]].\n         */\n        this.assetIsNative = (asset) => asset === this.asset;\n        this.assetIsSupported = this.assetIsNative;\n        this.assertAssetIsSupported = (asset) => {\n            if (!this.assetIsNative(asset)) {\n                throw new Error(`Asset ${asset} not supported on ${this.chain}.`);\n            }\n        };\n        /**\n         * See [[LockChain.assetDecimals]].\n         */\n        this.assetDecimals = (asset) => {\n            if (asset === this.asset) {\n                return 18;\n            }\n            throw new Error(`Asset ${asset} not supported on ${this.chain}.`);\n        };\n        /**\n         * See [[LockChain.getDeposits]].\n         */\n        this.getDeposits = (asset, address, progress, onDeposit) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            if (this.chainNetwork === \"devnet\") {\n                throw new Error(`Unable to fetch deposits on ${this.chainNetwork}.`);\n            }\n            this.assertAssetIsSupported(asset);\n            // For the first time `getDeposits` is called, fetch transactions from\n            // explorer API. (mainnet only)\n            if (this.filfox && (!progress || progress === 0)) {\n                try {\n                    const size = 100;\n                    let page = 0;\n                    while (true) {\n                        const { deposits, totalCount } = yield this.filfox.fetchDeposits(address.address, address.params, page, size);\n                        yield Promise.all((deposits || []).map((tx) => __awaiter(this, void 0, void 0, function* () { return onDeposit(transactionToDeposit(tx)); })));\n                        if (size * (page + 1) >= totalCount) {\n                            break;\n                        }\n                        page += 1;\n                        yield sleep(10 * SECONDS);\n                    }\n                }\n                catch (error) {\n                    // Ignore error.\n                }\n            }\n            let txs;\n            ({ txs, progress } = yield fetchDeposits(this.client, address.address, address.params, this.chainNetwork, progress || 0));\n            yield Promise.all((txs || []).map((tx) => __awaiter(this, void 0, void 0, function* () { return onDeposit(transactionToDeposit(tx)); })));\n            return progress;\n        });\n        /**\n         * See [[LockChain.transactionConfidence]].\n         */\n        this.transactionConfidence = (transaction) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            transaction = yield fetchMessage(this.client, transaction.cid, this.chainNetwork);\n            return {\n                current: transaction.confirmations,\n                target: this.chainNetwork === \"mainnet\" ? 12 : 6,\n            };\n        });\n        /**\n         * See [[LockChain.getGatewayAddress]].\n         */\n        this.getGatewayAddress = (asset, compressedPublicKey, gHash) => {\n            if (!this.renNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            this.assertAssetIsSupported(asset);\n            const ec = new elliptic.ec(\"secp256k1\");\n            // Decode compressed RenVM public key.\n            const renVMPublicKey = ec.keyFromPublic(compressedPublicKey);\n            // Interpret gHash as a private key.\n            const gHashKey = ec.keyFromPrivate(gHash);\n            // If `NO_PARAMS_FLAG` is set, set renVM public key and gHash public key,\n            // and recreate key pair from resulting curve point.\n            const derivedPublicKey = this.noParamsFlag\n                ? ec.keyFromPublic(renVMPublicKey\n                    .getPublic()\n                    .add(gHashKey.getPublic()))\n                : renVMPublicKey;\n            const payload = Buffer.from(blake2b(Buffer.from(derivedPublicKey.getPublic(false, \"hex\"), \"hex\"), null, 20));\n            // secp256k1 protocol prefix\n            const protocol = 1;\n            // network prefix\n            const networkPrefix = this.chainNetwork === \"testnet\" ? \"t\" : \"f\";\n            const addressObject = {\n                str: Buffer.concat([Buffer.from([protocol]), payload]),\n                protocol: () => protocol,\n                payload: () => payload,\n            };\n            const address = encodeAddress(networkPrefix, addressObject);\n            const params = this.noParamsFlag\n                ? undefined\n                : toBase64(Buffer.from(toURLBase64(gHash)));\n            return {\n                address,\n                params,\n            };\n        };\n        /**\n         * See [[LockChain.addressToBytes]].\n         */\n        this.addressToBytes = (address) => Buffer.from(decodeAddress(typeof address === \"string\" ? address : address.address).str);\n        /** @deprecated. Renamed to addressToBytes. */\n        this.addressStringToBytes = this.addressToBytes;\n        this.addressToString = (address) => typeof address === \"string\" ? address : address.address;\n        /**\n         * See [[LockChain.transactionID]].\n         */\n        this.transactionID = (transaction) => transaction.cid;\n        this.transactionIDFromRPCFormat = (txid, _txindex) => (typeof txid === \"string\" ? txid : new CID(txid).toString());\n        this.transactionFromRPCFormat = (txid, _txindex) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            return fetchMessage(this.client, typeof txid === \"string\" ? txid : new CID(txid).toString(), this.chainNetwork);\n        });\n        /**\n         * @deprecated Renamed to `transactionFromRPCFormat`.\n         * Will be removed in 3.0.0.\n         */\n        this.transactionFromID = this.transactionFromRPCFormat;\n        this.depositV1HashString = (_deposit) => {\n            throw new Error(NETWORK_NOT_SUPPORTED);\n        };\n        this.transactionRPCFormat = (transaction, v2) => {\n            if (!v2) {\n                throw new Error(NETWORK_NOT_SUPPORTED);\n            }\n            return {\n                txid: Buffer.from(new CID(transaction.cid).bytes),\n                txindex: transaction.nonce.toFixed(),\n            };\n        };\n        this.transactionRPCTxidFromID = (transactionID) => Buffer.from(new CID(transactionID).bytes);\n        /** @category Main */\n        this.Address = (address) => {\n            // Type validation\n            assertType(\"string\", { address });\n            this.getBurnPayload = () => address;\n            return this;\n        };\n        this.burnPayload = () => {\n            return this.getBurnPayload ? this.getBurnPayload() : undefined;\n        };\n        this.chainNetwork = network;\n        this.clientOptions = options;\n        this.noParamsFlag = !useParams;\n    }\n}\nFilecoinClass.chain = \"Filecoin\";\nFilecoinClass.utils = {\n    resolveChainNetwork: (network) => {\n        if (network === \"mainnet\" ||\n            network === \"testnet\" ||\n            network === \"devnet\") {\n            return network;\n        }\n        const renNetwork = getRenNetworkDetails(network);\n        return renNetwork.isTestnet ? \"testnet\" : \"mainnet\";\n    },\n    addressIsValid: (address, _network = \"mainnet\") => validateAddressString(typeof address === \"string\" ? address : address.address),\n    transactionIsValid: doesntError((transaction, _network = \"mainnet\") => {\n        const transactionString = typeof transaction === \"string\"\n            ? transaction\n            : transaction.cid;\n        const cid = new CID(transactionString);\n        return (transactionString === cid.toString() &&\n            cid.bytes.length === 38);\n    }),\n    addressExplorerLink: (address, _network = \"mainnet\") => {\n        // TODO: Check network.\n        return `https://filfox.info/en/address/${typeof address === \"string\" ? address : address.address}`;\n    },\n    transactionExplorerLink: (transaction, _network = \"mainnet\") => {\n        // TODO: Check network.\n        return `https://filfox.info/en/message/${typeof transaction === \"string\" ? transaction : transaction.cid}`;\n    },\n};\n// @dev Removes any static fields, except `utils`.\nexport const Filecoin = Callable(FilecoinClass);\nconst _ = Filecoin;\nconst __ = Filecoin();\n//# sourceMappingURL=filecoin.js.map"]},"metadata":{},"sourceType":"module"}