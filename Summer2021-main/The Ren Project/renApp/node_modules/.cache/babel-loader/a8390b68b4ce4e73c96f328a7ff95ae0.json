{"ast":null,"code":"import { Ox } from \"@renproject/utils\";\nimport * as v1 from \"./v1\";\nimport * as v2 from \"./v2\";\n/**\n * @dev Runs [[v1.createAddress]] and [[v2.createAddress]] side-by-side to make\n * sure that the v2 implementation is correct for all cases.\n * Eventually, v1 will be removed.\n */\n\nexport const createAddress = (addressToString, networks, opcode, script) => (isTestnet, gGubKeyHash, gHash, prefix) => {\n  const v2Address = addressToString(v2.createAddress(gGubKeyHash, gHash, prefix));\n\n  if (networks && opcode && script) {\n    const v1Address = v1.createAddress(networks, opcode, script)(isTestnet, gGubKeyHash, gHash);\n\n    if (v1Address !== v2Address) {\n      throw new Error(`Error: Different results returned from gateway address generation with parameters: \\\n    isTestnet: ${isTestnet}, \\\n    gPubKey: ${Ox(gGubKeyHash)}, \\\n    gHash: ${Ox(gHash)}, \\\n    prefix: ${Ox(prefix)}: ${v1Address} vs ${v2Address}`);\n    }\n  }\n\n  return v2Address;\n};\n/**\n * @dev See [[createAddress]] comment.\n *\n */\n\nexport const pubKeyScript = (networks, opcode, script) => (isTestnet, gPubKey, gHash) => {\n  const v2PubKeyScript = v2.pubKeyScript(gPubKey, gHash);\n\n  if (networks && opcode && script) {\n    const v1PubKeyScript = v1.pubKeyScript(networks, opcode, script)(isTestnet, gPubKey, gHash);\n\n    if (!v1PubKeyScript.equals(v2PubKeyScript)) {\n      throw new Error(`Error: Different results returned from gateway public key generation with parameters: \\\nisTestnet: ${isTestnet}, \\\ngPubKey: ${Ox(gPubKey)}, \\\ngHash: ${Ox(gHash)}`);\n    }\n  }\n\n  return v2PubKeyScript;\n};","map":{"version":3,"sources":["../../../src/script/index.ts"],"names":[],"mappings":"AAAA,SAAS,EAAT,QAAmB,mBAAnB;AAOA,OAAO,KAAK,EAAZ,MAAoB,MAApB;AACA,OAAO,KAAK,EAAZ,MAAoB,MAApB;AAEA;;;;AAIG;;AACH,OAAO,MAAM,aAAa,GACtB,CACI,eADJ,EAEI,QAFJ,EAGI,MAHJ,EAII,MAJJ,KAMA,CACI,SADJ,EAEI,WAFJ,EAGI,KAHJ,EAII,MAJJ,KAKY;AACR,QAAM,SAAS,GAAG,eAAe,CAC7B,EAAE,CAAC,aAAH,CAAiB,WAAjB,EAA8B,KAA9B,EAAqC,MAArC,CAD6B,CAAjC;;AAIA,MAAI,QAAQ,IAAI,MAAZ,IAAsB,MAA1B,EAAkC;AAC9B,UAAM,SAAS,GAAG,EAAE,CAAC,aAAH,CAAiB,QAAjB,EAA2B,MAA3B,EAAmC,MAAnC,EACd,SADc,EAEd,WAFc,EAGd,KAHc,CAAlB;;AAMA,QAAI,SAAS,KAAK,SAAlB,EAA6B;AACzB,YAAM,IAAI,KAAJ,CACF;iBACH,SAAS;eACX,EAAE,CAAC,WAAD,CAAa;aACjB,EAAE,CAAC,KAAD,CAAO;cACR,EAAE,CAAC,MAAD,CAAQ,KAAK,SAAS,OAAO,SAAS,EALhC,CAAN;AAOH;AACJ;;AAED,SAAO,SAAP;AACH,CApCE;AAsCP;;;AAGG;;AACH,OAAO,MAAM,YAAY,GACrB,CACI,QADJ,EAEI,MAFJ,EAGI,MAHJ,KAKA,CAAC,SAAD,EAAqB,OAArB,EAAsC,KAAtC,KAAuD;AACnD,QAAM,cAAc,GAAG,EAAE,CAAC,YAAH,CAAgB,OAAhB,EAAyB,KAAzB,CAAvB;;AAEA,MAAI,QAAQ,IAAI,MAAZ,IAAsB,MAA1B,EAAkC;AAC9B,UAAM,cAAc,GAAW,EAAE,CAAC,YAAH,CAC3B,QAD2B,EAE3B,MAF2B,EAG3B,MAH2B,EAI7B,SAJ6B,EAIlB,OAJkB,EAIT,KAJS,CAA/B;;AAMA,QAAI,CAAC,cAAc,CAAC,MAAf,CAAsB,cAAtB,CAAL,EAA4C;AACxC,YAAM,IAAI,KAAJ,CACF;aACP,SAAS;WACX,EAAE,CAAC,OAAD,CAAS;SACb,EAAE,CAAC,KAAD,CAAO,EAJI,CAAN;AAMH;AACJ;;AAED,SAAO,cAAP;AACH,CA3BE","sourceRoot":"","sourcesContent":["import { Ox } from \"@renproject/utils\";\nimport * as v1 from \"./v1\";\nimport * as v2 from \"./v2\";\n/**\n * @dev Runs [[v1.createAddress]] and [[v2.createAddress]] side-by-side to make\n * sure that the v2 implementation is correct for all cases.\n * Eventually, v1 will be removed.\n */\nexport const createAddress = (addressToString, networks, opcode, script) => (isTestnet, gGubKeyHash, gHash, prefix) => {\n    const v2Address = addressToString(v2.createAddress(gGubKeyHash, gHash, prefix));\n    if (networks && opcode && script) {\n        const v1Address = v1.createAddress(networks, opcode, script)(isTestnet, gGubKeyHash, gHash);\n        if (v1Address !== v2Address) {\n            throw new Error(`Error: Different results returned from gateway address generation with parameters: \\\n    isTestnet: ${isTestnet}, \\\n    gPubKey: ${Ox(gGubKeyHash)}, \\\n    gHash: ${Ox(gHash)}, \\\n    prefix: ${Ox(prefix)}: ${v1Address} vs ${v2Address}`);\n        }\n    }\n    return v2Address;\n};\n/**\n * @dev See [[createAddress]] comment.\n *\n */\nexport const pubKeyScript = (networks, opcode, script) => (isTestnet, gPubKey, gHash) => {\n    const v2PubKeyScript = v2.pubKeyScript(gPubKey, gHash);\n    if (networks && opcode && script) {\n        const v1PubKeyScript = v1.pubKeyScript(networks, opcode, script)(isTestnet, gPubKey, gHash);\n        if (!v1PubKeyScript.equals(v2PubKeyScript)) {\n            throw new Error(`Error: Different results returned from gateway public key generation with parameters: \\\nisTestnet: ${isTestnet}, \\\ngPubKey: ${Ox(gPubKey)}, \\\ngHash: ${Ox(gHash)}`);\n        }\n    }\n    return v2PubKeyScript;\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}