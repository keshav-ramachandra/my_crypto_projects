{"ast":null,"code":"/* eslint-disable no-console */\nimport BigNumber from \"bignumber.js\";\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warn\"] = 1] = \"Warn\";\n  LogLevel[LogLevel[\"Log\"] = 2] = \"Log\";\n  LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n  LogLevel[LogLevel[\"Debug\"] = 4] = \"Debug\";\n  LogLevel[LogLevel[\"Trace\"] = 5] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n\nconst stringToLogLevel = level => {\n  switch (level) {\n    case \"error\":\n    case LogLevel.Error:\n      return 0;\n\n    case \"warn\":\n    case LogLevel.Warn:\n      return 1;\n\n    case \"warn\":\n    case LogLevel.Log:\n      return 2;\n\n    case \"info\":\n    case LogLevel.Info:\n      return 3;\n\n    case \"debug\":\n    case LogLevel.Debug:\n      return 4;\n\n    case \"trace\":\n    case LogLevel.Trace:\n      return 5;\n\n    default:\n      return 1;\n  }\n};\n\nconst logLevelName = level => {\n  switch (stringToLogLevel(level)) {\n    case LogLevel.Error:\n      return \"ERROR\";\n\n    case LogLevel.Warn:\n      return \"WARN\";\n\n    case LogLevel.Log:\n      return \"WARN\";\n\n    case LogLevel.Info:\n      return \"INFO\";\n\n    case LogLevel.Debug:\n      return \"DEBUG\";\n\n    case LogLevel.Trace:\n      return \"TRACE\";\n  }\n};\n\nconst toString = value => {\n  try {\n    if (BigNumber.isBigNumber(value)) {\n      return value.toFixed();\n    }\n\n    return value;\n  } catch (error) {\n    try {\n      return String(value);\n    } catch (errorInner) {\n      return \"\";\n    }\n  }\n};\n\nconst printWithPrefix = (l, prefix, ...args) => {\n  if (prefix) {\n    l(prefix, ...args);\n  } else {\n    l(...args);\n  }\n};\n/**\n * SimpleLogger is a implementation of the Logger interface that also supports\n * setting the log level.\n *\n * @export\n * @class SimpleLogger\n */\n\n\nexport class SimpleLogger {\n  constructor(level = LogLevel.Warn, logPrefix, debugPrefix) {\n    this.logPrefix = () => \"\";\n\n    this.debugPrefix = level => `[RenJS][${logLevelName(level)}]`;\n\n    this.trace = (message, ...optionalParams) => {\n      if (this.level >= LogLevel.Trace) {\n        if (optionalParams.length && typeof message === \"string\") {\n          console.group((this.debugPrefix(LogLevel.Trace) || \"\") + message);\n          console.trace(...optionalParams.map(toString));\n          console.groupEnd();\n        } else {\n          printWithPrefix(console.trace, this.debugPrefix(LogLevel.Trace), toString(message), ...optionalParams.map(toString));\n        }\n      }\n    };\n\n    this.debug = (message, ...optionalParams) => {\n      if (this.level >= LogLevel.Debug) {\n        if (optionalParams.length && typeof message === \"string\") {\n          console.group((this.debugPrefix(LogLevel.Debug) || \"\") + message);\n          console.debug(...optionalParams.map(toString));\n          console.groupEnd();\n        } else {\n          printWithPrefix(console.debug, this.debugPrefix(LogLevel.Debug), toString(message), ...optionalParams.map(toString));\n        }\n      }\n    };\n\n    this.info = (...optionalParams) => {\n      if (this.level >= LogLevel.Info) {\n        printWithPrefix(console.info, this.logPrefix(LogLevel.Info), ...optionalParams.map(toString));\n      }\n    };\n\n    this.log = (...optionalParams) => {\n      if (this.level >= LogLevel.Log) {\n        printWithPrefix(console.log, this.logPrefix(LogLevel.Log), ...optionalParams.map(toString));\n      }\n    };\n\n    this.warn = (...optionalParams) => {\n      if (this.level >= LogLevel.Warn) {\n        printWithPrefix(console.warn, this.logPrefix(LogLevel.Warn), ...optionalParams.map(toString));\n      }\n    };\n\n    this.error = (...optionalParams) => {\n      if (this.level >= LogLevel.Error) {\n        printWithPrefix(console.error, this.logPrefix(LogLevel.Error), ...optionalParams.map(toString));\n      }\n    };\n\n    this.level = level;\n\n    if (logPrefix) {\n      const logPrefixFn = typeof logPrefix === \"string\" ? () => logPrefix : logPrefix;\n      this.logPrefix = logPrefixFn;\n      this.debugPrefix = logPrefixFn;\n    }\n\n    if (debugPrefix) {\n      const debugPrefixFn = typeof debugPrefix === \"string\" ? () => debugPrefix : debugPrefix;\n      this.debugPrefix = debugPrefixFn;\n    }\n  }\n\n}\nexport const NullLogger = {\n  level: -1,\n  trace: (_message, ..._optionalParams) => {},\n  debug: (_message, ..._optionalParams) => {},\n  info: (_message, ..._optionalParams) => {},\n  log: (_message, ..._optionalParams) => {},\n  warn: (_message, ..._optionalParams) => {},\n  error: (_message, ..._optionalParams) => {}\n};","map":{"version":3,"sources":["../../src/logger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable no-console */\nimport BigNumber from \"bignumber.js\";\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n    LogLevel[LogLevel[\"Warn\"] = 1] = \"Warn\";\n    LogLevel[LogLevel[\"Log\"] = 2] = \"Log\";\n    LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n    LogLevel[LogLevel[\"Debug\"] = 4] = \"Debug\";\n    LogLevel[LogLevel[\"Trace\"] = 5] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\nconst stringToLogLevel = (level) => {\n    switch (level) {\n        case \"error\":\n        case LogLevel.Error:\n            return 0;\n        case \"warn\":\n        case LogLevel.Warn:\n            return 1;\n        case \"warn\":\n        case LogLevel.Log:\n            return 2;\n        case \"info\":\n        case LogLevel.Info:\n            return 3;\n        case \"debug\":\n        case LogLevel.Debug:\n            return 4;\n        case \"trace\":\n        case LogLevel.Trace:\n            return 5;\n        default:\n            return 1;\n    }\n};\nconst logLevelName = (level) => {\n    switch (stringToLogLevel(level)) {\n        case LogLevel.Error:\n            return \"ERROR\";\n        case LogLevel.Warn:\n            return \"WARN\";\n        case LogLevel.Log:\n            return \"WARN\";\n        case LogLevel.Info:\n            return \"INFO\";\n        case LogLevel.Debug:\n            return \"DEBUG\";\n        case LogLevel.Trace:\n            return \"TRACE\";\n    }\n};\nconst toString = (value) => {\n    try {\n        if (BigNumber.isBigNumber(value)) {\n            return value.toFixed();\n        }\n        return value;\n    }\n    catch (error) {\n        try {\n            return String(value);\n        }\n        catch (errorInner) {\n            return \"\";\n        }\n    }\n};\nconst printWithPrefix = (l, prefix, ...args) => {\n    if (prefix) {\n        l(prefix, ...args);\n    }\n    else {\n        l(...args);\n    }\n};\n/**\n * SimpleLogger is a implementation of the Logger interface that also supports\n * setting the log level.\n *\n * @export\n * @class SimpleLogger\n */\nexport class SimpleLogger {\n    constructor(level = LogLevel.Warn, logPrefix, debugPrefix) {\n        this.logPrefix = () => \"\";\n        this.debugPrefix = (level) => `[RenJS][${logLevelName(level)}]`;\n        this.trace = (message, ...optionalParams) => {\n            if (this.level >= LogLevel.Trace) {\n                if (optionalParams.length && typeof message === \"string\") {\n                    console.group((this.debugPrefix(LogLevel.Trace) || \"\") + message);\n                    console.trace(...optionalParams.map(toString));\n                    console.groupEnd();\n                }\n                else {\n                    printWithPrefix(console.trace, this.debugPrefix(LogLevel.Trace), toString(message), ...optionalParams.map(toString));\n                }\n            }\n        };\n        this.debug = (message, ...optionalParams) => {\n            if (this.level >= LogLevel.Debug) {\n                if (optionalParams.length && typeof message === \"string\") {\n                    console.group((this.debugPrefix(LogLevel.Debug) || \"\") + message);\n                    console.debug(...optionalParams.map(toString));\n                    console.groupEnd();\n                }\n                else {\n                    printWithPrefix(console.debug, this.debugPrefix(LogLevel.Debug), toString(message), ...optionalParams.map(toString));\n                }\n            }\n        };\n        this.info = (...optionalParams) => {\n            if (this.level >= LogLevel.Info) {\n                printWithPrefix(console.info, this.logPrefix(LogLevel.Info), ...optionalParams.map(toString));\n            }\n        };\n        this.log = (...optionalParams) => {\n            if (this.level >= LogLevel.Log) {\n                printWithPrefix(console.log, this.logPrefix(LogLevel.Log), ...optionalParams.map(toString));\n            }\n        };\n        this.warn = (...optionalParams) => {\n            if (this.level >= LogLevel.Warn) {\n                printWithPrefix(console.warn, this.logPrefix(LogLevel.Warn), ...optionalParams.map(toString));\n            }\n        };\n        this.error = (...optionalParams) => {\n            if (this.level >= LogLevel.Error) {\n                printWithPrefix(console.error, this.logPrefix(LogLevel.Error), ...optionalParams.map(toString));\n            }\n        };\n        this.level = level;\n        if (logPrefix) {\n            const logPrefixFn = typeof logPrefix === \"string\" ? () => logPrefix : logPrefix;\n            this.logPrefix = logPrefixFn;\n            this.debugPrefix = logPrefixFn;\n        }\n        if (debugPrefix) {\n            const debugPrefixFn = typeof debugPrefix === \"string\"\n                ? () => debugPrefix\n                : debugPrefix;\n            this.debugPrefix = debugPrefixFn;\n        }\n    }\n}\nexport const NullLogger = {\n    level: -1,\n    trace: (_message, ..._optionalParams) => { },\n    debug: (_message, ..._optionalParams) => { },\n    info: (_message, ..._optionalParams) => { },\n    log: (_message, ..._optionalParams) => { },\n    warn: (_message, ..._optionalParams) => { },\n    error: (_message, ..._optionalParams) => { },\n};\n//# sourceMappingURL=logger.js.map"]},"metadata":{},"sourceType":"module"}