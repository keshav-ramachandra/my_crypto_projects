{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport bech32 from \"bech32\";\nimport { getRenNetworkDetails } from \"@renproject/interfaces\";\nimport { assertType, Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { AccAddress, Key } from \"@terra-money/terra.js\";\nimport elliptic from \"elliptic\";\nimport { TerraNetwork, transactionToDeposit, UNSUPPORTED_TERRA_NETWORK } from \"./api/deposit\";\nimport { terraDev } from \"./api/terraDev\";\n\nconst resolveTerraNetwork = network => {\n  if (network === TerraNetwork.Columbus || network === TerraNetwork.Tequila) {\n    return network;\n  }\n\n  const renNetwork = getRenNetworkDetails(network); // Prioritize the network passed in to the constructor.\n\n  return renNetwork.isTestnet ? TerraNetwork.Tequila : TerraNetwork.Columbus;\n};\n\nexport var TerraAssets;\n\n(function (TerraAssets) {\n  TerraAssets[\"LUNA\"] = \"LUNA\";\n})(TerraAssets || (TerraAssets = {}));\n/**\n * TerraClass implements the LockChain interface for Terra (https://terra.money)\n * and it's asset LUNA.\n */\n\n\nexport class TerraClass {\n  constructor(network) {\n    this.chain = TerraClass.chain;\n    this.name = TerraClass.chain; // The assets native to Terra.\n\n    this.assets = [TerraAssets.LUNA];\n    this.utils = utilsWithChainNetwork(TerraClass.utils, () => this.chainNetwork);\n    /**\n     * See [[LockChain.initialize]].\n     */\n\n    this.initialize = renNetwork => {\n      this.renNetwork = getRenNetworkDetails(renNetwork); // Prioritize the network passed in to the constructor.\n\n      this.chainNetwork = this.chainNetwork || this.renNetwork.isTestnet ? TerraNetwork.Tequila : TerraNetwork.Columbus;\n      return this;\n    };\n    /**\n     * See [[LockChain.assetIsNative]].\n     */\n\n\n    this.assetIsNative = asset => this.assets.indexOf(asset) >= 0;\n\n    this.assetIsSupported = this.assetIsNative;\n\n    this.assertAssetIsSupported = asset => {\n      if (!this.assetIsNative(asset)) {\n        throw new Error(`Unsupported asset ${asset}.`);\n      }\n    };\n    /**\n     * See [[LockChain.assetDecimals]].\n     */\n\n\n    this.assetDecimals = asset => {\n      switch (asset) {\n        case TerraAssets.LUNA:\n          return 6;\n      }\n\n      throw new Error(`Unsupported asset ${String(asset)}.`);\n    };\n    /**\n     * See [[LockChain.getDeposits]].\n     */\n\n\n    this.getDeposits = (asset, address, _instanceID, onDeposit) => __awaiter(this, void 0, void 0, function* () {\n      if (!this.chainNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      this.assertAssetIsSupported(asset);\n      const txs = yield terraDev.fetchDeposits(address.address, this.chainNetwork);\n      yield Promise.all(txs.map(tx => __awaiter(this, void 0, void 0, function* () {\n        return onDeposit(transactionToDeposit(tx));\n      })));\n    });\n    /**\n     * See [[LockChain.transactionConfidence]].\n     */\n\n\n    this.transactionConfidence = transaction => __awaiter(this, void 0, void 0, function* () {\n      if (!this.chainNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      transaction = yield terraDev.fetchDeposit(transaction.hash, transaction.messageIndex, this.chainNetwork);\n      return {\n        current: transaction.confirmations,\n        target: this.chainNetwork === TerraNetwork.Columbus ? 0 : 0\n      };\n    });\n    /**\n     * See [[LockChain.getGatewayAddress]].\n     */\n\n\n    this.getGatewayAddress = (asset, compressedPublicKey, gHash) => {\n      if (!this.renNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      this.assertAssetIsSupported(asset);\n      const ec = new elliptic.ec(\"secp256k1\"); // Decode compressed RenVM public key.\n\n      const renVMPublicKey = ec.keyFromPublic(compressedPublicKey); // Interpret gHash as a private key.\n\n      const gHashKey = ec.keyFromPrivate(gHash); // If `NO_PARAMS_FLAG` is set, set renVM public key and gHash public key,\n      // and recreate key pair from resulting curve point.\n\n      const derivedPublicKey = ec.keyFromPublic(renVMPublicKey.getPublic().add(gHashKey.getPublic()));\n      const newCompressedPublicKey = Buffer.from(derivedPublicKey.getPublic().encodeCompressed()); // @ts-expect-error `Cannot create an instance of an abstract class`\n\n      const address = new Key(newCompressedPublicKey);\n      return {\n        asset,\n        address: address.accAddress\n      };\n    };\n    /**\n     * See [[LockChain.addressToBytes]].\n     */\n\n\n    this.addressToBytes = address => Buffer.from(bech32.fromWords(bech32.decode(typeof address === \"string\" ? address : address.address).words));\n    /** @deprecated. Renamed to addressToBytes. */\n\n\n    this.addressStringToBytes = this.addressToBytes;\n\n    this.addressToString = address => typeof address === \"string\" ? address : address.address;\n    /**\n     * See [[LockChain.transactionID]].\n     */\n\n\n    this.transactionID = transaction => transaction.hash;\n\n    this.transactionIDFromRPCFormat = (txid, _txindex) => typeof txid === \"string\" ? txid : txid.toString(\"hex\");\n\n    this.transactionFromRPCFormat = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {\n      if (!this.chainNetwork) {\n        throw new Error(`${this.name} object not initialized.`);\n      }\n\n      return terraDev.fetchDeposit(typeof txid === \"string\" ? txid : txid.toString(\"hex\"), parseInt(txindex, 10), this.chainNetwork);\n    });\n    /**\n     * @deprecated Renamed to `transactionFromRPCFormat`.\n     * Will be removed in 3.0.0.\n     */\n\n\n    this.transactionFromID = this.transactionFromRPCFormat;\n\n    this.depositV1HashString = _deposit => {\n      throw new Error(UNSUPPORTED_TERRA_NETWORK);\n    };\n\n    this.transactionRPCFormat = (transaction, v2) => {\n      if (!v2) {\n        throw new Error(UNSUPPORTED_TERRA_NETWORK);\n      }\n\n      return {\n        txid: Buffer.from(transaction.hash, \"hex\"),\n        txindex: \"0\"\n      };\n    };\n\n    this.transactionRPCTxidFromID = transactionID => Buffer.from(transactionID, \"hex\");\n\n    this.Address = address => {\n      // Type validation\n      assertType(\"string\", {\n        address\n      });\n\n      this.getBurnPayload = () => address;\n\n      return this;\n    };\n\n    this.burnPayload = () => {\n      return this.getBurnPayload ? this.getBurnPayload() : undefined;\n    };\n\n    this.chainNetwork = network;\n  }\n\n}\nTerraClass.chain = \"Terra\";\nTerraClass.utils = {\n  resolveChainNetwork: resolveTerraNetwork,\n  addressIsValid: (addressIn, _network = TerraNetwork.Columbus) => {\n    const address = typeof addressIn === \"string\" ? addressIn : addressIn.address;\n    assertType(\"string\", {\n      address: address\n    });\n    return AccAddress.validate(address);\n  },\n  transactionIsValid: (transaction, _network = TerraNetwork.Columbus) => {\n    return isHex(typeof transaction === \"string\" ? transaction : transaction.hash, {\n      length: 32\n    });\n  },\n  addressExplorerLink: (addressIn, network = TerraNetwork.Columbus) => {\n    return `https://finder.terra.money/${Terra.utils.resolveChainNetwork(network)}/account/${typeof addressIn === \"string\" ? addressIn : addressIn.address}`;\n  },\n  transactionExplorerLink: (transaction, network = TerraNetwork.Columbus) => {\n    return `https://finder.terra.money/${Terra.utils.resolveChainNetwork(network)}/tx/${typeof transaction === \"string\" ? transaction : transaction.hash}`;\n  }\n}; // @dev Removes any static fields, except `utils`.\n\nexport const Terra = Callable(TerraClass);\nconst _ = Terra;","map":{"version":3,"sources":["../../src/terra.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport bech32 from \"bech32\";\nimport { getRenNetworkDetails, } from \"@renproject/interfaces\";\nimport { assertType, Callable, isHex, utilsWithChainNetwork, } from \"@renproject/utils\";\nimport { AccAddress, Key } from \"@terra-money/terra.js\";\nimport elliptic from \"elliptic\";\nimport { TerraNetwork, transactionToDeposit, UNSUPPORTED_TERRA_NETWORK, } from \"./api/deposit\";\nimport { terraDev } from \"./api/terraDev\";\nconst resolveTerraNetwork = (network) => {\n    if (network === TerraNetwork.Columbus || network === TerraNetwork.Tequila) {\n        return network;\n    }\n    const renNetwork = getRenNetworkDetails(network);\n    // Prioritize the network passed in to the constructor.\n    return renNetwork.isTestnet ? TerraNetwork.Tequila : TerraNetwork.Columbus;\n};\nexport var TerraAssets;\n(function (TerraAssets) {\n    TerraAssets[\"LUNA\"] = \"LUNA\";\n})(TerraAssets || (TerraAssets = {}));\n/**\n * TerraClass implements the LockChain interface for Terra (https://terra.money)\n * and it's asset LUNA.\n */\nexport class TerraClass {\n    constructor(network) {\n        this.chain = TerraClass.chain;\n        this.name = TerraClass.chain;\n        // The assets native to Terra.\n        this.assets = [TerraAssets.LUNA];\n        this.utils = utilsWithChainNetwork(TerraClass.utils, () => this.chainNetwork);\n        /**\n         * See [[LockChain.initialize]].\n         */\n        this.initialize = (renNetwork) => {\n            this.renNetwork = getRenNetworkDetails(renNetwork);\n            // Prioritize the network passed in to the constructor.\n            this.chainNetwork =\n                this.chainNetwork || this.renNetwork.isTestnet\n                    ? TerraNetwork.Tequila\n                    : TerraNetwork.Columbus;\n            return this;\n        };\n        /**\n         * See [[LockChain.assetIsNative]].\n         */\n        this.assetIsNative = (asset) => this.assets.indexOf(asset) >= 0;\n        this.assetIsSupported = this.assetIsNative;\n        this.assertAssetIsSupported = (asset) => {\n            if (!this.assetIsNative(asset)) {\n                throw new Error(`Unsupported asset ${asset}.`);\n            }\n        };\n        /**\n         * See [[LockChain.assetDecimals]].\n         */\n        this.assetDecimals = (asset) => {\n            switch (asset) {\n                case TerraAssets.LUNA:\n                    return 6;\n            }\n            throw new Error(`Unsupported asset ${String(asset)}.`);\n        };\n        /**\n         * See [[LockChain.getDeposits]].\n         */\n        this.getDeposits = (asset, address, _instanceID, onDeposit) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            this.assertAssetIsSupported(asset);\n            const txs = yield terraDev.fetchDeposits(address.address, this.chainNetwork);\n            yield Promise.all(txs.map((tx) => __awaiter(this, void 0, void 0, function* () { return onDeposit(transactionToDeposit(tx)); })));\n        });\n        /**\n         * See [[LockChain.transactionConfidence]].\n         */\n        this.transactionConfidence = (transaction) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            transaction = yield terraDev.fetchDeposit(transaction.hash, transaction.messageIndex, this.chainNetwork);\n            return {\n                current: transaction.confirmations,\n                target: this.chainNetwork === TerraNetwork.Columbus ? 0 : 0,\n            };\n        });\n        /**\n         * See [[LockChain.getGatewayAddress]].\n         */\n        this.getGatewayAddress = (asset, compressedPublicKey, gHash) => {\n            if (!this.renNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            this.assertAssetIsSupported(asset);\n            const ec = new elliptic.ec(\"secp256k1\");\n            // Decode compressed RenVM public key.\n            const renVMPublicKey = ec.keyFromPublic(compressedPublicKey);\n            // Interpret gHash as a private key.\n            const gHashKey = ec.keyFromPrivate(gHash);\n            // If `NO_PARAMS_FLAG` is set, set renVM public key and gHash public key,\n            // and recreate key pair from resulting curve point.\n            const derivedPublicKey = ec.keyFromPublic(renVMPublicKey\n                .getPublic()\n                .add(gHashKey.getPublic()));\n            const newCompressedPublicKey = Buffer.from(derivedPublicKey.getPublic().encodeCompressed());\n            // @ts-expect-error `Cannot create an instance of an abstract class`\n            const address = new Key(newCompressedPublicKey);\n            return {\n                asset,\n                address: address.accAddress,\n            };\n        };\n        /**\n         * See [[LockChain.addressToBytes]].\n         */\n        this.addressToBytes = (address) => Buffer.from(bech32.fromWords(bech32.decode(typeof address === \"string\" ? address : address.address).words));\n        /** @deprecated. Renamed to addressToBytes. */\n        this.addressStringToBytes = this.addressToBytes;\n        this.addressToString = (address) => typeof address === \"string\" ? address : address.address;\n        /**\n         * See [[LockChain.transactionID]].\n         */\n        this.transactionID = (transaction) => transaction.hash;\n        this.transactionIDFromRPCFormat = (txid, _txindex) => typeof txid === \"string\" ? txid : txid.toString(\"hex\");\n        this.transactionFromRPCFormat = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            return terraDev.fetchDeposit(typeof txid === \"string\" ? txid : txid.toString(\"hex\"), parseInt(txindex, 10), this.chainNetwork);\n        });\n        /**\n         * @deprecated Renamed to `transactionFromRPCFormat`.\n         * Will be removed in 3.0.0.\n         */\n        this.transactionFromID = this.transactionFromRPCFormat;\n        this.depositV1HashString = (_deposit) => {\n            throw new Error(UNSUPPORTED_TERRA_NETWORK);\n        };\n        this.transactionRPCFormat = (transaction, v2) => {\n            if (!v2) {\n                throw new Error(UNSUPPORTED_TERRA_NETWORK);\n            }\n            return {\n                txid: Buffer.from(transaction.hash, \"hex\"),\n                txindex: \"0\",\n            };\n        };\n        this.transactionRPCTxidFromID = (transactionID) => Buffer.from(transactionID, \"hex\");\n        this.Address = (address) => {\n            // Type validation\n            assertType(\"string\", { address });\n            this.getBurnPayload = () => address;\n            return this;\n        };\n        this.burnPayload = () => {\n            return this.getBurnPayload ? this.getBurnPayload() : undefined;\n        };\n        this.chainNetwork = network;\n    }\n}\nTerraClass.chain = \"Terra\";\nTerraClass.utils = {\n    resolveChainNetwork: resolveTerraNetwork,\n    addressIsValid: (addressIn, _network = TerraNetwork.Columbus) => {\n        const address = typeof addressIn === \"string\" ? addressIn : addressIn.address;\n        assertType(\"string\", { address: address });\n        return AccAddress.validate(address);\n    },\n    transactionIsValid: (transaction, _network = TerraNetwork.Columbus) => {\n        return isHex(typeof transaction === \"string\"\n            ? transaction\n            : transaction.hash, { length: 32 });\n    },\n    addressExplorerLink: (addressIn, network = TerraNetwork.Columbus) => {\n        return `https://finder.terra.money/${Terra.utils.resolveChainNetwork(network)}/account/${typeof addressIn === \"string\" ? addressIn : addressIn.address}`;\n    },\n    transactionExplorerLink: (transaction, network = TerraNetwork.Columbus) => {\n        return `https://finder.terra.money/${Terra.utils.resolveChainNetwork(network)}/tx/${typeof transaction === \"string\" ? transaction : transaction.hash}`;\n    },\n};\n// @dev Removes any static fields, except `utils`.\nexport const Terra = Callable(TerraClass);\nconst _ = Terra;\n//# sourceMappingURL=terra.js.map"]},"metadata":{},"sourceType":"module"}