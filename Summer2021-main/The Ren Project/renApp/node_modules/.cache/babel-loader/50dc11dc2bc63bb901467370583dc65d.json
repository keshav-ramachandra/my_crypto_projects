{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getRenNetworkDetails, NullLogger, RenNetwork } from \"@renproject/interfaces\";\nimport { RenVMProvider as V1Provider } from \"./v1\";\nimport { RenVMProvider as V2Provider } from \"./v2\";\n\nconst isV1Selector = selector => {\n  return [\"BTC0Btc2Eth\", \"BTC0Eth2Btc\", \"ZEC0Zec2Eth\", \"ZEC0Eth2Zec\", \"BCH0Bch2Eth\", \"BCH0Eth2Bch\"].indexOf(selector) >= 0;\n};\n\nexport class CombinedProvider {\n  constructor(network, logger = NullLogger) {\n    this.selector = params => {\n      const v1Selector = this.v1 && this.v1.selector(params);\n      return v1Selector && isV1Selector(v1Selector) ? v1Selector : this.v2.selector(params);\n    };\n\n    this.version = selector => isV1Selector(selector) ? 1 : 2;\n\n    this.mintTxHash = params => this.v1 && isV1Selector(params.selector) ? this.v1.mintTxHash(params) : this.v2.mintTxHash(params);\n\n    this.submitMint = params => this.v1 && isV1Selector(params.selector) ? this.v1.submitMint(params) : this.v2.submitMint(params);\n\n    this.burnTxHash = params => {\n      if (isV1Selector(params.selector)) {\n        throw new Error(`Fetching burn txHash is not supported for ${params.selector}`);\n      }\n\n      return this.v2.burnTxHash(params);\n    };\n\n    this.submitBurn = params => this.v1 && isV1Selector(params.selector) ? this.v1.submitBurn(params) : this.v2.submitBurn(params);\n\n    this.queryMintOrBurn = (selector, utxoTxHash) => this.v1 && isV1Selector(selector) ? this.v1.queryMintOrBurn(selector, utxoTxHash) : this.v2.queryMintOrBurn(selector, utxoTxHash);\n\n    this.waitForTX = (selector, utxoTxHash, onStatus, cancelRequested, timeout) => this.v1 && isV1Selector(selector) ? this.v1.waitForTX(selector, utxoTxHash, onStatus, cancelRequested, timeout) : this.v2.waitForTX(selector, utxoTxHash, onStatus, cancelRequested, timeout);\n    /**\n     * selectPublicKey fetches the key for the RenVM shard handling\n     * the provided contract.\n     *\n     * @returns The key hash (20 bytes) as a string.\n     */\n\n\n    this.selectPublicKey = (selector, assetOrChain) => this.v1 && isV1Selector(selector) ? this.v1.selectPublicKey(selector, assetOrChain) : this.v2.selectPublicKey(selector, assetOrChain);\n    /**\n     * Used to query what network a custom provider is connected to. LockAndMint\n     * and BurnAndRelease use this to configure their chain parameters.\n     */\n\n\n    this.getNetwork = selector => this.v1 && isV1Selector(selector) ? this.v1.getNetwork(selector) : this.v2.getNetwork(selector);\n\n    this.getConfirmationTarget = (selector, chain) => __awaiter(this, void 0, void 0, function* () {\n      return this.v1 && isV1Selector(selector) ? this.v1.getConfirmationTarget(selector, chain) : this.v2.getConfirmationTarget(selector, chain);\n    });\n\n    this.estimateTransactionFee = (asset, lockChain, hostChain) => __awaiter(this, void 0, void 0, function* () {\n      return this.v2.estimateTransactionFee(asset, lockChain, hostChain);\n    });\n\n    this.network = getRenNetworkDetails(network);\n    let v1Network;\n    let v2Network;\n\n    switch (this.network.name) {\n      case RenNetwork.Mainnet:\n      case RenNetwork.Mainnet:\n      case RenNetwork.MainnetVDot3:\n      case RenNetwork.MainnetVDot3:\n        v1Network = RenNetwork.Mainnet;\n        v2Network = RenNetwork.MainnetVDot3;\n        break;\n\n      case RenNetwork.Testnet:\n      case RenNetwork.Testnet:\n      case RenNetwork.TestnetVDot3:\n      case RenNetwork.TestnetVDot3:\n        v1Network = RenNetwork.Testnet;\n        v2Network = RenNetwork.TestnetVDot3;\n        break;\n\n      case RenNetwork.DevnetVDot3:\n      case RenNetwork.DevnetVDot3:\n        v2Network = RenNetwork.DevnetVDot3;\n        break;\n\n      default:\n        v1Network = network;\n        v2Network = network;\n    }\n\n    if (v1Network) {\n      this.v1 = new V1Provider(v1Network, undefined, logger);\n    }\n\n    this.v2 = new V2Provider(v2Network, undefined, logger); // Default to the v2 network.\n\n    this.sendMessage = this.v2.sendMessage;\n  }\n\n}","map":{"version":3,"sources":["../../src/combinedProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getRenNetworkDetails, NullLogger, RenNetwork, } from \"@renproject/interfaces\";\nimport { RenVMProvider as V1Provider } from \"./v1\";\nimport { RenVMProvider as V2Provider } from \"./v2\";\nconst isV1Selector = (selector) => {\n    return ([\n        \"BTC0Btc2Eth\",\n        \"BTC0Eth2Btc\",\n        \"ZEC0Zec2Eth\",\n        \"ZEC0Eth2Zec\",\n        \"BCH0Bch2Eth\",\n        \"BCH0Eth2Bch\",\n    ].indexOf(selector) >= 0);\n};\nexport class CombinedProvider {\n    constructor(network, logger = NullLogger) {\n        this.selector = (params) => {\n            const v1Selector = this.v1 && this.v1.selector(params);\n            return v1Selector && isV1Selector(v1Selector)\n                ? v1Selector\n                : this.v2.selector(params);\n        };\n        this.version = (selector) => (isV1Selector(selector) ? 1 : 2);\n        this.mintTxHash = (params) => this.v1 && isV1Selector(params.selector)\n            ? this.v1.mintTxHash(params)\n            : this.v2.mintTxHash(params);\n        this.submitMint = (params) => this.v1 && isV1Selector(params.selector)\n            ? this.v1.submitMint(params)\n            : this.v2.submitMint(params);\n        this.burnTxHash = (params) => {\n            if (isV1Selector(params.selector)) {\n                throw new Error(`Fetching burn txHash is not supported for ${params.selector}`);\n            }\n            return this.v2.burnTxHash(params);\n        };\n        this.submitBurn = (params) => this.v1 && isV1Selector(params.selector)\n            ? this.v1.submitBurn(params)\n            : this.v2.submitBurn(params);\n        this.queryMintOrBurn = (selector, utxoTxHash) => this.v1 && isV1Selector(selector)\n            ? this.v1.queryMintOrBurn(selector, utxoTxHash)\n            : this.v2.queryMintOrBurn(selector, utxoTxHash);\n        this.waitForTX = (selector, utxoTxHash, onStatus, cancelRequested, timeout) => this.v1 && isV1Selector(selector)\n            ? this.v1.waitForTX(selector, utxoTxHash, onStatus, cancelRequested, timeout)\n            : this.v2.waitForTX(selector, utxoTxHash, onStatus, cancelRequested, timeout);\n        /**\n         * selectPublicKey fetches the key for the RenVM shard handling\n         * the provided contract.\n         *\n         * @returns The key hash (20 bytes) as a string.\n         */\n        this.selectPublicKey = (selector, assetOrChain) => this.v1 && isV1Selector(selector)\n            ? this.v1.selectPublicKey(selector, assetOrChain)\n            : this.v2.selectPublicKey(selector, assetOrChain);\n        /**\n         * Used to query what network a custom provider is connected to. LockAndMint\n         * and BurnAndRelease use this to configure their chain parameters.\n         */\n        this.getNetwork = (selector) => this.v1 && isV1Selector(selector)\n            ? this.v1.getNetwork(selector)\n            : this.v2.getNetwork(selector);\n        this.getConfirmationTarget = (selector, chain) => __awaiter(this, void 0, void 0, function* () {\n            return this.v1 && isV1Selector(selector)\n                ? this.v1.getConfirmationTarget(selector, chain)\n                : this.v2.getConfirmationTarget(selector, chain);\n        });\n        this.estimateTransactionFee = (asset, lockChain, hostChain) => __awaiter(this, void 0, void 0, function* () { return this.v2.estimateTransactionFee(asset, lockChain, hostChain); });\n        this.network = getRenNetworkDetails(network);\n        let v1Network;\n        let v2Network;\n        switch (this.network.name) {\n            case RenNetwork.Mainnet:\n            case RenNetwork.Mainnet:\n            case RenNetwork.MainnetVDot3:\n            case RenNetwork.MainnetVDot3:\n                v1Network = RenNetwork.Mainnet;\n                v2Network = RenNetwork.MainnetVDot3;\n                break;\n            case RenNetwork.Testnet:\n            case RenNetwork.Testnet:\n            case RenNetwork.TestnetVDot3:\n            case RenNetwork.TestnetVDot3:\n                v1Network = RenNetwork.Testnet;\n                v2Network = RenNetwork.TestnetVDot3;\n                break;\n            case RenNetwork.DevnetVDot3:\n            case RenNetwork.DevnetVDot3:\n                v2Network = RenNetwork.DevnetVDot3;\n                break;\n            default:\n                v1Network = network;\n                v2Network = network;\n        }\n        if (v1Network) {\n            this.v1 = new V1Provider(v1Network, undefined, logger);\n        }\n        this.v2 = new V2Provider(v2Network, undefined, logger);\n        // Default to the v2 network.\n        this.sendMessage = this.v2.sendMessage;\n    }\n}\n//# sourceMappingURL=combinedProvider.js.map"]},"metadata":{},"sourceType":"module"}