{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Callable, Ox } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { EthereumBaseChain } from \"./base\";\nexport class EthereumClass extends EthereumBaseChain {\n  constructor(web3Provider, renNetwork) {\n    super(web3Provider, renNetwork);\n\n    this.getMintParams = asset => this._getParams ? this._getParams(asset) : undefined;\n\n    this.getBurnParams = (asset, burnPayload) => this._getParams ? this._getParams(asset, burnPayload) : undefined;\n    /** @category Main */\n\n\n    this.Address = (address, txConfig) => this.Account({\n      address\n    }, txConfig);\n    /** @category Main */\n\n\n    this.Account = ({\n      value,\n      address\n    }, txConfig) => {\n      this._getParams = (asset, burnPayload) => __awaiter(this, void 0, void 0, function* () {\n        if (!this.renNetworkDetails || !this.web3) {\n          throw new Error(`Ethereum must be initialized before calling 'getContractCalls'.`);\n        }\n\n        if (!value) {\n          // Mint\n          if (!address) {\n            throw new Error(`Must provide Ethereum recipient address.`);\n          } // Resolve .ens name\n\n\n          if (/.*\\.ens/.exec(address)) {\n            address = yield this.web3.eth.ens.getAddress(address);\n          }\n\n          return {\n            contractCalls: [{\n              sendTo: this.renNetworkDetails.addresses.BasicAdapter,\n              contractFn: \"mint\",\n              contractParams: [{\n                type: \"string\",\n                name: \"_symbol\",\n                value: asset\n              }, {\n                type: \"address\",\n                name: \"_address\",\n                value: address\n              }],\n              txConfig\n            }]\n          };\n        } else {\n          // Burn\n          if (!value) {\n            throw new Error(`Send amount must be provided in order to send directly to an address.`);\n          }\n\n          if (!burnPayload) {\n            throw new Error(`Must provide burn recipient address`);\n          }\n\n          const addressToBuffer = Buffer.from(burnPayload);\n          const gateway = yield this.getGatewayContractAddress(asset);\n          return {\n            contractCalls: [{\n              sendTo: gateway,\n              contractFn: \"burn\",\n              contractParams: [{\n                type: \"bytes\",\n                name: \"_to\",\n                value: Ox(addressToBuffer)\n              }, {\n                type: \"uint256\",\n                name: \"_amount\",\n                value: new BigNumber(value).toFixed()\n              }],\n              txConfig\n            }]\n          };\n        }\n      });\n\n      return this;\n    };\n    /** @category Main */\n\n\n    this.Contract = contractCall => {\n      this._getParams = (asset, burnPayload) => {\n        if (!this.renNetworkDetails) {\n          throw new Error(`Ethereum must be initialized before calling 'getContractCalls'`);\n        }\n\n        if (typeof contractCall === \"function\") {\n          if (!burnPayload) {\n            throw new Error(`Must provide burn payload`);\n          }\n\n          const addressToBuffer = Buffer.from(burnPayload);\n          return {\n            contractCalls: [contractCall(Ox(addressToBuffer), asset)]\n          };\n        } else {\n          return {\n            contractCalls: [contractCall]\n          };\n        }\n      };\n\n      return this;\n    };\n    /** @category Main */\n\n\n    this.Transaction = transaction => {\n      this._getParams = (_asset, _burnPayload) => {\n        return {\n          transaction\n        };\n      };\n\n      return this;\n    };\n    /** @category Main */\n\n\n    this.BurnNonce = burnNonce => {\n      this._getParams = (_asset, _burnPayload) => {\n        return {\n          burnNonce\n        };\n      };\n\n      return this;\n    };\n\n    this.toWei = value => new BigNumber(value).times(new BigNumber(10).exponentiatedBy(18)).decimalPlaces(0).toFixed();\n\n    this.fromWei = value => new BigNumber(value).dividedBy(new BigNumber(10).exponentiatedBy(18)).toFixed();\n  }\n\n} // @dev Removes any static fields, except `utils`.\n\nexport const Ethereum = Callable(EthereumClass);","map":{"version":3,"sources":["../../src/ethereum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Callable, Ox } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { EthereumBaseChain } from \"./base\";\nexport class EthereumClass extends EthereumBaseChain {\n    constructor(web3Provider, renNetwork) {\n        super(web3Provider, renNetwork);\n        this.getMintParams = (asset) => this._getParams ? this._getParams(asset) : undefined;\n        this.getBurnParams = (asset, burnPayload) => this._getParams ? this._getParams(asset, burnPayload) : undefined;\n        /** @category Main */\n        this.Address = (address, txConfig) => this.Account({ address }, txConfig);\n        /** @category Main */\n        this.Account = ({ value, address, }, txConfig) => {\n            this._getParams = (asset, burnPayload) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.renNetworkDetails || !this.web3) {\n                    throw new Error(`Ethereum must be initialized before calling 'getContractCalls'.`);\n                }\n                if (!value) {\n                    // Mint\n                    if (!address) {\n                        throw new Error(`Must provide Ethereum recipient address.`);\n                    }\n                    // Resolve .ens name\n                    if (/.*\\.ens/.exec(address)) {\n                        address = yield this.web3.eth.ens.getAddress(address);\n                    }\n                    return {\n                        contractCalls: [\n                            {\n                                sendTo: this.renNetworkDetails.addresses\n                                    .BasicAdapter,\n                                contractFn: \"mint\",\n                                contractParams: [\n                                    {\n                                        type: \"string\",\n                                        name: \"_symbol\",\n                                        value: asset,\n                                    },\n                                    {\n                                        type: \"address\",\n                                        name: \"_address\",\n                                        value: address,\n                                    },\n                                ],\n                                txConfig,\n                            },\n                        ],\n                    };\n                }\n                else {\n                    // Burn\n                    if (!value) {\n                        throw new Error(`Send amount must be provided in order to send directly to an address.`);\n                    }\n                    if (!burnPayload) {\n                        throw new Error(`Must provide burn recipient address`);\n                    }\n                    const addressToBuffer = Buffer.from(burnPayload);\n                    const gateway = yield this.getGatewayContractAddress(asset);\n                    return {\n                        contractCalls: [\n                            {\n                                sendTo: gateway,\n                                contractFn: \"burn\",\n                                contractParams: [\n                                    {\n                                        type: \"bytes\",\n                                        name: \"_to\",\n                                        value: Ox(addressToBuffer),\n                                    },\n                                    {\n                                        type: \"uint256\",\n                                        name: \"_amount\",\n                                        value: new BigNumber(value).toFixed(),\n                                    },\n                                ],\n                                txConfig,\n                            },\n                        ],\n                    };\n                }\n            });\n            return this;\n        };\n        /** @category Main */\n        this.Contract = (contractCall) => {\n            this._getParams = (asset, burnPayload) => {\n                if (!this.renNetworkDetails) {\n                    throw new Error(`Ethereum must be initialized before calling 'getContractCalls'`);\n                }\n                if (typeof contractCall === \"function\") {\n                    if (!burnPayload) {\n                        throw new Error(`Must provide burn payload`);\n                    }\n                    const addressToBuffer = Buffer.from(burnPayload);\n                    return {\n                        contractCalls: [contractCall(Ox(addressToBuffer), asset)],\n                    };\n                }\n                else {\n                    return { contractCalls: [contractCall] };\n                }\n            };\n            return this;\n        };\n        /** @category Main */\n        this.Transaction = (transaction) => {\n            this._getParams = (_asset, _burnPayload) => {\n                return {\n                    transaction,\n                };\n            };\n            return this;\n        };\n        /** @category Main */\n        this.BurnNonce = (burnNonce) => {\n            this._getParams = (_asset, _burnPayload) => {\n                return {\n                    burnNonce,\n                };\n            };\n            return this;\n        };\n        this.toWei = (value) => new BigNumber(value)\n            .times(new BigNumber(10).exponentiatedBy(18))\n            .decimalPlaces(0)\n            .toFixed();\n        this.fromWei = (value) => new BigNumber(value)\n            .dividedBy(new BigNumber(10).exponentiatedBy(18))\n            .toFixed();\n    }\n}\n// @dev Removes any static fields, except `utils`.\nexport const Ethereum = Callable(EthereumClass);\n//# sourceMappingURL=ethereum.js.map"]},"metadata":{},"sourceType":"module"}