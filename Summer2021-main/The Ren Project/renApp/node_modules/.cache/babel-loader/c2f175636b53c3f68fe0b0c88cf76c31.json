{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { SECONDS } from \"@renproject/utils\";\nimport Axios from \"axios\";\nconst FILFOX_URL = \"https://filfox.info/api/v1/\";\nexport class Filfox {\n  constructor(network = \"mainnet\") {\n    this.fetchDeposits = (address, paramsFilterBase64 = undefined, page = 0, size = 100) => __awaiter(this, void 0, void 0, function* () {\n      const heightURL = `${FILFOX_URL}tipset/recent?count=1`;\n      const heightResponse = (yield Axios.get(heightURL, {\n        timeout: 60 * SECONDS\n      })).data;\n\n      if (!Array.isArray(heightResponse)) {\n        throw new Error(`Unable to fetch latest Filecoin height: ${heightResponse.error}`);\n      }\n\n      const height = heightResponse[0].height;\n      const messagesURL = `${FILFOX_URL}address/${address}/messages?pageSize=${size}&page=${page}&detailed`;\n      const messagesResponse = (yield Axios.get(messagesURL, {\n        timeout: 60 * SECONDS\n      })).data;\n\n      if (messagesResponse.error !== undefined) {\n        throw new Error(`Unable to fetch Filecoin messages: ${messagesResponse.error}`);\n      }\n\n      const {\n        messages,\n        totalCount\n      } = messagesResponse;\n      return {\n        deposits: messages.filter(message => message.to === address).map(message => {\n          return {\n            cid: message.cid,\n            // to: message.to,\n            amount: message.value,\n            params: message.params,\n            confirmations: height - message.height,\n            nonce: message.nonce\n          };\n        }).filter(message => paramsFilterBase64 === undefined || paramsFilterBase64 === null || message.params === paramsFilterBase64),\n        totalCount\n      };\n    });\n\n    if (network !== \"mainnet\") {\n      throw new Error(`Network ${network} not supported by Filscan.`);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/api/explorers/filfox.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,OAAT,QAAwB,mBAAxB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAGA,MAAM,UAAU,GAAG,6BAAnB;AAEA,OAAM,MAAO,MAAP,CAAa;AACf,EAAA,WAAA,CAAY,OAAA,GAAsB,SAAlC,EAA2C;AAM3C,SAAA,aAAA,GAAgB,CACZ,OADY,EAEZ,kBAAA,GAAyC,SAF7B,EAGZ,IAAI,GAAG,CAHK,EAIZ,IAAI,GAAG,GAJK,KAKiD,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC7D,YAAM,SAAS,GAAG,GAAG,UAAU,uBAA/B;AAEA,YAAM,cAAc,GAAG,CACnB,MAAM,KAAK,CAAC,GAAN,CAAwC,SAAxC,EAAmD;AACrD,QAAA,OAAO,EAAE,KAAK;AADuC,OAAnD,CADa,EAIrB,IAJF;;AAMA,UAAI,CAAC,KAAK,CAAC,OAAN,CAAc,cAAd,CAAL,EAAoC;AAChC,cAAM,IAAI,KAAJ,CACF,2CAA2C,cAAc,CAAC,KAAK,EAD7D,CAAN;AAGH;;AAED,YAAM,MAAM,GAAG,cAAc,CAAC,CAAD,CAAd,CAAkB,MAAjC;AAEA,YAAM,WAAW,GAAG,GAAG,UAAU,WAAW,OAAO,sBAAsB,IAAI,SAAS,IAAI,WAA1F;AAEA,YAAM,gBAAgB,GAAG,CACrB,MAAM,KAAK,CAAC,GAAN,CACF,WADE,EAEF;AACI,QAAA,OAAO,EAAE,KAAK;AADlB,OAFE,CADe,EAOvB,IAPF;;AASA,UAAI,gBAAgB,CAAC,KAAjB,KAA2B,SAA/B,EAA0C;AACtC,cAAM,IAAI,KAAJ,CACF,sCAAsC,gBAAgB,CAAC,KAAK,EAD1D,CAAN;AAGH;;AAED,YAAM;AAAE,QAAA,QAAF;AAAY,QAAA;AAAZ,UAA2B,gBAAjC;AAEA,aAAO;AACH,QAAA,QAAQ,EAAE,QAAQ,CACb,MADK,CACG,OAAD,IAAa,OAAO,CAAC,EAAR,KAAe,OAD9B,EAEL,GAFK,CAEA,OAAD,IAA4B;AAC7B,iBAAO;AACH,YAAA,GAAG,EAAE,OAAO,CAAC,GADV;AAEH;AACA,YAAA,MAAM,EAAE,OAAO,CAAC,KAHb;AAIH,YAAA,MAAM,EAAE,OAAO,CAAC,MAJb;AAKH,YAAA,aAAa,EAAE,MAAM,GAAG,OAAO,CAAC,MAL7B;AAMH,YAAA,KAAK,EAAE,OAAO,CAAC;AANZ,WAAP;AAQH,SAXK,EAYL,MAZK,CAaD,OAAD,IACI,kBAAkB,KAAK,SAAvB,IACA,kBAAkB,KAAK,IADvB,IAEA,OAAO,CAAC,MAAR,KAAmB,kBAhBrB,CADP;AAmBH,QAAA;AAnBG,OAAP;AAqBH,KAzDgE,CALjE;;AALI,QAAI,OAAO,KAAK,SAAhB,EAA2B;AACvB,YAAM,IAAI,KAAJ,CAAU,WAAW,OAAO,4BAA5B,CAAN;AACH;AACJ;;AALc","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SECONDS } from \"@renproject/utils\";\nimport Axios from \"axios\";\nconst FILFOX_URL = \"https://filfox.info/api/v1/\";\nexport class Filfox {\n    constructor(network = \"mainnet\") {\n        this.fetchDeposits = (address, paramsFilterBase64 = undefined, page = 0, size = 100) => __awaiter(this, void 0, void 0, function* () {\n            const heightURL = `${FILFOX_URL}tipset/recent?count=1`;\n            const heightResponse = (yield Axios.get(heightURL, {\n                timeout: 60 * SECONDS,\n            })).data;\n            if (!Array.isArray(heightResponse)) {\n                throw new Error(`Unable to fetch latest Filecoin height: ${heightResponse.error}`);\n            }\n            const height = heightResponse[0].height;\n            const messagesURL = `${FILFOX_URL}address/${address}/messages?pageSize=${size}&page=${page}&detailed`;\n            const messagesResponse = (yield Axios.get(messagesURL, {\n                timeout: 60 * SECONDS,\n            })).data;\n            if (messagesResponse.error !== undefined) {\n                throw new Error(`Unable to fetch Filecoin messages: ${messagesResponse.error}`);\n            }\n            const { messages, totalCount } = messagesResponse;\n            return {\n                deposits: messages\n                    .filter((message) => message.to === address)\n                    .map((message) => {\n                    return {\n                        cid: message.cid,\n                        // to: message.to,\n                        amount: message.value,\n                        params: message.params,\n                        confirmations: height - message.height,\n                        nonce: message.nonce,\n                    };\n                })\n                    .filter((message) => paramsFilterBase64 === undefined ||\n                    paramsFilterBase64 === null ||\n                    message.params === paramsFilterBase64),\n                totalCount,\n            };\n        });\n        if (network !== \"mainnet\") {\n            throw new Error(`Network ${network} not supported by Filscan.`);\n        }\n    }\n}\n//# sourceMappingURL=filfox.js.map"]},"metadata":{},"sourceType":"module"}