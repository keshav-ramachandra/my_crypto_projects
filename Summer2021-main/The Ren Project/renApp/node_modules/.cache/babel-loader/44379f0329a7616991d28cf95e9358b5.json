{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { LogLevel, RenNetwork, SimpleLogger } from \"@renproject/interfaces\";\nimport { CombinedProvider } from \"@renproject/rpc\";\nimport { RenVMProvider } from \"@renproject/rpc/build/main/v2\";\nimport { fromSmallestUnit, randomNonce, toSmallestUnit } from \"@renproject/utils\";\nimport { BurnAndRelease } from \"./burnAndRelease\";\nimport { defaultDepositHandler } from \"./defaultDepositHandler\";\nimport { LockAndMint, DepositStatus, LockAndMintDeposit } from \"./lockAndMint\";\nexport { BurnAndRelease } from \"./burnAndRelease\";\nexport { LockAndMint, DepositStatus, LockAndMintDeposit } from \"./lockAndMint\";\n/**\n * This is the main exported class from `@renproject/ren`.\n *\n * ```typescript\n * import RenJS from \"@renproject/ren\";\n * ```\n *\n * By default, RenJS will connect to the RenVM mainnet network. To connect\n * to `testnet` or to configure a custom connection, RenJS takes an optional\n * provider object. See the [[constructor]] for more details.\n *\n * ```typescript\n * new RenJS(); // Same as `new RenJS(\"mainnet\");`\n * new RenJS(\"testnet\");\n * new RenJS(custom provider object);\n * ```\n *\n * It then exposes two main functions:\n * 1. [[lockAndMint]] - for transferring assets to Ethereum.\n * 2. [[burnAndRelease]] - for transferring assets out of Ethereum.\n *\n * Also see:\n * 1. [[getFees]] - for estimating the fees that will be incurred by minting or\n * burning.\n * 2. [[defaultDepositHandler]]\n *\n */\n\nexport default class RenJS {\n  /**\n   * Accepts the name of a network, or a network object.\n   *\n   * @param network Provide the name of a network - `\"mainnet\"` or `\"testnet\"` - or a network object.\n   * @param providerOrConfig Provide a custom RPC provider, or provide RenJS configuration settings.\n   */\n  constructor(providerOrNetwork, config) {\n    // const provider: string | Provider | undefined;\n    // let config: RenJSConfig | undefined;\n    // if (\n    //     providerOrConfig &&\n    //     (typeof providerOrConfig === \"string\" ||\n    //         (providerOrConfig as Provider).sendMessage)\n    // ) {\n    //     provider = providerOrConfig as string | Provider;\n    // } else if (providerOrConfig) {\n    //     config = providerOrConfig as RenJSConfig;\n    // }\n\n    /**\n     * @hidden\n     */\n    this.utils = RenJS.utils;\n\n    this.getFees = ({\n      asset,\n      from,\n      to\n    }) => __awaiter(this, void 0, void 0, function* () {\n      if (!(yield from.assetIsSupported(asset))) {\n        throw new Error(`Asset not supported by chain ${from.name}.`);\n      }\n\n      if (!(yield to.assetIsSupported(asset))) {\n        throw new Error(`Asset not supported by chain ${to.name}.`);\n      }\n\n      if (yield from.assetIsNative(asset)) {\n        // LockAndMint\n        return yield this.renVM.estimateTransactionFee(asset, from, to);\n      } else if (yield to.assetIsNative(asset)) {\n        // BurnAndRelease\n        return yield this.renVM.estimateTransactionFee(asset, to, from);\n      } else {\n        // BurnAndMint\n        return yield this.renVM.estimateTransactionFee(asset, from, to);\n      }\n    });\n    /**\n     * `lockAndMint` initiates the process of bridging an asset from its native\n     * chain to a host chain.\n     *\n     * See [[LockAndMintParams]] for all the options that can be set.\n     *\n     * Returns a [[LockAndMint]] object.\n     *\n     * Example initialization:\n     *\n     * ```js\n     * const lockAndMint = renJS.lockAndMint({\n     *     asset: \"BTC\",\n     *     from: Bitcoin(),\n     *     to: Ethereum(web3Provider).Account({\n     *         address: \"0x...\",\n     *     }),\n     * });\n     * ```\n     *\n     * @param params See [[LockAndMintParams]].\n     */\n\n\n    this.lockAndMint = (params, config) => __awaiter(this, void 0, void 0, function* () {\n      return new LockAndMint(this.renVM, params, Object.assign(Object.assign({}, this._config), config))._initialize();\n    });\n    /**\n     * `burnAndRelease` submits a burn log to RenVM.\n     * Returns a [[BurnAndRelease]] object.\n     */\n\n\n    this.burnAndRelease = (params, config) => __awaiter(this, void 0, void 0, function* () {\n      return new BurnAndRelease(this.renVM, params, Object.assign(Object.assign({}, this._config), config))._initialize();\n    });\n\n    this._config = config || {};\n    this._logger = config && config.logger || new SimpleLogger(config && config.logLevel || LogLevel.Error);\n    this._config.logger = this._logger;\n\n    const defaultProvider = () => config && config.useV2TransactionFormat ? new RenVMProvider(providerOrNetwork || RenNetwork.Mainnet, undefined, this._logger) : new CombinedProvider(providerOrNetwork || RenNetwork.Mainnet, this._logger); // Use provided provider, provider URL or default lightnode URL.\n\n\n    this.renVM = providerOrNetwork && typeof providerOrNetwork !== \"string\" && providerOrNetwork.sendMessage ? providerOrNetwork : defaultProvider();\n  }\n\n} // /**\n//  * [STATIC] `Tokens` exposes the tokens that can be passed in to the lockAndMint and\n//  * burnAndRelease methods.\n//  */\n// public static Tokens = Tokens;\n\n/**\n * `Networks` exposes the network options that can be passed in to the RenJS\n * constructor. `Networks.Mainnet` resolves to the string `\"mainnet\"`.\n */\n\nRenJS.Networks = RenNetwork;\n/**\n * A collection of helper functions. [[utils.randomNonce]] can be be used to\n * generate a nonce when calling [[RenJS.lockAndMint]].\n */\n\nRenJS.utils = {\n  randomNonce,\n  toSmallestUnit,\n  fromSmallestUnit,\n  fromAscii: str => Buffer.from(str)\n};\n/**\n * `RenJS.defaultDepositHandler` can be passed as a deposit callback when\n * minting. It will handle submitting to RenVM and then to the mint-chain,\n * as long as a valid provider for the mint-chain is given.\n *\n * This is not recommended for front-ends, since it may trigger a wallet\n * pop-up unexpectedly when the mint is ready to be submitted.\n *\n * ```ts\n * lockAndMint.on(\"deposit\", RenJS.defaultDepositHandler);\n * ```\n */\n\nRenJS.defaultDepositHandler = defaultDepositHandler; // ////////////////////////////////////////////////////////////////////////// //\n// EXPORTS                                                                    //\n// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //\n// ////////////////////////////////////////////////////////////////////////// //\n\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-explicit-any */\n\nRenJS.default = RenJS.RenJS = RenJS;\nRenJS.LockAndMint = LockAndMint;\nRenJS.BurnAndRelease = BurnAndRelease;\nRenJS.DepositStatus = DepositStatus;\nRenJS.LockAndMintDeposit = LockAndMintDeposit; // AMD\n\ntry {\n  // @ts-ignore\n  if (typeof define === \"function\" && define.amd) {\n    // @ts-ignore\n    define(() => RenJS);\n  }\n} catch (error) {\n  /* ignore */\n} // Node.js and other environments that support module.exports.\n\n\ntry {\n  // @ts-ignore\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = RenJS;\n  }\n} catch (error) {\n  /* ignore */\n} // Browser.\n\n\ntry {\n  // @ts-ignore\n  if (typeof window !== \"undefined\" && window) {\n    window.RenJS = RenJS;\n  }\n} catch (error) {\n  /* ignore */\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LogLevel, RenNetwork, SimpleLogger, } from \"@renproject/interfaces\";\nimport { CombinedProvider } from \"@renproject/rpc\";\nimport { RenVMProvider } from \"@renproject/rpc/build/main/v2\";\nimport { fromSmallestUnit, randomNonce, toSmallestUnit, } from \"@renproject/utils\";\nimport { BurnAndRelease } from \"./burnAndRelease\";\nimport { defaultDepositHandler } from \"./defaultDepositHandler\";\nimport { LockAndMint, DepositStatus, LockAndMintDeposit } from \"./lockAndMint\";\nexport { BurnAndRelease } from \"./burnAndRelease\";\nexport { LockAndMint, DepositStatus, LockAndMintDeposit } from \"./lockAndMint\";\n/**\n * This is the main exported class from `@renproject/ren`.\n *\n * ```typescript\n * import RenJS from \"@renproject/ren\";\n * ```\n *\n * By default, RenJS will connect to the RenVM mainnet network. To connect\n * to `testnet` or to configure a custom connection, RenJS takes an optional\n * provider object. See the [[constructor]] for more details.\n *\n * ```typescript\n * new RenJS(); // Same as `new RenJS(\"mainnet\");`\n * new RenJS(\"testnet\");\n * new RenJS(custom provider object);\n * ```\n *\n * It then exposes two main functions:\n * 1. [[lockAndMint]] - for transferring assets to Ethereum.\n * 2. [[burnAndRelease]] - for transferring assets out of Ethereum.\n *\n * Also see:\n * 1. [[getFees]] - for estimating the fees that will be incurred by minting or\n * burning.\n * 2. [[defaultDepositHandler]]\n *\n */\nexport default class RenJS {\n    /**\n     * Accepts the name of a network, or a network object.\n     *\n     * @param network Provide the name of a network - `\"mainnet\"` or `\"testnet\"` - or a network object.\n     * @param providerOrConfig Provide a custom RPC provider, or provide RenJS configuration settings.\n     */\n    constructor(providerOrNetwork, config) {\n        // const provider: string | Provider | undefined;\n        // let config: RenJSConfig | undefined;\n        // if (\n        //     providerOrConfig &&\n        //     (typeof providerOrConfig === \"string\" ||\n        //         (providerOrConfig as Provider).sendMessage)\n        // ) {\n        //     provider = providerOrConfig as string | Provider;\n        // } else if (providerOrConfig) {\n        //     config = providerOrConfig as RenJSConfig;\n        // }\n        /**\n         * @hidden\n         */\n        this.utils = RenJS.utils;\n        this.getFees = ({ asset, from, to, }) => __awaiter(this, void 0, void 0, function* () {\n            if (!(yield from.assetIsSupported(asset))) {\n                throw new Error(`Asset not supported by chain ${from.name}.`);\n            }\n            if (!(yield to.assetIsSupported(asset))) {\n                throw new Error(`Asset not supported by chain ${to.name}.`);\n            }\n            if (yield from.assetIsNative(asset)) {\n                // LockAndMint\n                return yield this.renVM.estimateTransactionFee(asset, from, to);\n            }\n            else if (yield to.assetIsNative(asset)) {\n                // BurnAndRelease\n                return yield this.renVM.estimateTransactionFee(asset, to, from);\n            }\n            else {\n                // BurnAndMint\n                return yield this.renVM.estimateTransactionFee(asset, from, to);\n            }\n        });\n        /**\n         * `lockAndMint` initiates the process of bridging an asset from its native\n         * chain to a host chain.\n         *\n         * See [[LockAndMintParams]] for all the options that can be set.\n         *\n         * Returns a [[LockAndMint]] object.\n         *\n         * Example initialization:\n         *\n         * ```js\n         * const lockAndMint = renJS.lockAndMint({\n         *     asset: \"BTC\",\n         *     from: Bitcoin(),\n         *     to: Ethereum(web3Provider).Account({\n         *         address: \"0x...\",\n         *     }),\n         * });\n         * ```\n         *\n         * @param params See [[LockAndMintParams]].\n         */\n        this.lockAndMint = (params, config) => __awaiter(this, void 0, void 0, function* () {\n            return new LockAndMint(this.renVM, params, Object.assign(Object.assign({}, this._config), config))._initialize();\n        });\n        /**\n         * `burnAndRelease` submits a burn log to RenVM.\n         * Returns a [[BurnAndRelease]] object.\n         */\n        this.burnAndRelease = (params, config) => __awaiter(this, void 0, void 0, function* () {\n            return new BurnAndRelease(this.renVM, params, Object.assign(Object.assign({}, this._config), config))._initialize();\n        });\n        this._config = config || {};\n        this._logger =\n            (config && config.logger) ||\n                new SimpleLogger((config && config.logLevel) || LogLevel.Error);\n        this._config.logger = this._logger;\n        const defaultProvider = () => config && config.useV2TransactionFormat\n            ? new RenVMProvider(\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            (providerOrNetwork || RenNetwork.Mainnet), undefined, this._logger)\n            : new CombinedProvider(\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            (providerOrNetwork || RenNetwork.Mainnet), this._logger);\n        // Use provided provider, provider URL or default lightnode URL.\n        this.renVM =\n            providerOrNetwork &&\n                typeof providerOrNetwork !== \"string\" &&\n                providerOrNetwork.sendMessage\n                ? providerOrNetwork\n                : defaultProvider();\n    }\n}\n// /**\n//  * [STATIC] `Tokens` exposes the tokens that can be passed in to the lockAndMint and\n//  * burnAndRelease methods.\n//  */\n// public static Tokens = Tokens;\n/**\n * `Networks` exposes the network options that can be passed in to the RenJS\n * constructor. `Networks.Mainnet` resolves to the string `\"mainnet\"`.\n */\nRenJS.Networks = RenNetwork;\n/**\n * A collection of helper functions. [[utils.randomNonce]] can be be used to\n * generate a nonce when calling [[RenJS.lockAndMint]].\n */\nRenJS.utils = {\n    randomNonce,\n    toSmallestUnit,\n    fromSmallestUnit,\n    fromAscii: (str) => Buffer.from(str),\n};\n/**\n * `RenJS.defaultDepositHandler` can be passed as a deposit callback when\n * minting. It will handle submitting to RenVM and then to the mint-chain,\n * as long as a valid provider for the mint-chain is given.\n *\n * This is not recommended for front-ends, since it may trigger a wallet\n * pop-up unexpectedly when the mint is ready to be submitted.\n *\n * ```ts\n * lockAndMint.on(\"deposit\", RenJS.defaultDepositHandler);\n * ```\n */\nRenJS.defaultDepositHandler = defaultDepositHandler;\n// ////////////////////////////////////////////////////////////////////////// //\n// EXPORTS                                                                    //\n// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //\n// ////////////////////////////////////////////////////////////////////////// //\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-explicit-any */\nRenJS.default = RenJS.RenJS = RenJS;\nRenJS.LockAndMint = LockAndMint;\nRenJS.BurnAndRelease = BurnAndRelease;\nRenJS.DepositStatus = DepositStatus;\nRenJS.LockAndMintDeposit = LockAndMintDeposit;\n// AMD\ntry {\n    // @ts-ignore\n    if (typeof define === \"function\" && define.amd) {\n        // @ts-ignore\n        define(() => RenJS);\n    }\n}\ncatch (error) {\n    /* ignore */\n}\n// Node.js and other environments that support module.exports.\ntry {\n    // @ts-ignore\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = RenJS;\n    }\n}\ncatch (error) {\n    /* ignore */\n}\n// Browser.\ntry {\n    // @ts-ignore\n    if (typeof window !== \"undefined\" && window) {\n        window.RenJS = RenJS;\n    }\n}\ncatch (error) {\n    /* ignore */\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}