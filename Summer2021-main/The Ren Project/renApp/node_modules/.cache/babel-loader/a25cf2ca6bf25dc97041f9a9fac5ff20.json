{"ast":null,"code":"const Bn = require('bn.js');\n\nconst Pipe = require('buffer-pipe');\n\nmodule.exports = {\n  encode,\n  decode,\n  read,\n  readBn,\n  write\n};\n\nfunction read(stream) {\n  return readBn(stream).toString();\n}\n\nfunction readBn(stream) {\n  const num = new Bn(0);\n  let shift = 0;\n  let byt;\n\n  while (true) {\n    byt = stream.read(1)[0];\n    num.ior(new Bn(byt & 0x7f).shln(shift));\n\n    if (byt >> 7 === 0) {\n      break;\n    } else {\n      shift += 7;\n    }\n  }\n\n  return num;\n}\n\nfunction write(number, stream) {\n  const num = new Bn(number);\n\n  while (true) {\n    const i = num.maskn(7).toNumber();\n    num.ishrn(7);\n\n    if (num.isZero()) {\n      stream.write([i]);\n      break;\n    } else {\n      stream.write([i | 0x80]);\n    }\n  }\n}\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\n\n\nfunction encode(num) {\n  const stream = new Pipe();\n  write(num, stream);\n  return stream.buffer;\n}\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\n\n\nfunction decode(buffer) {\n  const stream = new Pipe(buffer);\n  return read(stream);\n}","map":{"version":3,"sources":["/home/kesha/Downloads/ren-main/renApp/node_modules/leb128/unsigned.js"],"names":["Bn","require","Pipe","module","exports","encode","decode","read","readBn","write","stream","toString","num","shift","byt","ior","shln","number","i","maskn","toNumber","ishrn","isZero","buffer"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,OAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MADe;AAEfC,EAAAA,MAFe;AAGfC,EAAAA,IAHe;AAIfC,EAAAA,MAJe;AAKfC,EAAAA;AALe,CAAjB;;AAQA,SAASF,IAAT,CAAeG,MAAf,EAAuB;AACrB,SAAOF,MAAM,CAACE,MAAD,CAAN,CAAeC,QAAf,EAAP;AACD;;AAED,SAASH,MAAT,CAAiBE,MAAjB,EAAyB;AACvB,QAAME,GAAG,GAAG,IAAIZ,EAAJ,CAAO,CAAP,CAAZ;AACA,MAAIa,KAAK,GAAG,CAAZ;AACA,MAAIC,GAAJ;;AACA,SAAO,IAAP,EAAa;AACXA,IAAAA,GAAG,GAAGJ,MAAM,CAACH,IAAP,CAAY,CAAZ,EAAe,CAAf,CAAN;AACAK,IAAAA,GAAG,CAACG,GAAJ,CAAQ,IAAIf,EAAJ,CAAOc,GAAG,GAAG,IAAb,EAAmBE,IAAnB,CAAwBH,KAAxB,CAAR;;AACA,QAAIC,GAAG,IAAI,CAAP,KAAa,CAAjB,EAAoB;AAClB;AACD,KAFD,MAEO;AACLD,MAAAA,KAAK,IAAI,CAAT;AACD;AACF;;AACD,SAAOD,GAAP;AACD;;AAED,SAASH,KAAT,CAAgBQ,MAAhB,EAAwBP,MAAxB,EAAgC;AAC9B,QAAME,GAAG,GAAG,IAAIZ,EAAJ,CAAOiB,MAAP,CAAZ;;AACA,SAAO,IAAP,EAAa;AACX,UAAMC,CAAC,GAAGN,GAAG,CAACO,KAAJ,CAAU,CAAV,EAAaC,QAAb,EAAV;AACAR,IAAAA,GAAG,CAACS,KAAJ,CAAU,CAAV;;AACA,QAAIT,GAAG,CAACU,MAAJ,EAAJ,EAAkB;AAChBZ,MAAAA,MAAM,CAACD,KAAP,CAAa,CAACS,CAAD,CAAb;AACA;AACD,KAHD,MAGO;AACLR,MAAAA,MAAM,CAACD,KAAP,CAAa,CAACS,CAAC,GAAG,IAAL,CAAb;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASb,MAAT,CAAiBO,GAAjB,EAAsB;AACpB,QAAMF,MAAM,GAAG,IAAIR,IAAJ,EAAf;AACAO,EAAAA,KAAK,CAACG,GAAD,EAAMF,MAAN,CAAL;AACA,SAAOA,MAAM,CAACa,MAAd;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASjB,MAAT,CAAiBiB,MAAjB,EAAyB;AACvB,QAAMb,MAAM,GAAG,IAAIR,IAAJ,CAASqB,MAAT,CAAf;AACA,SAAOhB,IAAI,CAACG,MAAD,CAAX;AACD","sourcesContent":["const Bn = require('bn.js')\nconst Pipe = require('buffer-pipe')\n\nmodule.exports = {\n  encode,\n  decode,\n  read,\n  readBn,\n  write\n}\n\nfunction read (stream) {\n  return readBn(stream).toString()\n}\n\nfunction readBn (stream) {\n  const num = new Bn(0)\n  let shift = 0\n  let byt\n  while (true) {\n    byt = stream.read(1)[0]\n    num.ior(new Bn(byt & 0x7f).shln(shift))\n    if (byt >> 7 === 0) {\n      break\n    } else {\n      shift += 7\n    }\n  }\n  return num\n}\n\nfunction write (number, stream) {\n  const num = new Bn(number)\n  while (true) {\n    const i = num.maskn(7).toNumber()\n    num.ishrn(7)\n    if (num.isZero()) {\n      stream.write([i])\n      break\n    } else {\n      stream.write([i | 0x80])\n    }\n  }\n}\n\n/**\n * LEB128 encodeds an interger\n * @param {String|Number} num\n * @return {Buffer}\n */\nfunction encode (num) {\n  const stream = new Pipe()\n  write(num, stream)\n  return stream.buffer\n}\n\n/**\n * decodes a LEB128 encoded interger\n * @param {Buffer} buffer\n * @return {String}\n */\nfunction decode (buffer) {\n  const stream = new Pipe(buffer)\n  return read(stream)\n}\n"]},"metadata":{},"sourceType":"script"}