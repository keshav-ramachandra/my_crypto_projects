{"ast":null,"code":"import { getRenNetworkDetails, RenNetwork } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { StandardExplorer } from \"./networks\";\nimport { addressIsValid, transactionIsValid } from \"./utils\";\nexport const renBscTestnet = {\n  name: \"BSC Testnet\",\n  chain: \"bscTestnet\",\n  isTestnet: true,\n  chainLabel: \"BSC Testnet\",\n  networkID: 97,\n  addresses: {\n    GatewayRegistry: \"0x838F881876f53a772D2F8E2f8aa2e4a996431495\",\n    BasicAdapter: \"0x7de1253A8da6620351ec477b38BdC6a55FCd0f85\"\n  },\n  publicProvider: () => `https://data-seed-prebsc-1-s1.binance.org:8545/`,\n  explorer: StandardExplorer(\"https://testnet.bscscan.com\"),\n\n  /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n  infura: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n\n  /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n  etherscan: \"https://testnet.bscscan.com\"\n};\nexport const renBscDevnet = Object.assign(Object.assign({}, renBscTestnet), {\n  addresses: {\n    GatewayRegistry: \"0x87e83f957a2F3A2E5Fe16d5C6B22e38FD28bdc06\",\n    BasicAdapter: \"0x105435a9b0f375B179e5e43A16228C04F01Fb2ee\"\n  }\n});\nexport const renBscMainnet = {\n  name: \"BSC Mainnet\",\n  chain: \"bscMainnet\",\n  isTestnet: false,\n  chainLabel: \"BSC Mainnet\",\n  networkID: 56,\n  addresses: {\n    GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n    BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\"\n  },\n  publicProvider: () => `https://bsc-dataseed.binance.org`,\n  explorer: StandardExplorer(\"https://bscscan.com\"),\n\n  /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n  infura: \"https://bsc-dataseed.binance.org\",\n\n  /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n  etherscan: \"https://bscscan.com\"\n};\nexport const BscConfigMap = {\n  [RenNetwork.MainnetVDot3]: renBscMainnet,\n  [RenNetwork.TestnetVDot3]: renBscTestnet,\n  [RenNetwork.DevnetVDot3]: renBscDevnet\n};\n\nconst resolveBSCNetwork = renNetwork => {\n  if (!renNetwork) {\n    return BscConfigMap[RenNetwork.MainnetVDot3];\n  }\n\n  if (renNetwork.addresses) {\n    return renNetwork;\n  } else {\n    const details = getRenNetworkDetails( // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    renNetwork);\n    return details.isTestnet ? details.name === RenNetwork.DevnetVDot3 ? renBscDevnet : renBscTestnet : renBscMainnet;\n  }\n};\n\nexport class BinanceSmartChainClass extends EthereumClass {\n  constructor(web3Provider, renNetwork) {\n    // To be compatible with the Ethereum chain class, the first parameter\n    // is a web3Provider and the second the RenVM network. However,\n    super(web3Provider, resolveBSCNetwork(renNetwork));\n    this.chain = BinanceSmartChainClass.chain;\n    this.name = BinanceSmartChainClass.chain;\n    this.legacyName = undefined;\n    this.logRequestLimit = 5000;\n    this.configMap = BscConfigMap;\n    this.utils = utilsWithChainNetwork(BinanceSmartChainClass.utils, () => this.renNetworkDetails);\n\n    this.initialize = renNetwork => {\n      this.renNetworkDetails = this.renNetworkDetails || BscConfigMap[getRenNetworkDetails(renNetwork).name];\n\n      if (!this.renNetworkDetails) {\n        throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);\n      }\n\n      return this;\n    };\n  }\n\n}\nBinanceSmartChainClass.chain = \"BinanceSmartChain\";\nBinanceSmartChainClass.configMap = BscConfigMap;\nBinanceSmartChainClass.utils = {\n  resolveChainNetwork: resolveBSCNetwork,\n  addressIsValid,\n  transactionIsValid,\n  addressExplorerLink: (address, network) => `${(BinanceSmartChain.utils.resolveChainNetwork(network) || renBscMainnet).etherscan}/address/${address}`,\n  transactionExplorerLink: (transaction, network) => `${(BinanceSmartChain.utils.resolveChainNetwork(network) || renBscMainnet).etherscan}/tx/${transaction || \"\"}`\n}; // @dev Removes any static fields, except `utils`.\n\nexport const BinanceSmartChain = Callable(BinanceSmartChainClass);","map":{"version":3,"sources":["../../src/bsc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getRenNetworkDetails, RenNetwork, } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { StandardExplorer } from \"./networks\";\nimport { addressIsValid, transactionIsValid } from \"./utils\";\nexport const renBscTestnet = {\n    name: \"BSC Testnet\",\n    chain: \"bscTestnet\",\n    isTestnet: true,\n    chainLabel: \"BSC Testnet\",\n    networkID: 97,\n    addresses: {\n        GatewayRegistry: \"0x838F881876f53a772D2F8E2f8aa2e4a996431495\",\n        BasicAdapter: \"0x7de1253A8da6620351ec477b38BdC6a55FCd0f85\",\n    },\n    publicProvider: () => `https://data-seed-prebsc-1-s1.binance.org:8545/`,\n    explorer: StandardExplorer(\"https://testnet.bscscan.com\"),\n    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n    infura: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n    etherscan: \"https://testnet.bscscan.com\",\n};\nexport const renBscDevnet = Object.assign(Object.assign({}, renBscTestnet), { addresses: {\n        GatewayRegistry: \"0x87e83f957a2F3A2E5Fe16d5C6B22e38FD28bdc06\",\n        BasicAdapter: \"0x105435a9b0f375B179e5e43A16228C04F01Fb2ee\",\n    } });\nexport const renBscMainnet = {\n    name: \"BSC Mainnet\",\n    chain: \"bscMainnet\",\n    isTestnet: false,\n    chainLabel: \"BSC Mainnet\",\n    networkID: 56,\n    addresses: {\n        GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n        BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\",\n    },\n    publicProvider: () => `https://bsc-dataseed.binance.org`,\n    explorer: StandardExplorer(\"https://bscscan.com\"),\n    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */\n    infura: \"https://bsc-dataseed.binance.org\",\n    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */\n    etherscan: \"https://bscscan.com\",\n};\nexport const BscConfigMap = {\n    [RenNetwork.MainnetVDot3]: renBscMainnet,\n    [RenNetwork.TestnetVDot3]: renBscTestnet,\n    [RenNetwork.DevnetVDot3]: renBscDevnet,\n};\nconst resolveBSCNetwork = (renNetwork) => {\n    if (!renNetwork) {\n        return BscConfigMap[RenNetwork.MainnetVDot3];\n    }\n    if (renNetwork.addresses) {\n        return renNetwork;\n    }\n    else {\n        const details = getRenNetworkDetails(\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        renNetwork);\n        return details.isTestnet\n            ? details.name === RenNetwork.DevnetVDot3\n                ? renBscDevnet\n                : renBscTestnet\n            : renBscMainnet;\n    }\n};\nexport class BinanceSmartChainClass extends EthereumClass {\n    constructor(web3Provider, renNetwork) {\n        // To be compatible with the Ethereum chain class, the first parameter\n        // is a web3Provider and the second the RenVM network. However,\n        super(web3Provider, resolveBSCNetwork(renNetwork));\n        this.chain = BinanceSmartChainClass.chain;\n        this.name = BinanceSmartChainClass.chain;\n        this.legacyName = undefined;\n        this.logRequestLimit = 5000;\n        this.configMap = BscConfigMap;\n        this.utils = utilsWithChainNetwork(BinanceSmartChainClass.utils, () => this.renNetworkDetails);\n        this.initialize = (renNetwork) => {\n            this.renNetworkDetails =\n                this.renNetworkDetails ||\n                    BscConfigMap[getRenNetworkDetails(renNetwork).name];\n            if (!this.renNetworkDetails) {\n                throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);\n            }\n            return this;\n        };\n    }\n}\nBinanceSmartChainClass.chain = \"BinanceSmartChain\";\nBinanceSmartChainClass.configMap = BscConfigMap;\nBinanceSmartChainClass.utils = {\n    resolveChainNetwork: resolveBSCNetwork,\n    addressIsValid,\n    transactionIsValid,\n    addressExplorerLink: (address, network) => `${(BinanceSmartChain.utils.resolveChainNetwork(network) ||\n        renBscMainnet).etherscan}/address/${address}`,\n    transactionExplorerLink: (transaction, network) => `${(BinanceSmartChain.utils.resolveChainNetwork(network) ||\n        renBscMainnet).etherscan}/tx/${transaction || \"\"}`,\n};\n// @dev Removes any static fields, except `utils`.\nexport const BinanceSmartChain = Callable(BinanceSmartChainClass);\n//# sourceMappingURL=bsc.js.map"]},"metadata":{},"sourceType":"module"}