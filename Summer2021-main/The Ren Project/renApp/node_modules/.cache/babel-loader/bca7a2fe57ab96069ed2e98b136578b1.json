{"ast":null,"code":"import { Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { toCashAddress, isMainnetAddress, isTestnetAddress, isValidAddress } from \"bchaddrjs\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-cash\";\nimport base58 from \"bs58\";\nimport { BitcoinDotCom } from \"./APIs/bitcoinDotCom\";\nimport { Blockchair, BlockchairNetwork } from \"./APIs/blockchair\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { decodeBitcoinCashAddress } from \"./bchaddrjs\";\nexport class BitcoinCashClass extends BitcoinClass {\n  constructor() {\n    super(...arguments);\n    this.chain = BitcoinCashClass.chain;\n    this.name = BitcoinCashClass.chain;\n    this.legacyName = \"Bch\"; // APIs\n\n    this.withDefaultAPIs = network => {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return this.withAPI(BitcoinDotCom()).withAPI(Blockchair(BlockchairNetwork.BITCOIN_CASH));\n\n        case \"testnet\":\n          // prettier-ignore\n          return this.withAPI(BitcoinDotCom({\n            testnet: true\n          }));\n\n        case \"regtest\":\n          throw new Error(`Regtest is currently not supported.`);\n      }\n    };\n\n    this.asset = \"BCH\";\n    this.utils = utilsWithChainNetwork(BitcoinCashClass.utils, () => this.chainNetwork);\n    /**\n     * See [[LockChain.addressToBytes]].\n     */\n\n    this.addressToBytes = address => decodeBitcoinCashAddress(address);\n    /** @deprecated. Renamed to addressToBytes. */\n\n\n    this.addressStringToBytes = this.addressToBytes;\n  }\n\n}\nBitcoinCashClass.chain = \"BitcoinCash\";\nBitcoinCashClass.asset = \"BCH\";\nBitcoinCashClass.utils = {\n  resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n  p2shPrefix: {\n    mainnet: Buffer.from([0x05]),\n    testnet: Buffer.from([0xc4])\n  },\n  createAddress: createAddress(bytes => toCashAddress(base58.encode(bytes)), Networks, Opcode, Script),\n  calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n  addressIsValid: (address, network = \"mainnet\") => {\n    const btcNetwork = BitcoinCash.utils.resolveChainNetwork(network);\n    return isValidAddress(address) && (btcNetwork === \"mainnet\" ? isMainnetAddress(address) : btcNetwork === \"testnet\" ? isTestnetAddress(address) : true);\n  },\n  transactionIsValid: (transaction, _network = \"mainnet\") => isHex(typeof transaction === \"string\" ? transaction : transaction.txHash, {\n    length: 32\n  }),\n  addressExplorerLink: (address, network = \"mainnet\") => {\n    switch (BitcoinCash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return `https://explorer.bitcoin.com/bch/address/${address}`;\n\n      case \"testnet\":\n        return `https://explorer.bitcoin.com/tbch/address/${address}`;\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: (tx, network = \"mainnet\") => {\n    const txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (BitcoinCash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return `https://explorer.bitcoin.com/bch/tx/${txHash}`;\n\n      case \"testnet\":\n        return `https://explorer.bitcoin.com/tbch/tx/${txHash}`;\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport const BitcoinCash = Callable(BitcoinCashClass);\nconst _ = BitcoinCash;","map":{"version":3,"sources":["../../src/bitcoincash.ts"],"names":[],"mappings":"AAMA,SAAS,QAAT,EAAmB,KAAnB,EAA0B,qBAA1B,QAAuD,mBAAvD;AACA,SACI,aADJ,EAEI,gBAFJ,EAGI,gBAHJ,EAII,cAJJ,QAKO,WALP;AAMA,SAAS,QAAT,EAAmB,MAAnB,EAA2B,MAA3B,QAAyC,kBAAzC;AACA,OAAO,MAAP,MAAmB,MAAnB;AACA,SAAS,aAAT,QAA8B,sBAA9B;AACA,SAAS,UAAT,EAAqB,iBAArB,QAA8C,mBAA9C;AAGA,SAAS,YAAT,QAA6B,WAA7B;AACA,SAAS,aAAT,EAAwB,YAAxB,QAA4C,UAA5C;AACA,SAAS,wBAAT,QAAyC,aAAzC;AAEA,OAAM,MAAO,gBAAP,SAAgC,YAAhC,CAA4C;AAAlD,EAAA,WAAA,GAAA;;AAEW,SAAA,KAAA,GAAQ,gBAAgB,CAAC,KAAzB;AACA,SAAA,IAAA,GAAO,gBAAgB,CAAC,KAAxB;AACA,SAAA,UAAA,GAAa,KAAb,CAJX,CAMI;;AACO,SAAA,eAAA,GAAmB,OAAD,IAA8B;AACnD,cAAQ,OAAR;AACI,aAAK,SAAL;AACI;AACA,iBAAO,KACF,OADE,CACM,aAAa,EADnB,EAEF,OAFE,CAEM,UAAU,CAAC,iBAAiB,CAAC,YAAnB,CAFhB,CAAP;;AAGJ,aAAK,SAAL;AACI;AACA,iBAAO,KACF,OADE,CACM,aAAa,CAAC;AAAE,YAAA,OAAO,EAAE;AAAX,WAAD,CADnB,CAAP;;AAEJ,aAAK,SAAL;AACI,gBAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;AAXR;AAaH,KAdM;;AAiBA,SAAA,KAAA,GAAQ,KAAR;AAuFA,SAAA,KAAA,GAAQ,qBAAqB,CAChC,gBAAgB,CAAC,KADe,EAEhC,MAAM,KAAK,YAFqB,CAA7B;AAKP;;AAEG;;AACH,SAAA,cAAA,GAAkB,OAAD,IACb,wBAAwB,CAAC,OAAD,CAD5B;AAGA;;;AACA,SAAA,oBAAA,GAAuB,KAAK,cAA5B;AACH;;AA5HiD;AAChC,gBAAA,CAAA,KAAA,GAAQ,aAAR;AAsBA,gBAAA,CAAA,KAAA,GAAQ,KAAR;AAEA,gBAAA,CAAA,KAAA,GAAQ;AAClB,EAAA,mBAAmB,EAAE,YAAY,CAAC,KAAb,CAAmB,mBADtB;AAElB,EAAA,UAAU,EAAE;AACR,IAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,CAAZ,CADD;AAER,IAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,CAAC,IAAD,CAAZ;AAFD,GAFM;AAMlB,EAAA,aAAa,EAAE,aAAa,CACvB,KAAD,IAAmB,aAAa,CAAC,MAAM,CAAC,MAAP,CAAc,KAAd,CAAD,CADR,EAExB,QAFwB,EAGxB,MAHwB,EAIxB,MAJwB,CANV;AAYlB,EAAA,qBAAqB,EAAE,YAAY,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAZjB;AAalB,EAAA,cAAc,EAAE,CACZ,OADY,EAEZ,OAAA,GAImB,SANP,KAOZ;AACA,UAAM,UAAU,GAAG,WAAW,CAAC,KAAZ,CAAkB,mBAAlB,CAAsC,OAAtC,CAAnB;AACA,WACI,cAAc,CAAC,OAAD,CAAd,KACC,UAAU,KAAK,SAAf,GACK,gBAAgB,CAAC,OAAD,CADrB,GAEK,UAAU,KAAK,SAAf,GACA,gBAAgB,CAAC,OAAD,CADhB,GAEA,IALN,CADJ;AAQH,GA9BiB;AAgClB,EAAA,kBAAkB,EAAE,CAChB,WADgB,EAEhB,QAAA,GAImB,SANH,KAQhB,KAAK,CACD,OAAO,WAAP,KAAuB,QAAvB,GACM,WADN,GAEM,WAAW,CAAC,MAHjB,EAID;AAAE,IAAA,MAAM,EAAE;AAAV,GAJC,CAxCS;AA+ClB,EAAA,mBAAmB,EAAE,CACjB,OADiB,EAEjB,OAAA,GAImB,SANF,KAOG;AACpB,YAAQ,WAAW,CAAC,KAAZ,CAAkB,mBAAlB,CAAsC,OAAtC,CAAR;AACI,WAAK,SAAL;AACI,eAAO,4CAA4C,OAAO,EAA1D;;AACJ,WAAK,SAAL;AACI,eAAO,6CAA6C,OAAO,EAA3D;;AACJ,WAAK,SAAL;AACI,eAAO,SAAP;AANR;AAQH,GA/DiB;AAiElB,EAAA,uBAAuB,EAAE,CACrB,EADqB,EAErB,OAAA,GAImB,SANE,KAOD;AACpB,UAAM,MAAM,GAAG,OAAO,EAAP,KAAc,QAAd,GAAyB,EAAzB,GAA8B,EAAE,CAAC,MAAhD;;AAEA,YAAQ,WAAW,CAAC,KAAZ,CAAkB,mBAAlB,CAAsC,OAAtC,CAAR;AACI,WAAK,SAAL;AACI,eAAO,uCAAuC,MAAM,EAApD;;AACJ,WAAK,SAAL;AACI,eAAO,wCAAwC,MAAM,EAArD;;AACJ,WAAK,SAAL;AACI,eAAO,SAAP;AANR;AAQH;AAnFiB,CAAR;AAsGlB,OAAO,MAAM,WAAW,GAAG,QAAQ,CAAC,gBAAD,CAA5B;AAEP,MAAM,CAAC,GAAwD,WAA/D","sourceRoot":"","sourcesContent":["import { Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { toCashAddress, isMainnetAddress, isTestnetAddress, isValidAddress, } from \"bchaddrjs\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-cash\";\nimport base58 from \"bs58\";\nimport { BitcoinDotCom } from \"./APIs/bitcoinDotCom\";\nimport { Blockchair, BlockchairNetwork } from \"./APIs/blockchair\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { decodeBitcoinCashAddress } from \"./bchaddrjs\";\nexport class BitcoinCashClass extends BitcoinClass {\n    constructor() {\n        super(...arguments);\n        this.chain = BitcoinCashClass.chain;\n        this.name = BitcoinCashClass.chain;\n        this.legacyName = \"Bch\";\n        // APIs\n        this.withDefaultAPIs = (network) => {\n            switch (network) {\n                case \"mainnet\":\n                    // prettier-ignore\n                    return this\n                        .withAPI(BitcoinDotCom())\n                        .withAPI(Blockchair(BlockchairNetwork.BITCOIN_CASH));\n                case \"testnet\":\n                    // prettier-ignore\n                    return this\n                        .withAPI(BitcoinDotCom({ testnet: true }));\n                case \"regtest\":\n                    throw new Error(`Regtest is currently not supported.`);\n            }\n        };\n        this.asset = \"BCH\";\n        this.utils = utilsWithChainNetwork(BitcoinCashClass.utils, () => this.chainNetwork);\n        /**\n         * See [[LockChain.addressToBytes]].\n         */\n        this.addressToBytes = (address) => decodeBitcoinCashAddress(address);\n        /** @deprecated. Renamed to addressToBytes. */\n        this.addressStringToBytes = this.addressToBytes;\n    }\n}\nBitcoinCashClass.chain = \"BitcoinCash\";\nBitcoinCashClass.asset = \"BCH\";\nBitcoinCashClass.utils = {\n    resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n    p2shPrefix: {\n        mainnet: Buffer.from([0x05]),\n        testnet: Buffer.from([0xc4]),\n    },\n    createAddress: createAddress((bytes) => toCashAddress(base58.encode(bytes)), Networks, Opcode, Script),\n    calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n    addressIsValid: (address, network = \"mainnet\") => {\n        const btcNetwork = BitcoinCash.utils.resolveChainNetwork(network);\n        return (isValidAddress(address) &&\n            (btcNetwork === \"mainnet\"\n                ? isMainnetAddress(address)\n                : btcNetwork === \"testnet\"\n                    ? isTestnetAddress(address)\n                    : true));\n    },\n    transactionIsValid: (transaction, _network = \"mainnet\") => isHex(typeof transaction === \"string\"\n        ? transaction\n        : transaction.txHash, { length: 32 }),\n    addressExplorerLink: (address, network = \"mainnet\") => {\n        switch (BitcoinCash.utils.resolveChainNetwork(network)) {\n            case \"mainnet\":\n                return `https://explorer.bitcoin.com/bch/address/${address}`;\n            case \"testnet\":\n                return `https://explorer.bitcoin.com/tbch/address/${address}`;\n            case \"regtest\":\n                return undefined;\n        }\n    },\n    transactionExplorerLink: (tx, network = \"mainnet\") => {\n        const txHash = typeof tx === \"string\" ? tx : tx.txHash;\n        switch (BitcoinCash.utils.resolveChainNetwork(network)) {\n            case \"mainnet\":\n                return `https://explorer.bitcoin.com/bch/tx/${txHash}`;\n            case \"testnet\":\n                return `https://explorer.bitcoin.com/tbch/tx/${txHash}`;\n            case \"regtest\":\n                return undefined;\n        }\n    },\n};\nexport const BitcoinCash = Callable(BitcoinCashClass);\nconst _ = BitcoinCash;\n//# sourceMappingURL=bitcoincash.js.map"]},"metadata":{},"sourceType":"module"}