{"ast":null,"code":"import { Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport base58 from \"bs58\";\nimport { Insight } from \"./APIs/insight\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { validateAddress } from \"./utils\";\nexport class DigiByteClass extends BitcoinClass {\n  constructor() {\n    super(...arguments);\n    this.chain = DigiByteClass.chain;\n    this.name = DigiByteClass.chain; // APIs\n\n    this.withDefaultAPIs = network => {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return this.withAPI(Insight(\"https://multichain-web-proxy.herokuapp.com/digibyte-mainnet\")).withAPI(Insight(\"https://digiexplorer.info/api\")).withAPI(Insight(\"https://insight.digibyte.host/api\"));\n\n        case \"testnet\":\n          // prettier-ignore\n          return this.withAPI(Insight(\"https://testnetexplorer.digibyteservers.io/api\"));\n\n        case \"regtest\":\n          throw new Error(`Regtest is currently not supported.`);\n      }\n    };\n\n    this.asset = DigiByteClass.asset;\n    this.utils = utilsWithChainNetwork(DigiByteClass.utils, () => this.chainNetwork);\n  }\n\n}\nDigiByteClass.chain = \"DigiByte\";\nDigiByteClass.asset = \"DGB\";\nDigiByteClass.utils = {\n  resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n  p2shPrefix: {\n    // Source: https://github.com/digicontributer/digibyte-js/blob/27156cd1cb4430c4a4959f46e809629846694434/lib/networks.js\n    mainnet: Buffer.from([0x3f]),\n    testnet: Buffer.from([0x8c])\n  },\n  createAddress: createAddress(base58.encode),\n  calculatePubKeyScript: pubKeyScript(),\n  addressIsValid: (address, network = \"mainnet\") => validateAddress(address, DigiByteClass.asset, DigiByte.utils.resolveChainNetwork(network)),\n  transactionIsValid: (transaction, _network = \"mainnet\") => isHex(typeof transaction === \"string\" ? transaction : transaction.txHash, {\n    length: 32\n  }),\n  addressExplorerLink: (address, network = \"mainnet\") => {\n    switch (DigiByte.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return `https://digiexplorer.info/address/${address}`;\n\n      case \"testnet\":\n        return `https://testnetexplorer.digibyteservers.io/address/${address}`;\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: (tx, network = \"mainnet\") => {\n    const txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (DigiByte.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return `https://digiexplorer.info/tx/${txHash}`;\n\n      case \"testnet\":\n        return `https://testnetexplorer.digibyteservers.io/tx/${txHash}`;\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport const DigiByte = Callable(DigiByteClass);\nconst _ = DigiByte;","map":{"version":3,"sources":["../../src/digibyte.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Callable, isHex, utilsWithChainNetwork } from \"@renproject/utils\";\nimport base58 from \"bs58\";\nimport { Insight } from \"./APIs/insight\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { validateAddress } from \"./utils\";\nexport class DigiByteClass extends BitcoinClass {\n    constructor() {\n        super(...arguments);\n        this.chain = DigiByteClass.chain;\n        this.name = DigiByteClass.chain;\n        // APIs\n        this.withDefaultAPIs = (network) => {\n            switch (network) {\n                case \"mainnet\":\n                    // prettier-ignore\n                    return this\n                        .withAPI(Insight(\"https://multichain-web-proxy.herokuapp.com/digibyte-mainnet\"))\n                        .withAPI(Insight(\"https://digiexplorer.info/api\"))\n                        .withAPI(Insight(\"https://insight.digibyte.host/api\"));\n                case \"testnet\":\n                    // prettier-ignore\n                    return this\n                        .withAPI(Insight(\"https://testnetexplorer.digibyteservers.io/api\"));\n                case \"regtest\":\n                    throw new Error(`Regtest is currently not supported.`);\n            }\n        };\n        this.asset = DigiByteClass.asset;\n        this.utils = utilsWithChainNetwork(DigiByteClass.utils, () => this.chainNetwork);\n    }\n}\nDigiByteClass.chain = \"DigiByte\";\nDigiByteClass.asset = \"DGB\";\nDigiByteClass.utils = {\n    resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n    p2shPrefix: {\n        // Source: https://github.com/digicontributer/digibyte-js/blob/27156cd1cb4430c4a4959f46e809629846694434/lib/networks.js\n        mainnet: Buffer.from([0x3f]),\n        testnet: Buffer.from([0x8c]),\n    },\n    createAddress: createAddress(base58.encode),\n    calculatePubKeyScript: pubKeyScript(),\n    addressIsValid: (address, network = \"mainnet\") => validateAddress(address, DigiByteClass.asset, DigiByte.utils.resolveChainNetwork(network)),\n    transactionIsValid: (transaction, _network = \"mainnet\") => isHex(typeof transaction === \"string\"\n        ? transaction\n        : transaction.txHash, { length: 32 }),\n    addressExplorerLink: (address, network = \"mainnet\") => {\n        switch (DigiByte.utils.resolveChainNetwork(network)) {\n            case \"mainnet\":\n                return `https://digiexplorer.info/address/${address}`;\n            case \"testnet\":\n                return `https://testnetexplorer.digibyteservers.io/address/${address}`;\n            case \"regtest\":\n                return undefined;\n        }\n    },\n    transactionExplorerLink: (tx, network = \"mainnet\") => {\n        const txHash = typeof tx === \"string\" ? tx : tx.txHash;\n        switch (DigiByte.utils.resolveChainNetwork(network)) {\n            case \"mainnet\":\n                return `https://digiexplorer.info/tx/${txHash}`;\n            case \"testnet\":\n                return `https://testnetexplorer.digibyteservers.io/tx/${txHash}`;\n            case \"regtest\":\n                return undefined;\n        }\n    },\n};\nexport const DigiByte = Callable(DigiByteClass);\nconst _ = DigiByte;\n//# sourceMappingURL=digibyte.js.map"]},"metadata":{},"sourceType":"module"}