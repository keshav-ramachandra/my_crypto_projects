{"ast":null,"code":"export var RPCMethod;\n\n(function (RPCMethod) {\n  // MethodSubmitTx submits a new transaction to the Darknode for acceptance\n  // into the transaction pool.\n  RPCMethod[\"MethodSubmitTx\"] = \"ren_submitTx\"; // MethodQueryTx returns the latest information about a transaction\n  // identified by a transaction hash.\n\n  RPCMethod[\"MethodQueryTx\"] = \"ren_queryTx\"; // MethodQueryTxs returns pages of transactions with optional filtering by\n  // status and tags.\n\n  RPCMethod[\"MethodQueryTxs\"] = \"ren_queryTxs\"; // MethodQueryBlock returns a block identified by the block height.\n\n  RPCMethod[\"MethodQueryBlock\"] = \"ren_queryBlock\"; // MethodQueryBlocks returns recently committed blocks.\n\n  RPCMethod[\"MethodQueryBlocks\"] = \"ren_queryBlocks\"; // MethodQueryNumPeers returns the number of known peers.\n\n  RPCMethod[\"MethodQueryNumPeers\"] = \"ren_queryNumPeers\"; // MethodQueryPeers returns a random subset of known peers.\n\n  RPCMethod[\"MethodQueryPeers\"] = \"ren_queryPeers\"; // MethodQueryShards returns information about the currently online/offline\n  // Shards.\n\n  RPCMethod[\"MethodQueryShards\"] = \"ren_queryShards\"; // MethodQueryStat returns status information about the Darknode. This\n  // information cannot be verified.\n\n  RPCMethod[\"MethodQueryStat\"] = \"ren_queryStat\"; // MethodQueryFees returns information about the current RenVM fees and\n  // underlying blockchain fees. This information cannot be verified.\n\n  RPCMethod[\"MethodQueryFees\"] = \"ren_queryFees\";\n})(RPCMethod || (RPCMethod = {})); // The following lines will throw a type error if RenVMResponses or RenVMParams\n// aren't defined for all RPC methods.\n// type _responsesCheck = RenVMResponses[RPCMethod];\n// type _paramsCheck = RenVMParams[RPCMethod];\n\n\n() => {};\n\n() => {};","map":{"version":3,"sources":["../../../src/v1/methods.ts"],"names":[],"mappings":"AAYA,OAAA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;AACjB;AACA;AACA,EAAA,SAAA,CAAA,gBAAA,CAAA,GAAA,cAAA,CAHiB,CAIjB;AACA;;AACA,EAAA,SAAA,CAAA,eAAA,CAAA,GAAA,aAAA,CANiB,CAOjB;AACA;;AACA,EAAA,SAAA,CAAA,gBAAA,CAAA,GAAA,cAAA,CATiB,CAWjB;;AACA,EAAA,SAAA,CAAA,kBAAA,CAAA,GAAA,gBAAA,CAZiB,CAajB;;AACA,EAAA,SAAA,CAAA,mBAAA,CAAA,GAAA,iBAAA,CAdiB,CAgBjB;;AACA,EAAA,SAAA,CAAA,qBAAA,CAAA,GAAA,mBAAA,CAjBiB,CAkBjB;;AACA,EAAA,SAAA,CAAA,kBAAA,CAAA,GAAA,gBAAA,CAnBiB,CAqBjB;AACA;;AACA,EAAA,SAAA,CAAA,mBAAA,CAAA,GAAA,iBAAA,CAvBiB,CAyBjB;AACA;;AACA,EAAA,SAAA,CAAA,iBAAA,CAAA,GAAA,eAAA,CA3BiB,CA6BjB;AACA;;AACA,EAAA,SAAA,CAAA,iBAAA,CAAA,GAAA,eAAA;AACH,CAhCD,EAAY,SAAS,KAAT,SAAS,GAAA,EAAA,CAArB,E,CAqRA;AACA;AACA;AACA;;;AACA,MAAoC,CAAG,CAAvC;;AACA,MAAuC,CAAG,CAA1C","sourceRoot":"","sourcesContent":["export var RPCMethod;\n(function (RPCMethod) {\n    // MethodSubmitTx submits a new transaction to the Darknode for acceptance\n    // into the transaction pool.\n    RPCMethod[\"MethodSubmitTx\"] = \"ren_submitTx\";\n    // MethodQueryTx returns the latest information about a transaction\n    // identified by a transaction hash.\n    RPCMethod[\"MethodQueryTx\"] = \"ren_queryTx\";\n    // MethodQueryTxs returns pages of transactions with optional filtering by\n    // status and tags.\n    RPCMethod[\"MethodQueryTxs\"] = \"ren_queryTxs\";\n    // MethodQueryBlock returns a block identified by the block height.\n    RPCMethod[\"MethodQueryBlock\"] = \"ren_queryBlock\";\n    // MethodQueryBlocks returns recently committed blocks.\n    RPCMethod[\"MethodQueryBlocks\"] = \"ren_queryBlocks\";\n    // MethodQueryNumPeers returns the number of known peers.\n    RPCMethod[\"MethodQueryNumPeers\"] = \"ren_queryNumPeers\";\n    // MethodQueryPeers returns a random subset of known peers.\n    RPCMethod[\"MethodQueryPeers\"] = \"ren_queryPeers\";\n    // MethodQueryShards returns information about the currently online/offline\n    // Shards.\n    RPCMethod[\"MethodQueryShards\"] = \"ren_queryShards\";\n    // MethodQueryStat returns status information about the Darknode. This\n    // information cannot be verified.\n    RPCMethod[\"MethodQueryStat\"] = \"ren_queryStat\";\n    // MethodQueryFees returns information about the current RenVM fees and\n    // underlying blockchain fees. This information cannot be verified.\n    RPCMethod[\"MethodQueryFees\"] = \"ren_queryFees\";\n})(RPCMethod || (RPCMethod = {}));\n// The following lines will throw a type error if RenVMResponses or RenVMParams\n// aren't defined for all RPC methods.\n// type _responsesCheck = RenVMResponses[RPCMethod];\n// type _paramsCheck = RenVMParams[RPCMethod];\n() => { };\n() => { };\n//# sourceMappingURL=methods.js.map"]},"metadata":{},"sourceType":"module"}