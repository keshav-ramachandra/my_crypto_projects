{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Callable } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\"; // Default timeout for network requests.\n\nconst SECONDS = 1000;\nexport const DEFAULT_TIMEOUT = 30 * SECONDS;\n/**\n * sortUTXOs compares two UTXOs by amount, then confirmations and then hash.\n *\n * @example\n * sortUTXOs({amount: 1, confirmations: 1}, {amount: 2, confirmations: 0});\n * // -1, representing that the first parameter should be ordered first.\n *\n * @returns a negative value to represent that a should come before b or a\n * positive value to represent that b should come before a.\n */\n\nexport const sortUTXOs = (a, b) => {\n  const aAmount = new BigNumber(a.amount);\n  const bAmount = new BigNumber(b.amount); // Sort greater values first.\n\n  return !aAmount.isEqualTo(bAmount) ? bAmount.minus(aAmount).toNumber() : // If the UTXOs have the same value, sort by number of confirmations.\n  a.confirmations !== b.confirmations ? a.confirmations - b.confirmations : // Fallback so sorting by txHash alphabetically.\n  a.txHash <= b.txHash ? -1 : 1;\n};\n/**\n * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest\n * unit, e.g. `10000` sats.\n *\n * @example\n * fixValue(0.0001, 8) = 10000;\n *\n * @param value Value in the readable representation, e.g. `0.0001` BTC.\n * @param decimals The number of decimals to shift by, e.g. 8.\n */\n\nexport const fixValue = (value, decimals) => new BigNumber(value).multipliedBy(new BigNumber(10).exponentiatedBy(decimals)).decimalPlaces(0);\n/**\n * fixUTXO calls {{fixValue}} on the value of the UTXO.\n */\n\nexport const fixUTXO = (utxo, decimals) => Object.assign(Object.assign({}, utxo), {\n  amount: fixValue(utxo.amount, decimals).toFixed()\n});\n/**\n * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.\n */\n\nexport const fixUTXOs = (utxos, decimals) => utxos.map(utxo => fixUTXO(utxo, decimals));\n\nconst notNull = x => {\n  if (x === undefined || x === null) {\n    throw new Error(`Unexpected ${String(x)} value.`);\n  }\n\n  return x;\n};\n\nconst withPriority = (api, defaultPriority = 0) => api.api && api.priority !== undefined ? api : {\n  api: api,\n  priority: defaultPriority\n};\n\nexport class CombinedAPIClass {\n  constructor(apis = [], {\n    priority = 0\n  } = {}) {\n    /**\n     * Provide a new API to be used with the other APIs.\n     *\n     * @param api\n     * @param { priority } Optionally set the priority of the API, where a lower\n     * priority means it will be selected before other APIs.\n     */\n    this.withAPI = (api, {\n      priority = 0\n    } = {}) => {\n      this.apis.push(withPriority(api, priority));\n      return this;\n    };\n\n    this.fetchUTXO = (txHash, vOut) => __awaiter(this, void 0, void 0, function* () {\n      return this.forEachAPI( // Filter APIs with `fetchUTXO`.\n      api => api.fetchUTXO !== undefined, // Call `fetchUTXO` on the API.\n      api => __awaiter(this, void 0, void 0, function* () {\n        return notNull(api.fetchUTXO)(txHash, vOut);\n      }));\n    });\n\n    this.fetchUTXOs = (address, confirmations) => __awaiter(this, void 0, void 0, function* () {\n      return this.forEachAPI( // Filter APIs with `fetchUTXOs`.\n      api => api.fetchUTXOs !== undefined, // Call `fetchUTXOs` on the API.\n      api => __awaiter(this, void 0, void 0, function* () {\n        return notNull(api.fetchUTXOs)(address, confirmations);\n      }));\n    });\n\n    this.fetchTXs = (address, confirmations) => __awaiter(this, void 0, void 0, function* () {\n      return this.forEachAPI( // Filter APIs with `fetchTXs`.\n      api => api.fetchTXs !== undefined, // Call `fetchTXs` on the API.\n      api => __awaiter(this, void 0, void 0, function* () {\n        return notNull(api.fetchTXs)(address, confirmations);\n      }));\n    });\n\n    this.broadcastTransaction = hex => __awaiter(this, void 0, void 0, function* () {\n      return this.forEachAPI( // Filter APIs with `broadcastTransaction`.\n      api => api.broadcastTransaction !== undefined, // Call `broadcastTransaction` on the API.\n      api => __awaiter(this, void 0, void 0, function* () {\n        return notNull(api.broadcastTransaction)(hex);\n      }));\n    });\n\n    this.forEachAPI = (filter, onAPI) => __awaiter(this, void 0, void 0, function* () {\n      const apis = this.apis.map((api, index) => ({\n        api,\n        index\n      })).filter(({\n        api\n      }) => filter(api.api)).sort(({\n        api: a\n      }, {\n        api: b\n      }) => // Sort by priority, and randomly for the same priority.\n      a.priority !== b.priority ? a.priority - b.priority : Math.random() * 2 - 1);\n\n      if (!apis.length) {\n        throw new Error(`No API available for call.`);\n      }\n\n      let firstError;\n      const previousIndices = [];\n\n      for (const {\n        api,\n        index\n      } of apis) {\n        try {\n          const result = yield onAPI(api.api); // If any previous API failed, it may be down or rate limited,\n          // so its priority is reduced.\n\n          for (const previousIndex of previousIndices) {\n            this.apis[previousIndex].priority -= 5;\n          }\n\n          return result;\n        } catch (error) {\n          previousIndices.push(index);\n          firstError = firstError || error;\n        }\n      }\n\n      throw firstError;\n    });\n\n    this.apis = apis.map(api => withPriority(api, priority));\n  }\n\n}\nexport const CombinedAPI = Callable(CombinedAPIClass);","map":{"version":3,"sources":["../../../src/APIs/API.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Callable } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\";\n// Default timeout for network requests.\nconst SECONDS = 1000;\nexport const DEFAULT_TIMEOUT = 30 * SECONDS;\n/**\n * sortUTXOs compares two UTXOs by amount, then confirmations and then hash.\n *\n * @example\n * sortUTXOs({amount: 1, confirmations: 1}, {amount: 2, confirmations: 0});\n * // -1, representing that the first parameter should be ordered first.\n *\n * @returns a negative value to represent that a should come before b or a\n * positive value to represent that b should come before a.\n */\nexport const sortUTXOs = (a, b) => {\n    const aAmount = new BigNumber(a.amount);\n    const bAmount = new BigNumber(b.amount);\n    // Sort greater values first.\n    return !aAmount.isEqualTo(bAmount)\n        ? bAmount.minus(aAmount).toNumber()\n        : // If the UTXOs have the same value, sort by number of confirmations.\n            a.confirmations !== b.confirmations\n                ? a.confirmations - b.confirmations\n                : // Fallback so sorting by txHash alphabetically.\n                    a.txHash <= b.txHash\n                        ? -1\n                        : 1;\n};\n/**\n * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest\n * unit, e.g. `10000` sats.\n *\n * @example\n * fixValue(0.0001, 8) = 10000;\n *\n * @param value Value in the readable representation, e.g. `0.0001` BTC.\n * @param decimals The number of decimals to shift by, e.g. 8.\n */\nexport const fixValue = (value, decimals) => new BigNumber(value)\n    .multipliedBy(new BigNumber(10).exponentiatedBy(decimals))\n    .decimalPlaces(0);\n/**\n * fixUTXO calls {{fixValue}} on the value of the UTXO.\n */\nexport const fixUTXO = (utxo, decimals) => (Object.assign(Object.assign({}, utxo), { amount: fixValue(utxo.amount, decimals).toFixed() }));\n/**\n * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.\n */\nexport const fixUTXOs = (utxos, decimals) => utxos.map((utxo) => fixUTXO(utxo, decimals));\nconst notNull = (x) => {\n    if (x === undefined || x === null) {\n        throw new Error(`Unexpected ${String(x)} value.`);\n    }\n    return x;\n};\nconst withPriority = (api, defaultPriority = 0) => api.api &&\n    api.priority !== undefined\n    ? api\n    : { api: api, priority: defaultPriority };\nexport class CombinedAPIClass {\n    constructor(apis = [], { priority = 0 } = {}) {\n        /**\n         * Provide a new API to be used with the other APIs.\n         *\n         * @param api\n         * @param { priority } Optionally set the priority of the API, where a lower\n         * priority means it will be selected before other APIs.\n         */\n        this.withAPI = (api, { priority = 0 } = {}) => {\n            this.apis.push(withPriority(api, priority));\n            return this;\n        };\n        this.fetchUTXO = (txHash, vOut) => __awaiter(this, void 0, void 0, function* () {\n            return this.forEachAPI(\n            // Filter APIs with `fetchUTXO`.\n            (api) => api.fetchUTXO !== undefined, \n            // Call `fetchUTXO` on the API.\n            (api) => __awaiter(this, void 0, void 0, function* () { return notNull(api.fetchUTXO)(txHash, vOut); }));\n        });\n        this.fetchUTXOs = (address, confirmations) => __awaiter(this, void 0, void 0, function* () {\n            return this.forEachAPI(\n            // Filter APIs with `fetchUTXOs`.\n            (api) => api.fetchUTXOs !== undefined, \n            // Call `fetchUTXOs` on the API.\n            (api) => __awaiter(this, void 0, void 0, function* () { return notNull(api.fetchUTXOs)(address, confirmations); }));\n        });\n        this.fetchTXs = (address, confirmations) => __awaiter(this, void 0, void 0, function* () {\n            return this.forEachAPI(\n            // Filter APIs with `fetchTXs`.\n            (api) => api.fetchTXs !== undefined, \n            // Call `fetchTXs` on the API.\n            (api) => __awaiter(this, void 0, void 0, function* () { return notNull(api.fetchTXs)(address, confirmations); }));\n        });\n        this.broadcastTransaction = (hex) => __awaiter(this, void 0, void 0, function* () {\n            return this.forEachAPI(\n            // Filter APIs with `broadcastTransaction`.\n            (api) => api.broadcastTransaction !== undefined, \n            // Call `broadcastTransaction` on the API.\n            (api) => __awaiter(this, void 0, void 0, function* () { return notNull(api.broadcastTransaction)(hex); }));\n        });\n        this.forEachAPI = (filter, onAPI) => __awaiter(this, void 0, void 0, function* () {\n            const apis = this.apis\n                .map((api, index) => ({ api, index }))\n                .filter(({ api }) => filter(api.api))\n                .sort(({ api: a }, { api: b }) => \n            // Sort by priority, and randomly for the same priority.\n            a.priority !== b.priority\n                ? a.priority - b.priority\n                : Math.random() * 2 - 1);\n            if (!apis.length) {\n                throw new Error(`No API available for call.`);\n            }\n            let firstError;\n            const previousIndices = [];\n            for (const { api, index } of apis) {\n                try {\n                    const result = yield onAPI(api.api);\n                    // If any previous API failed, it may be down or rate limited,\n                    // so its priority is reduced.\n                    for (const previousIndex of previousIndices) {\n                        this.apis[previousIndex].priority -= 5;\n                    }\n                    return result;\n                }\n                catch (error) {\n                    previousIndices.push(index);\n                    firstError = firstError || error;\n                }\n            }\n            throw firstError;\n        });\n        this.apis = apis.map((api) => withPriority(api, priority));\n    }\n}\nexport const CombinedAPI = Callable(CombinedAPIClass);\n//# sourceMappingURL=API.js.map"]},"metadata":{},"sourceType":"module"}