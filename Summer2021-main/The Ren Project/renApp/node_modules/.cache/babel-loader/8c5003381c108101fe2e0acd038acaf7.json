{"ast":null,"code":"export var LockAndMintStatus;\n\n(function (LockAndMintStatus) {\n  LockAndMintStatus[\"Committed\"] = \"mint_committed\";\n  LockAndMintStatus[\"Deposited\"] = \"mint_deposited\";\n  LockAndMintStatus[\"Confirmed\"] = \"mint_confirmed\";\n  LockAndMintStatus[\"SubmittedToRenVM\"] = \"mint_submittedToRenVM\";\n  LockAndMintStatus[\"ReturnedFromRenVM\"] = \"mint_returnedFromRenVM\";\n  LockAndMintStatus[\"SubmittedToLockChain\"] = \"mint_submittedToLockChain\";\n  LockAndMintStatus[\"ConfirmedOnLockChain\"] = \"mint_confirmedOnLockChain\"; // Backwards compatibility\n\n  LockAndMintStatus[\"SubmittedToEthereum\"] = \"mint_submittedToEthereum\";\n  LockAndMintStatus[\"ConfirmedOnEthereum\"] = \"mint_confirmedOnEthereum\";\n})(LockAndMintStatus || (LockAndMintStatus = {}));\n\nexport var BurnAndReleaseStatus;\n\n(function (BurnAndReleaseStatus) {\n  BurnAndReleaseStatus[\"Committed\"] = \"burn_committed\";\n  BurnAndReleaseStatus[\"SubmittedToLockChain\"] = \"burn_submittedToLockChain\";\n  BurnAndReleaseStatus[\"ConfirmedOnLockChain\"] = \"burn_confirmedOnLockChain\";\n  BurnAndReleaseStatus[\"SubmittedToRenVM\"] = \"burn_submittedToRenVM\";\n  BurnAndReleaseStatus[\"ReturnedFromRenVM\"] = \"burn_returnedFromRenVM\";\n  BurnAndReleaseStatus[\"NoBurnFound\"] = \"burn_noBurnFound\"; // Backwards compatibility\n\n  BurnAndReleaseStatus[\"SubmittedToEthereum\"] = \"burn_submittedToEthereum\";\n  BurnAndReleaseStatus[\"ConfirmedOnEthereum\"] = \"burn_confirmedOnEthereum\";\n})(BurnAndReleaseStatus || (BurnAndReleaseStatus = {}));\n\nexport var TxStatus;\n\n(function (TxStatus) {\n  // TxStatusNil is used for transactions that have not been seen, or are\n  // otherwise unknown.\n  TxStatus[\"TxStatusNil\"] = \"nil\"; // TxStatusConfirming is used for transactions that are currently waiting\n  // for their underlying blockchain transactions to be confirmed.\n\n  TxStatus[\"TxStatusConfirming\"] = \"confirming\"; // TxStatusPending is used for transactions that are waiting for consensus\n  // to be reached on when the transaction should be executed.\n\n  TxStatus[\"TxStatusPending\"] = \"pending\"; // TxStatusExecuting is used for transactions that are currently being\n  // executed.\n\n  TxStatus[\"TxStatusExecuting\"] = \"executing\"; // TxStatusReverted is used for transactions that were reverted during\n  // execution.\n\n  TxStatus[\"TxStatusReverted\"] = \"reverted\"; // TxStatusDone is used for transactions that have been successfully\n  // executed.\n\n  TxStatus[\"TxStatusDone\"] = \"done\";\n})(TxStatus || (TxStatus = {}));\n\nexport const TxStatusIndex = {\n  [TxStatus.TxStatusNil]: 0,\n  [TxStatus.TxStatusConfirming]: 1,\n  [TxStatus.TxStatusPending]: 2,\n  [TxStatus.TxStatusExecuting]: 3,\n  [TxStatus.TxStatusReverted]: 4,\n  [TxStatus.TxStatusDone]: 5\n};","map":{"version":3,"sources":["../../src/types.ts"],"names":[],"mappings":"AAGA,OAAA,IAAY,iBAAZ;;AAAA,CAAA,UAAY,iBAAZ,EAA6B;AACzB,EAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,gBAAA;AACA,EAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,gBAAA;AACA,EAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,gBAAA;AACA,EAAA,iBAAA,CAAA,kBAAA,CAAA,GAAA,uBAAA;AACA,EAAA,iBAAA,CAAA,mBAAA,CAAA,GAAA,wBAAA;AACA,EAAA,iBAAA,CAAA,sBAAA,CAAA,GAAA,2BAAA;AACA,EAAA,iBAAA,CAAA,sBAAA,CAAA,GAAA,2BAAA,CAPyB,CASzB;;AACA,EAAA,iBAAA,CAAA,qBAAA,CAAA,GAAA,0BAAA;AACA,EAAA,iBAAA,CAAA,qBAAA,CAAA,GAAA,0BAAA;AACH,CAZD,EAAY,iBAAiB,KAAjB,iBAAiB,GAAA,EAAA,CAA7B;;AAcA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAC5B,EAAA,oBAAA,CAAA,WAAA,CAAA,GAAA,gBAAA;AACA,EAAA,oBAAA,CAAA,sBAAA,CAAA,GAAA,2BAAA;AACA,EAAA,oBAAA,CAAA,sBAAA,CAAA,GAAA,2BAAA;AACA,EAAA,oBAAA,CAAA,kBAAA,CAAA,GAAA,uBAAA;AACA,EAAA,oBAAA,CAAA,mBAAA,CAAA,GAAA,wBAAA;AACA,EAAA,oBAAA,CAAA,aAAA,CAAA,GAAA,kBAAA,CAN4B,CAQ5B;;AACA,EAAA,oBAAA,CAAA,qBAAA,CAAA,GAAA,0BAAA;AACA,EAAA,oBAAA,CAAA,qBAAA,CAAA,GAAA,0BAAA;AACH,CAXD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC;;AAaA,OAAA,IAAY,QAAZ;;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAChB;AACA;AACA,EAAA,QAAA,CAAA,aAAA,CAAA,GAAA,KAAA,CAHgB,CAIhB;AACA;;AACA,EAAA,QAAA,CAAA,oBAAA,CAAA,GAAA,YAAA,CANgB,CAOhB;AACA;;AACA,EAAA,QAAA,CAAA,iBAAA,CAAA,GAAA,SAAA,CATgB,CAUhB;AACA;;AACA,EAAA,QAAA,CAAA,mBAAA,CAAA,GAAA,WAAA,CAZgB,CAahB;AACA;;AACA,EAAA,QAAA,CAAA,kBAAA,CAAA,GAAA,UAAA,CAfgB,CAgBhB;AACA;;AACA,EAAA,QAAA,CAAA,cAAA,CAAA,GAAA,MAAA;AACH,CAnBD,EAAY,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAApB;;AAqBA,OAAO,MAAM,aAAa,GAAG;AACzB,GAAC,QAAQ,CAAC,WAAV,GAAwB,CADC;AAEzB,GAAC,QAAQ,CAAC,kBAAV,GAA+B,CAFN;AAGzB,GAAC,QAAQ,CAAC,eAAV,GAA4B,CAHH;AAIzB,GAAC,QAAQ,CAAC,iBAAV,GAA8B,CAJL;AAKzB,GAAC,QAAQ,CAAC,gBAAV,GAA6B,CALJ;AAMzB,GAAC,QAAQ,CAAC,YAAV,GAAyB;AANA,CAAtB","sourceRoot":"","sourcesContent":["export var LockAndMintStatus;\n(function (LockAndMintStatus) {\n    LockAndMintStatus[\"Committed\"] = \"mint_committed\";\n    LockAndMintStatus[\"Deposited\"] = \"mint_deposited\";\n    LockAndMintStatus[\"Confirmed\"] = \"mint_confirmed\";\n    LockAndMintStatus[\"SubmittedToRenVM\"] = \"mint_submittedToRenVM\";\n    LockAndMintStatus[\"ReturnedFromRenVM\"] = \"mint_returnedFromRenVM\";\n    LockAndMintStatus[\"SubmittedToLockChain\"] = \"mint_submittedToLockChain\";\n    LockAndMintStatus[\"ConfirmedOnLockChain\"] = \"mint_confirmedOnLockChain\";\n    // Backwards compatibility\n    LockAndMintStatus[\"SubmittedToEthereum\"] = \"mint_submittedToEthereum\";\n    LockAndMintStatus[\"ConfirmedOnEthereum\"] = \"mint_confirmedOnEthereum\";\n})(LockAndMintStatus || (LockAndMintStatus = {}));\nexport var BurnAndReleaseStatus;\n(function (BurnAndReleaseStatus) {\n    BurnAndReleaseStatus[\"Committed\"] = \"burn_committed\";\n    BurnAndReleaseStatus[\"SubmittedToLockChain\"] = \"burn_submittedToLockChain\";\n    BurnAndReleaseStatus[\"ConfirmedOnLockChain\"] = \"burn_confirmedOnLockChain\";\n    BurnAndReleaseStatus[\"SubmittedToRenVM\"] = \"burn_submittedToRenVM\";\n    BurnAndReleaseStatus[\"ReturnedFromRenVM\"] = \"burn_returnedFromRenVM\";\n    BurnAndReleaseStatus[\"NoBurnFound\"] = \"burn_noBurnFound\";\n    // Backwards compatibility\n    BurnAndReleaseStatus[\"SubmittedToEthereum\"] = \"burn_submittedToEthereum\";\n    BurnAndReleaseStatus[\"ConfirmedOnEthereum\"] = \"burn_confirmedOnEthereum\";\n})(BurnAndReleaseStatus || (BurnAndReleaseStatus = {}));\nexport var TxStatus;\n(function (TxStatus) {\n    // TxStatusNil is used for transactions that have not been seen, or are\n    // otherwise unknown.\n    TxStatus[\"TxStatusNil\"] = \"nil\";\n    // TxStatusConfirming is used for transactions that are currently waiting\n    // for their underlying blockchain transactions to be confirmed.\n    TxStatus[\"TxStatusConfirming\"] = \"confirming\";\n    // TxStatusPending is used for transactions that are waiting for consensus\n    // to be reached on when the transaction should be executed.\n    TxStatus[\"TxStatusPending\"] = \"pending\";\n    // TxStatusExecuting is used for transactions that are currently being\n    // executed.\n    TxStatus[\"TxStatusExecuting\"] = \"executing\";\n    // TxStatusReverted is used for transactions that were reverted during\n    // execution.\n    TxStatus[\"TxStatusReverted\"] = \"reverted\";\n    // TxStatusDone is used for transactions that have been successfully\n    // executed.\n    TxStatus[\"TxStatusDone\"] = \"done\";\n})(TxStatus || (TxStatus = {}));\nexport const TxStatusIndex = {\n    [TxStatus.TxStatusNil]: 0,\n    [TxStatus.TxStatusConfirming]: 1,\n    [TxStatus.TxStatusPending]: 2,\n    [TxStatus.TxStatusExecuting]: 3,\n    [TxStatus.TxStatusReverted]: 4,\n    [TxStatus.TxStatusDone]: 5,\n};\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}