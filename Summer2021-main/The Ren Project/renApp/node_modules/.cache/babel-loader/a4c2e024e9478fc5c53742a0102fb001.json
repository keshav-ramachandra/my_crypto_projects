{"ast":null,"code":"const Buffer = require('safe-buffer').Buffer;\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor(buf = Buffer.from([])) {\n    this.buffer = buf;\n    this._bytesRead = 0;\n    this._bytesWrote = 0;\n  }\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n\n\n  read(num) {\n    this._bytesRead += num;\n    const data = this.buffer.slice(0, num);\n    this.buffer = this.buffer.slice(num);\n    return data;\n  }\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n\n\n  write(buf) {\n    buf = Buffer.from(buf);\n    this._bytesWrote += buf.length;\n    this.buffer = Buffer.concat([this.buffer, buf]);\n  }\n  /**\n   * Whether or not there is more data to read from the buffer\n   * returns {Boolean}\n   */\n\n\n  get end() {\n    return !this.buffer.length;\n  }\n  /**\n   * returns the number of bytes read from the stream\n   * @return {Integer}\n   */\n\n\n  get bytesRead() {\n    return this._bytesRead;\n  }\n  /**\n   * returns the number of bytes wrote to the stream\n   * @return {Integer}\n   */\n\n\n  get bytesWrote() {\n    return this._bytesWrote;\n  }\n\n};","map":{"version":3,"sources":["/home/kesha/Downloads/ren-main/renApp/node_modules/buffer-pipe/index.js"],"names":["Buffer","require","module","exports","BufferPipe","constructor","buf","from","buffer","_bytesRead","_bytesWrote","read","num","data","slice","write","length","concat","end","bytesRead","bytesWrote"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;AAChC;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,GAAG,GAAGN,MAAM,CAACO,IAAP,CAAY,EAAZ,CAAR,EAAyB;AAClC,SAAKC,MAAL,GAAcF,GAAd;AACA,SAAKG,UAAL,GAAkB,CAAlB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,IAAI,CAAEC,GAAF,EAAO;AACT,SAAKH,UAAL,IAAmBG,GAAnB;AACA,UAAMC,IAAI,GAAG,KAAKL,MAAL,CAAYM,KAAZ,CAAkB,CAAlB,EAAqBF,GAArB,CAAb;AACA,SAAKJ,MAAL,GAAc,KAAKA,MAAL,CAAYM,KAAZ,CAAkBF,GAAlB,CAAd;AACA,WAAOC,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,KAAK,CAAET,GAAF,EAAO;AACVA,IAAAA,GAAG,GAAGN,MAAM,CAACO,IAAP,CAAYD,GAAZ,CAAN;AACA,SAAKI,WAAL,IAAoBJ,GAAG,CAACU,MAAxB;AACA,SAAKR,MAAL,GAAcR,MAAM,CAACiB,MAAP,CAAc,CAAC,KAAKT,MAAN,EAAcF,GAAd,CAAd,CAAd;AACD;AAED;AACF;AACA;AACA;;;AACS,MAAHY,GAAG,GAAI;AACT,WAAO,CAAC,KAAKV,MAAL,CAAYQ,MAApB;AACD;AAED;AACF;AACA;AACA;;;AACe,MAATG,SAAS,GAAI;AACf,WAAO,KAAKV,UAAZ;AACD;AAED;AACF;AACA;AACA;;;AACgB,MAAVW,UAAU,GAAI;AAChB,WAAO,KAAKV,WAAZ;AACD;;AAvD+B,CAAlC","sourcesContent":["const Buffer = require('safe-buffer').Buffer\n\nmodule.exports = class BufferPipe {\n  /**\n   * Creates a new instance of a pipe\n   * @param {Buffer} buf - an optional buffer to start with\n   */\n  constructor (buf = Buffer.from([])) {\n    this.buffer = buf\n    this._bytesRead = 0\n    this._bytesWrote = 0\n  }\n\n  /**\n   * read `num` number of bytes from the pipe\n   * @param {Number} num\n   * @return {Buffer}\n   */\n  read (num) {\n    this._bytesRead += num\n    const data = this.buffer.slice(0, num)\n    this.buffer = this.buffer.slice(num)\n    return data\n  }\n\n  /**\n   * Wites a buffer to the pipe\n   * @param {Buffer} buf\n   */\n  write (buf) {\n    buf = Buffer.from(buf)\n    this._bytesWrote += buf.length\n    this.buffer = Buffer.concat([this.buffer, buf])\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   * returns {Boolean}\n   */\n  get end () {\n    return !this.buffer.length\n  }\n\n  /**\n   * returns the number of bytes read from the stream\n   * @return {Integer}\n   */\n  get bytesRead () {\n    return this._bytesRead\n  }\n\n  /**\n   * returns the number of bytes wrote to the stream\n   * @return {Integer}\n   */\n  get bytesWrote () {\n    return this._bytesWrote\n  }\n}\n"]},"metadata":{},"sourceType":"script"}