{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { retryNTimes, SECONDS } from \"@renproject/utils\";\nimport { DepositStatus } from \"./lockAndMint\";\n/**\n * See [[RenJS.defaultDepositHandler]].\n */\n\nconst createDepositHandler = (retries = -1) => {\n  const fn = deposit => __awaiter(void 0, void 0, void 0, function* () {\n    // Loop until the deposit status is `Submitted`.\n    while (deposit.status !== DepositStatus.Submitted) {\n      switch (deposit.status) {\n        // The deposit has been seen, but not enough confirmations have\n        // passed yet.\n        case DepositStatus.Detected:\n          yield retryNTimes(() => __awaiter(void 0, void 0, void 0, function* () {\n            deposit._state.logger.log(`Calling .confirmed`);\n\n            yield deposit.confirmed().on(\"target\", target => {\n              deposit._state.logger.log(`Waiting for ${target} confirmations`);\n            }).on(\"confirmation\", (confs, target) => {\n              deposit._state.logger.log(`${confs}/${target} confirmations`);\n            });\n          }), retries, 10 * SECONDS, deposit._state.logger);\n          break;\n        // The deposit as been seen and confirmed, but it hasn't been\n        // signed by RenVM yet.\n\n        case DepositStatus.Confirmed:\n          yield retryNTimes(() => __awaiter(void 0, void 0, void 0, function* () {\n            try {\n              deposit._state.logger.log(`Calling .signed`);\n\n              yield deposit.signed().on(\"txHash\", status => {\n                deposit._state.logger.log(`RenVM hash: ${status}`);\n              }).on(\"status\", status => {\n                deposit._state.logger.log(`status: ${status}`);\n              });\n            } catch (error) {\n              if (deposit.status === DepositStatus.Reverted) {\n                return;\n              }\n\n              throw error;\n            }\n          }), retries, 10 * SECONDS, deposit._state.logger);\n          break;\n        // The mint has been signed by RenVM and can be submitted to\n        // the mint-chain.\n\n        case DepositStatus.Signed:\n          yield retryNTimes(() => __awaiter(void 0, void 0, void 0, function* () {\n            try {\n              deposit._state.logger.log(`Calling .mint`);\n\n              yield deposit.mint().on(\"transactionHash\", txHash => {\n                deposit._state.logger.log(`txHash: ${deposit.params.to.utils.transactionExplorerLink ? deposit.params.to.utils.transactionExplorerLink(txHash) || String(txHash) : String(txHash)}`);\n              });\n            } catch (error) {\n              // Ethereum revert message.\n              if (/(execution reverted)|(Transaction has been reverted)/.exec(error.message || String(error))) {\n                deposit.status = DepositStatus.Reverted;\n                deposit.revertReason = error.message || String(error);\n                return;\n              }\n\n              throw error;\n            }\n          }), retries, 10 * SECONDS, deposit._state.logger);\n          break;\n        // RenVM wasn't able to sign the mint. Potential causes can be\n        // found in `deposit.revertReason`.\n\n        case DepositStatus.Reverted:\n          throw new Error(`RenVM transaction reverted${deposit.revertReason ? \": \" + deposit.revertReason : \"\"}`);\n      }\n    }\n  });\n\n  fn.withRetries = newRetries => createDepositHandler(newRetries);\n\n  return fn;\n};\n/**\n * See [[RenJS.defaultDepositHandler]].\n */\n\n\nexport const defaultDepositHandler = createDepositHandler();","map":{"version":3,"sources":["../../src/defaultDepositHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { retryNTimes, SECONDS } from \"@renproject/utils\";\nimport { DepositStatus } from \"./lockAndMint\";\n/**\n * See [[RenJS.defaultDepositHandler]].\n */\nconst createDepositHandler = (retries = -1) => {\n    const fn = (deposit) => __awaiter(void 0, void 0, void 0, function* () {\n        // Loop until the deposit status is `Submitted`.\n        while (deposit.status !== DepositStatus.Submitted) {\n            switch (deposit.status) {\n                // The deposit has been seen, but not enough confirmations have\n                // passed yet.\n                case DepositStatus.Detected:\n                    yield retryNTimes(() => __awaiter(void 0, void 0, void 0, function* () {\n                        deposit._state.logger.log(`Calling .confirmed`);\n                        yield deposit\n                            .confirmed()\n                            .on(\"target\", (target) => {\n                            deposit._state.logger.log(`Waiting for ${target} confirmations`);\n                        })\n                            .on(\"confirmation\", (confs, target) => {\n                            deposit._state.logger.log(`${confs}/${target} confirmations`);\n                        });\n                    }), retries, 10 * SECONDS, deposit._state.logger);\n                    break;\n                // The deposit as been seen and confirmed, but it hasn't been\n                // signed by RenVM yet.\n                case DepositStatus.Confirmed:\n                    yield retryNTimes(() => __awaiter(void 0, void 0, void 0, function* () {\n                        try {\n                            deposit._state.logger.log(`Calling .signed`);\n                            yield deposit\n                                .signed()\n                                .on(\"txHash\", (status) => {\n                                deposit._state.logger.log(`RenVM hash: ${status}`);\n                            })\n                                .on(\"status\", (status) => {\n                                deposit._state.logger.log(`status: ${status}`);\n                            });\n                        }\n                        catch (error) {\n                            if (deposit.status === DepositStatus.Reverted) {\n                                return;\n                            }\n                            throw error;\n                        }\n                    }), retries, 10 * SECONDS, deposit._state.logger);\n                    break;\n                // The mint has been signed by RenVM and can be submitted to\n                // the mint-chain.\n                case DepositStatus.Signed:\n                    yield retryNTimes(() => __awaiter(void 0, void 0, void 0, function* () {\n                        try {\n                            deposit._state.logger.log(`Calling .mint`);\n                            yield deposit\n                                .mint()\n                                .on(\"transactionHash\", (txHash) => {\n                                deposit._state.logger.log(`txHash: ${deposit.params.to.utils\n                                    .transactionExplorerLink\n                                    ? deposit.params.to.utils.transactionExplorerLink(txHash) || String(txHash)\n                                    : String(txHash)}`);\n                            });\n                        }\n                        catch (error) {\n                            // Ethereum revert message.\n                            if (/(execution reverted)|(Transaction has been reverted)/.exec(error.message || String(error))) {\n                                deposit.status = DepositStatus.Reverted;\n                                deposit.revertReason =\n                                    error.message || String(error);\n                                return;\n                            }\n                            throw error;\n                        }\n                    }), retries, 10 * SECONDS, deposit._state.logger);\n                    break;\n                // RenVM wasn't able to sign the mint. Potential causes can be\n                // found in `deposit.revertReason`.\n                case DepositStatus.Reverted:\n                    throw new Error(`RenVM transaction reverted${deposit.revertReason\n                        ? \": \" + deposit.revertReason\n                        : \"\"}`);\n            }\n        }\n    });\n    fn.withRetries = (newRetries) => createDepositHandler(newRetries);\n    return fn;\n};\n/**\n * See [[RenJS.defaultDepositHandler]].\n */\nexport const defaultDepositHandler = createDepositHandler();\n//# sourceMappingURL=defaultDepositHandler.js.map"]},"metadata":{},"sourceType":"module"}