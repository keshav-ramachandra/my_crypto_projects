{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashTransaction = exports.submitGatewayType = exports.mintParamsType = exports.burnParamsType = void 0;\n\nconst utils_1 = require(\"@renproject/utils\");\n\nconst marshal_1 = require(\"./pack/marshal\");\n\nconst pack_1 = require(\"./pack/pack\");\n\nexports.burnParamsType = {\n  struct: [{\n    amount: pack_1.PackPrimitive.U256\n  }, {\n    to: pack_1.PackPrimitive.Str\n  }, {\n    nonce: pack_1.PackPrimitive.Bytes32\n  }]\n};\n\nconst mintParamsType = () => ({\n  struct: [{\n    txid: pack_1.PackPrimitive.Bytes\n  }, {\n    txindex: pack_1.PackPrimitive.U32\n  }, {\n    amount: pack_1.PackPrimitive.U256\n  }, {\n    payload: pack_1.PackPrimitive.Bytes\n  }, {\n    phash: pack_1.PackPrimitive.Bytes32\n  }, {\n    to: pack_1.PackPrimitive.Str\n  }, {\n    nonce: pack_1.PackPrimitive.Bytes32\n  }, {\n    nhash: pack_1.PackPrimitive.Bytes32\n  }, {\n    gpubkey: pack_1.PackPrimitive.Bytes\n  }, {\n    ghash: pack_1.PackPrimitive.Bytes32\n  }]\n});\n\nexports.mintParamsType = mintParamsType;\n\nconst submitGatewayType = () => ({\n  struct: [{\n    payload: pack_1.PackPrimitive.Bytes\n  }, {\n    phash: pack_1.PackPrimitive.Bytes32\n  }, {\n    to: pack_1.PackPrimitive.Str\n  }, {\n    nonce: pack_1.PackPrimitive.Bytes32\n  }, {\n    nhash: pack_1.PackPrimitive.Bytes32\n  }, {\n    gpubkey: pack_1.PackPrimitive.Bytes\n  }, {\n    ghash: pack_1.PackPrimitive.Bytes32\n  }]\n});\n\nexports.submitGatewayType = submitGatewayType;\n\nconst hashTransaction = (version, selector, packValue) => {\n  utils_1.assertType(\"string\", {\n    version,\n    selector\n  });\n  return utils_1.sha256(Buffer.concat([marshal_1.marshalString(version), marshal_1.marshalString(selector), marshal_1.marshalTypedPackValue(packValue)]));\n};\n\nexports.hashTransaction = hashTransaction;","map":{"version":3,"sources":["../../../src/v2/transaction.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAuBa,OAAA,CAAA,cAAA,GAAiC;AAC1C,EAAA,MAAM,EAAE,CACJ;AACI,IAAA,MAAM,EAAE,MAAA,CAAA,aAAA,CAAc;AAD1B,GADI,EAIJ;AACI,IAAA,EAAE,EAAE,MAAA,CAAA,aAAA,CAAc;AADtB,GAJI,EAOJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAPI;AADkC,CAAjC;;AA2BN,MAAM,cAAc,GAAG,OAAuB;AACjD,EAAA,MAAM,EAAE,CACJ;AACI,IAAA,IAAI,EAAE,MAAA,CAAA,aAAA,CAAc;AADxB,GADI,EAIJ;AACI,IAAA,OAAO,EAAE,MAAA,CAAA,aAAA,CAAc;AAD3B,GAJI,EAOJ;AACI,IAAA,MAAM,EAAE,MAAA,CAAA,aAAA,CAAc;AAD1B,GAPI,EAUJ;AACI,IAAA,OAAO,EAAE,MAAA,CAAA,aAAA,CAAc;AAD3B,GAVI,EAaJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAbI,EAgBJ;AACI,IAAA,EAAE,EAAE,MAAA,CAAA,aAAA,CAAc;AADtB,GAhBI,EAmBJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAnBI,EAsBJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAtBI,EAyBJ;AACI,IAAA,OAAO,EAAE,MAAA,CAAA,aAAA,CAAc;AAD3B,GAzBI,EA4BJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GA5BI;AADyC,CAAvB,CAAvB;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;;AAuDN,MAAM,iBAAiB,GAAG,OAAuB;AACpD,EAAA,MAAM,EAAE,CACJ;AACI,IAAA,OAAO,EAAE,MAAA,CAAA,aAAA,CAAc;AAD3B,GADI,EAIJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAJI,EAOJ;AACI,IAAA,EAAE,EAAE,MAAA,CAAA,aAAA,CAAc;AADtB,GAPI,EAUJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAVI,EAaJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAbI,EAgBJ;AACI,IAAA,OAAO,EAAE,MAAA,CAAA,aAAA,CAAc;AAD3B,GAhBI,EAmBJ;AACI,IAAA,KAAK,EAAE,MAAA,CAAA,aAAA,CAAc;AADzB,GAnBI;AAD4C,CAAvB,CAA1B;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB;;AAkDN,MAAM,eAAe,GAAG,CAC3B,OAD2B,EAE3B,QAF2B,EAG3B,SAH2B,KAI3B;AACA,EAAA,OAAA,CAAA,UAAA,CAAmB,QAAnB,EAA6B;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,GAA7B;AACA,SAAO,OAAA,CAAA,MAAA,CACH,MAAM,CAAC,MAAP,CAAc,CACV,SAAA,CAAA,aAAA,CAAc,OAAd,CADU,EAEV,SAAA,CAAA,aAAA,CAAc,QAAd,CAFU,EAGV,SAAA,CAAA,qBAAA,CAAsB,SAAtB,CAHU,CAAd,CADG,CAAP;AAOH,CAbM;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashTransaction = exports.submitGatewayType = exports.mintParamsType = exports.burnParamsType = void 0;\nconst utils_1 = require(\"@renproject/utils\");\nconst marshal_1 = require(\"./pack/marshal\");\nconst pack_1 = require(\"./pack/pack\");\nexports.burnParamsType = {\n    struct: [\n        {\n            amount: pack_1.PackPrimitive.U256,\n        },\n        {\n            to: pack_1.PackPrimitive.Str,\n        },\n        {\n            nonce: pack_1.PackPrimitive.Bytes32,\n        },\n    ],\n};\nconst mintParamsType = () => ({\n    struct: [\n        {\n            txid: pack_1.PackPrimitive.Bytes,\n        },\n        {\n            txindex: pack_1.PackPrimitive.U32,\n        },\n        {\n            amount: pack_1.PackPrimitive.U256,\n        },\n        {\n            payload: pack_1.PackPrimitive.Bytes,\n        },\n        {\n            phash: pack_1.PackPrimitive.Bytes32,\n        },\n        {\n            to: pack_1.PackPrimitive.Str,\n        },\n        {\n            nonce: pack_1.PackPrimitive.Bytes32,\n        },\n        {\n            nhash: pack_1.PackPrimitive.Bytes32,\n        },\n        {\n            gpubkey: pack_1.PackPrimitive.Bytes,\n        },\n        {\n            ghash: pack_1.PackPrimitive.Bytes32,\n        },\n    ],\n});\nexports.mintParamsType = mintParamsType;\nconst submitGatewayType = () => ({\n    struct: [\n        {\n            payload: pack_1.PackPrimitive.Bytes,\n        },\n        {\n            phash: pack_1.PackPrimitive.Bytes32,\n        },\n        {\n            to: pack_1.PackPrimitive.Str,\n        },\n        {\n            nonce: pack_1.PackPrimitive.Bytes32,\n        },\n        {\n            nhash: pack_1.PackPrimitive.Bytes32,\n        },\n        {\n            gpubkey: pack_1.PackPrimitive.Bytes,\n        },\n        {\n            ghash: pack_1.PackPrimitive.Bytes32,\n        },\n    ],\n});\nexports.submitGatewayType = submitGatewayType;\nconst hashTransaction = (version, selector, packValue) => {\n    utils_1.assertType(\"string\", { version, selector });\n    return utils_1.sha256(Buffer.concat([\n        marshal_1.marshalString(version),\n        marshal_1.marshalString(selector),\n        marshal_1.marshalTypedPackValue(packValue),\n    ]));\n};\nexports.hashTransaction = hashTransaction;\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"script"}