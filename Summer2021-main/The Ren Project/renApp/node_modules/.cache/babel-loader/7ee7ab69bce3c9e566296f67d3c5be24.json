{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport const fetchDeposits = (client, address, params, network, progress) => __awaiter(void 0, void 0, void 0, function* () {\n  const chainHead = yield client.request(\"ChainHead\");\n  const height = chainHead.Height;\n  const latestTXs = yield client.request(\"StateListMessages\", {\n    Version: 0,\n    To: address,\n    From: null,\n    Nonce: 0,\n    Value: \"0\",\n    GasPrice: \"0\",\n    GasLimit: 0,\n    Method: 0,\n    Params: params\n  }, [], progress === 0 ? height - 100 : progress);\n  return {\n    txs: yield Promise.all((latestTXs || []).map(cid => __awaiter(void 0, void 0, void 0, function* () {\n      return fetchMessage(client, cid[\"/\"], network, height);\n    }))),\n    progress: height + 1\n  };\n});\nexport const fetchMessage = (client, cid, network, height) => __awaiter(void 0, void 0, void 0, function* () {\n  const [details, receipt, {\n    Height: chainHeight\n  }] = yield Promise.all([client.request(\"ChainGetMessage\", {\n    \"/\": cid\n  }), client.request(\"StateSearchMsg\", {\n    \"/\": cid\n  }).catch(() => undefined), height ? {\n    Height: height\n  } : client.request(\"ChainHead\")]);\n\n  if (network === \"testnet\") {\n    details.To = details.To.replace(/^f/, \"t\");\n    details.From = details.From.replace(/^f/, \"t\");\n  }\n\n  const tx = {\n    cid,\n    amount: details.Value,\n    params: details.Params || \"\",\n    nonce: details.Nonce,\n    confirmations: receipt ? chainHeight - receipt.Height : 0\n  };\n  return tx;\n});","map":{"version":3,"sources":["../../../src/api/lotus.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,MAAM,aAAa,GAAG,CACzB,MADyB,EAEzB,OAFyB,EAGzB,MAHyB,EAIzB,OAJyB,EAKzB,QALyB,KAM6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACtD,QAAM,SAAS,GAAG,MAAM,MAAM,CAAC,OAAP,CAAe,WAAf,CAAxB;AACA,QAAM,MAAM,GAAW,SAAS,CAAC,MAAjC;AAEA,QAAM,SAAS,GAA2B,MAAM,MAAM,CAAC,OAAP,CAC5C,mBAD4C,EAE5C;AACI,IAAA,OAAO,EAAE,CADb;AAEI,IAAA,EAAE,EAAE,OAFR;AAGI,IAAA,IAAI,EAAE,IAHV;AAII,IAAA,KAAK,EAAE,CAJX;AAKI,IAAA,KAAK,EAAE,GALX;AAMI,IAAA,QAAQ,EAAE,GANd;AAOI,IAAA,QAAQ,EAAE,CAPd;AAQI,IAAA,MAAM,EAAE,CARZ;AASI,IAAA,MAAM,EAAE;AATZ,GAF4C,EAa5C,EAb4C,EAc5C,QAAQ,KAAK,CAAb,GAAiB,MAAM,GAAG,GAA1B,GAAgC,QAdY,CAAhD;AAiBA,SAAO;AACH,IAAA,GAAG,EAAE,MAAM,OAAO,CAAC,GAAR,CACP,CAAC,SAAS,IAAI,EAAd,EAAkB,GAAlB,CAA6B,GAAP,IAAc,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChC,aAAA,YAAY,CAAC,MAAD,EAAS,GAAG,CAAC,GAAD,CAAZ,EAAmB,OAAnB,EAA4B,MAA5B,CAAZ;AAA+C,KADf,CAApC,CADO,CADR;AAMH,IAAA,QAAQ,EAAE,MAAM,GAAG;AANhB,GAAP;AAQH,CA7ByD,CANnD;AAqCP,OAAO,MAAM,YAAY,GAAG,CACxB,MADwB,EAExB,GAFwB,EAGxB,OAHwB,EAIxB,MAJwB,KAKC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACzB,QAAM,CAAC,OAAD,EAAU,OAAV,EAAmB;AAAE,IAAA,MAAM,EAAE;AAAV,GAAnB,IAIF,MAAM,OAAO,CAAC,GAAR,CAAY,CAClB,MAAM,CAAC,OAAP,CAAe,iBAAf,EAAkC;AAAE,SAAK;AAAP,GAAlC,CADkB,EAElB,MAAM,CAAC,OAAP,CAAe,gBAAf,EAAiC;AAAE,SAAK;AAAP,GAAjC,EAA+C,KAA/C,CAAqD,MAAM,SAA3D,CAFkB,EAGlB,MAAM,GAAG;AAAE,IAAA,MAAM,EAAE;AAAV,GAAH,GAAwB,MAAM,CAAC,OAAP,CAAe,WAAf,CAHZ,CAAZ,CAJV;;AAUA,MAAI,OAAO,KAAK,SAAhB,EAA2B;AACvB,IAAA,OAAO,CAAC,EAAR,GAAa,OAAO,CAAC,EAAR,CAAW,OAAX,CAAmB,IAAnB,EAAyB,GAAzB,CAAb;AACA,IAAA,OAAO,CAAC,IAAR,GAAe,OAAO,CAAC,IAAR,CAAa,OAAb,CAAqB,IAArB,EAA2B,GAA3B,CAAf;AACH;;AACD,QAAM,EAAE,GAAmB;AACvB,IAAA,GADuB;AAEvB,IAAA,MAAM,EAAE,OAAO,CAAC,KAFO;AAGvB,IAAA,MAAM,EAAE,OAAO,CAAC,MAAR,IAAkB,EAHH;AAIvB,IAAA,KAAK,EAAE,OAAO,CAAC,KAJQ;AAKvB,IAAA,aAAa,EAAE,OAAO,GAAG,WAAW,GAAG,OAAO,CAAC,MAAzB,GAAkC;AALjC,GAA3B;AAQA,SAAO,EAAP;AACH,CAxB4B,CALtB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const fetchDeposits = (client, address, params, network, progress) => __awaiter(void 0, void 0, void 0, function* () {\n    const chainHead = yield client.request(\"ChainHead\");\n    const height = chainHead.Height;\n    const latestTXs = yield client.request(\"StateListMessages\", {\n        Version: 0,\n        To: address,\n        From: null,\n        Nonce: 0,\n        Value: \"0\",\n        GasPrice: \"0\",\n        GasLimit: 0,\n        Method: 0,\n        Params: params,\n    }, [], progress === 0 ? height - 100 : progress);\n    return {\n        txs: yield Promise.all((latestTXs || []).map((cid) => __awaiter(void 0, void 0, void 0, function* () { return fetchMessage(client, cid[\"/\"], network, height); }))),\n        progress: height + 1,\n    };\n});\nexport const fetchMessage = (client, cid, network, height) => __awaiter(void 0, void 0, void 0, function* () {\n    const [details, receipt, { Height: chainHeight }] = yield Promise.all([\n        client.request(\"ChainGetMessage\", { \"/\": cid }),\n        client.request(\"StateSearchMsg\", { \"/\": cid }).catch(() => undefined),\n        height ? { Height: height } : client.request(\"ChainHead\"),\n    ]);\n    if (network === \"testnet\") {\n        details.To = details.To.replace(/^f/, \"t\");\n        details.From = details.From.replace(/^f/, \"t\");\n    }\n    const tx = {\n        cid,\n        amount: details.Value,\n        params: details.Params || \"\",\n        nonce: details.Nonce,\n        confirmations: receipt ? chainHeight - receipt.Height : 0,\n    };\n    return tx;\n});\n//# sourceMappingURL=lotus.js.map"]},"metadata":{},"sourceType":"module"}