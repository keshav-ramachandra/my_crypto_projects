{"ast":null,"code":"import { assertType, sha256 } from \"@renproject/utils\";\nimport { marshalString, marshalTypedPackValue } from \"./pack/marshal\";\nimport { PackPrimitive } from \"./pack/pack\";\nexport const burnParamsType = {\n  struct: [{\n    amount: PackPrimitive.U256\n  }, {\n    to: PackPrimitive.Str\n  }, {\n    nonce: PackPrimitive.Bytes32\n  }]\n};\nexport const mintParamsType = () => ({\n  struct: [{\n    txid: PackPrimitive.Bytes\n  }, {\n    txindex: PackPrimitive.U32\n  }, {\n    amount: PackPrimitive.U256\n  }, {\n    payload: PackPrimitive.Bytes\n  }, {\n    phash: PackPrimitive.Bytes32\n  }, {\n    to: PackPrimitive.Str\n  }, {\n    nonce: PackPrimitive.Bytes32\n  }, {\n    nhash: PackPrimitive.Bytes32\n  }, {\n    gpubkey: PackPrimitive.Bytes\n  }, {\n    ghash: PackPrimitive.Bytes32\n  }]\n});\nexport const submitGatewayType = () => ({\n  struct: [{\n    payload: PackPrimitive.Bytes\n  }, {\n    phash: PackPrimitive.Bytes32\n  }, {\n    to: PackPrimitive.Str\n  }, {\n    nonce: PackPrimitive.Bytes32\n  }, {\n    nhash: PackPrimitive.Bytes32\n  }, {\n    gpubkey: PackPrimitive.Bytes\n  }, {\n    ghash: PackPrimitive.Bytes32\n  }]\n});\nexport const hashTransaction = (version, selector, packValue) => {\n  assertType(\"string\", {\n    version,\n    selector\n  });\n  return sha256(Buffer.concat([marshalString(version), marshalString(selector), marshalTypedPackValue(packValue)]));\n};","map":{"version":3,"sources":["../../../src/v2/transaction.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,EAAqB,MAArB,QAAmC,mBAAnC;AAEA,SAAS,aAAT,EAAwB,qBAAxB,QAAqD,gBAArD;AACA,SAAS,aAAT,QAA8D,aAA9D;AAuBA,OAAO,MAAM,cAAc,GAAmB;AAC1C,EAAA,MAAM,EAAE,CACJ;AACI,IAAA,MAAM,EAAE,aAAa,CAAC;AAD1B,GADI,EAIJ;AACI,IAAA,EAAE,EAAE,aAAa,CAAC;AADtB,GAJI,EAOJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAPI;AADkC,CAAvC;AA2BP,OAAO,MAAM,cAAc,GAAG,OAAuB;AACjD,EAAA,MAAM,EAAE,CACJ;AACI,IAAA,IAAI,EAAE,aAAa,CAAC;AADxB,GADI,EAIJ;AACI,IAAA,OAAO,EAAE,aAAa,CAAC;AAD3B,GAJI,EAOJ;AACI,IAAA,MAAM,EAAE,aAAa,CAAC;AAD1B,GAPI,EAUJ;AACI,IAAA,OAAO,EAAE,aAAa,CAAC;AAD3B,GAVI,EAaJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAbI,EAgBJ;AACI,IAAA,EAAE,EAAE,aAAa,CAAC;AADtB,GAhBI,EAmBJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAnBI,EAsBJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAtBI,EAyBJ;AACI,IAAA,OAAO,EAAE,aAAa,CAAC;AAD3B,GAzBI,EA4BJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GA5BI;AADyC,CAAvB,CAAvB;AAuDP,OAAO,MAAM,iBAAiB,GAAG,OAAuB;AACpD,EAAA,MAAM,EAAE,CACJ;AACI,IAAA,OAAO,EAAE,aAAa,CAAC;AAD3B,GADI,EAIJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAJI,EAOJ;AACI,IAAA,EAAE,EAAE,aAAa,CAAC;AADtB,GAPI,EAUJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAVI,EAaJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAbI,EAgBJ;AACI,IAAA,OAAO,EAAE,aAAa,CAAC;AAD3B,GAhBI,EAmBJ;AACI,IAAA,KAAK,EAAE,aAAa,CAAC;AADzB,GAnBI;AAD4C,CAAvB,CAA1B;AAkDP,OAAO,MAAM,eAAe,GAAG,CAC3B,OAD2B,EAE3B,QAF2B,EAG3B,SAH2B,KAI3B;AACA,EAAA,UAAU,CAAS,QAAT,EAAmB;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,GAAnB,CAAV;AACA,SAAO,MAAM,CACT,MAAM,CAAC,MAAP,CAAc,CACV,aAAa,CAAC,OAAD,CADH,EAEV,aAAa,CAAC,QAAD,CAFH,EAGV,qBAAqB,CAAC,SAAD,CAHX,CAAd,CADS,CAAb;AAOH,CAbM","sourceRoot":"","sourcesContent":["import { assertType, sha256 } from \"@renproject/utils\";\nimport { marshalString, marshalTypedPackValue } from \"./pack/marshal\";\nimport { PackPrimitive } from \"./pack/pack\";\nexport const burnParamsType = {\n    struct: [\n        {\n            amount: PackPrimitive.U256,\n        },\n        {\n            to: PackPrimitive.Str,\n        },\n        {\n            nonce: PackPrimitive.Bytes32,\n        },\n    ],\n};\nexport const mintParamsType = () => ({\n    struct: [\n        {\n            txid: PackPrimitive.Bytes,\n        },\n        {\n            txindex: PackPrimitive.U32,\n        },\n        {\n            amount: PackPrimitive.U256,\n        },\n        {\n            payload: PackPrimitive.Bytes,\n        },\n        {\n            phash: PackPrimitive.Bytes32,\n        },\n        {\n            to: PackPrimitive.Str,\n        },\n        {\n            nonce: PackPrimitive.Bytes32,\n        },\n        {\n            nhash: PackPrimitive.Bytes32,\n        },\n        {\n            gpubkey: PackPrimitive.Bytes,\n        },\n        {\n            ghash: PackPrimitive.Bytes32,\n        },\n    ],\n});\nexport const submitGatewayType = () => ({\n    struct: [\n        {\n            payload: PackPrimitive.Bytes,\n        },\n        {\n            phash: PackPrimitive.Bytes32,\n        },\n        {\n            to: PackPrimitive.Str,\n        },\n        {\n            nonce: PackPrimitive.Bytes32,\n        },\n        {\n            nhash: PackPrimitive.Bytes32,\n        },\n        {\n            gpubkey: PackPrimitive.Bytes,\n        },\n        {\n            ghash: PackPrimitive.Bytes32,\n        },\n    ],\n});\nexport const hashTransaction = (version, selector, packValue) => {\n    assertType(\"string\", { version, selector });\n    return sha256(Buffer.concat([\n        marshalString(version),\n        marshalString(selector),\n        marshalTypedPackValue(packValue),\n    ]));\n};\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"module"}