"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchMessage = exports.fetchDeposits = void 0;
const axios_1 = __importDefault(require("axios"));
// See https://github.com/renproject/account-chain-indexer
const INDEXER_URL = `https://account-chain-indexer.herokuapp.com/graphql`;
const fetchDeposits = async (address, paramsFilterBase64 = "", network, _page = 0) => {
    // const network = address.slice(0, 1) === "t" ? "testnet" : "mainnet";
    // TODO: Add network parameter.
    const query = `{
        messages: FilecoinTransactions(to: "${address}", params: "${paramsFilterBase64}") {
            cid
            params
            to
            nonce
            blocknumber
            amount
        }

        height: NetworkHeight(chain: "Filecoin", network: "${network}")
    }`;
    const response = (await axios_1.default.post(INDEXER_URL, { query })).data;
    if (response.errors && response.errors.length) {
        throw new Error(`Unable to fetch Filecoin messages: ${response.errors[0].message}`);
    }
    const { messages, height } = response.data;
    return messages
        .map((message) => {
        return {
            cid: message.cid,
            // to: message.to,
            amount: message.amount,
            params: message.params,
            confirmations: height ? height - height + 1 : 0,
            nonce: message.nonce,
        };
    })
        .filter((message) => !paramsFilterBase64 || message.params === paramsFilterBase64);
};
exports.fetchDeposits = fetchDeposits;
const fetchMessage = async (cid, network) => {
    // TODO: Add network parameter.
    const query = `{
        messages: FilecoinTransactions(cid: "${cid}") {
            cid
            params
            to
            nonce
            blocknumber
            amount
        }

        height: NetworkHeight(chain: "Filecoin", network: "${network}")
    }`;
    const response = (await axios_1.default.post(INDEXER_URL, { query })).data;
    if (response.errors && response.errors.length) {
        throw new Error(`Unable to fetch Filecoin messages: ${response.errors[0].message}`);
    }
    const { messages, height } = response.data;
    if (messages.length === 0) {
        throw new Error(`Error fetching Filecoin transaction: message not found.`);
    }
    if (messages.length > 1) {
        console.warn(`More than 1 Filecoin transaction found with the same transaction ID.`);
    }
    const message = messages[0];
    return {
        cid: message.cid,
        // to: message.to,
        amount: message.amount,
        params: message.params,
        confirmations: message.blocknumber
            ? height - message.blocknumber + 1
            : 0,
        nonce: message.nonce,
    };
};
exports.fetchMessage = fetchMessage;
//# sourceMappingURL=indexer.js.map