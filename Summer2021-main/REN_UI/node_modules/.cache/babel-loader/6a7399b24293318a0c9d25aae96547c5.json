{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nimport web3 from './../web3';\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts();\n  return acts[0];\n});\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n\n  for (var i = 0; i < response; i++) {\n    options.push({\n      value: i,\n      label: i\n    });\n  }\n\n  return options;\n});\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async _nodeId => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n});\nexport const updateCurrentNodeAsync = createAsyncThunk('node/updateCurrentNodeAsync', async _nodeId => {\n  return parseInt(_nodeId);\n});\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async data => {\n  //const {_amount,_nodeId,_sender}= data;\n  await controller.methods.stakeRen(parseInt(data.incrementAmount), parseInt(data.currentNode)).send({\n    from: data.user\n  });\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(data.currentNode).call();\n  let status;\n\n  if (parseInt(nodeBalance) == 50000) {\n    status = 'full';\n  } else {\n    status = 'accepting';\n  }\n\n  const share = await controller.methods.getPercentageShare(data.currentNode).call();\n  return {\n    nodeId: data.currentNode,\n    nodeBalance: nodeBalance,\n    status: status,\n    share: share\n  };\n});\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async _user => {\n  const response = await controller.methods.createNode().send({\n    from: _user\n  });\n  return response;\n});\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response) - 1;\n});\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync', async () => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n\n  if (parseInt(currentNodeBalance) == 50000) {\n    return 'full';\n  } else {\n    return 'accepting';\n  }\n});\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async _nodeId => {\n  const response = await controller.methods.nodeCount().call();\n  let nodeId;\n\n  if (_nodeId == -1) {\n    nodeId = parseInt(response) - 1;\n  } else {\n    nodeId = parseInt(_nodeId);\n  }\n\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status;\n\n  if (parseInt(nodeBalance) == 50000) {\n    status = 'full';\n  } else {\n    status = 'accepting';\n  }\n\n  return {\n    nodeId: nodeId,\n    nodeBalance: nodeBalance,\n    status: status\n  };\n});\nexport const isOwner = createAsyncThunk('node/isOwner', async _user => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts();\n\n  if (response == acts[0]) {\n    return 'yes';\n  } else {\n    return 'no';\n  }\n});\nlet initialState = {\n  balance: -1,\n  status: 'idle',\n  error: '',\n  currentNode: -1,\n  user: '',\n  owner: false,\n  depositStatus: 'full',\n  options: []\n};\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState,\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getUserAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.user = action.payload;\n    }).addCase(getBalanceAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.balance = action.payload;\n    }).addCase(getNodeAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.currentNode = action.payload;\n    }).addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.depositStatus = action.payload;\n    }).addCase(updateNodeStats.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.depositStatus = action.payload.status;\n      state.balance = action.payload.nodeBalance;\n      state.currentNode = action.payload.nodeId;\n      state.status = 'func';\n    }).addCase(isOwner.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.owner = action.payload;\n    }).addCase(loadSelectElements.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.options = action.payload;\n    }).addCase(stakeRenAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.depositStatus = action.payload.status;\n      state.balance = action.payload.nodeBalance;\n      state.currentNode = action.payload.nodeId;\n      state.status = 'func';\n    });\n  }\n});\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","web3","getUserAsync","acts","eth","getAccounts","loadSelectElements","response","methods","nodeCount","call","options","i","push","value","label","getBalanceAsync","_nodeId","getCumulativeNodeDeposit","updateCurrentNodeAsync","parseInt","stakeRenAsync","data","stakeRen","incrementAmount","currentNode","send","from","user","nodeBalance","status","share","getPercentageShare","nodeId","createNodeAsync","_user","createNode","getNodeAsync","getDepositStatusAsync","currentNodeBalance","updateNodeStats","isOwner","owner","initialState","balance","error","depositStatus","nodeSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return acts[0];\n})\n\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n  for(var i=0;i < response;i++){\n      options.push({ value: i, label: i })\n  }\n  return options;\n})\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async (_nodeId) => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n})\n\nexport const updateCurrentNodeAsync = createAsyncThunk('node/updateCurrentNodeAsync', async (_nodeId) => {\n  return parseInt(_nodeId);\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (data) => {\n  //const {_amount,_nodeId,_sender}= data;\n  await controller.methods.stakeRen(parseInt(data.incrementAmount),parseInt(data.currentNode)).send({from:data.user});\n\n  \n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(data.currentNode).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  const share = await controller.methods.getPercentageShare(data.currentNode).call();\n\n  return {nodeId: data.currentNode, nodeBalance: nodeBalance, status: status, share:share}\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async (_user) => {\n  const response = await controller.methods.createNode().send({from:_user});\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async (_nodeId) => {\n  const response = await controller.methods.nodeCount().call();\n  \n  let nodeId \n  if(_nodeId == -1){\n    nodeId= parseInt(response) - 1;\n  }\n  else{\n    nodeId = parseInt(_nodeId)\n  }\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  return {nodeId: nodeId, nodeBalance: nodeBalance, status: status}\n})\n\n\n\nexport const isOwner = createAsyncThunk('node/isOwner', async (_user) => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts(); \n\n  if(response == acts[0]){\n    return 'yes';\n  }\n  else{\n    return 'no';\n  }\n  \n})\n\n\n\nlet initialState= {\n      balance: -1,\n      status:'idle',\n      error:'',\n      currentNode: -1,\n      user:'',\n      owner:false,\n      depositStatus:'full',\n      options:[]\n    }\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState,\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getUserAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.user = action.payload\n\n      })\n      .addCase(getBalanceAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.balance = action.payload\n      })\n      .addCase(getNodeAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentNode = action.payload\n      })\n      .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.depositStatus = action.payload\n      })\n      .addCase(updateNodeStats.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.status ='func'\n      })\n      .addCase(isOwner.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.owner = action.payload\n      })\n      .addCase(loadSelectElements.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.options = action.payload\n      })\n      .addCase(stakeRenAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.status ='func'\n      })\n      \n    }\n})\n\n\n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}