{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nimport web3 from './../web3';\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts();\n  return acts[0];\n});\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n\n  for (var i = 0; i < response; i++) {\n    options.push({\n      value: i,\n      label: i\n    });\n  }\n\n  return options;\n});\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async _nodeId => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n});\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (_amount, _nodeId, _sender) => {\n  const response = await controller.methods.stakeRen(_amount, _nodeId).send({\n    from: _sender\n  });\n  return response;\n});\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n});\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response) - 1;\n});\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync', async () => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n\n  if (parseInt(currentNodeBalance) == 50000) {\n    return 'full';\n  } else {\n    return 'accepting';\n  }\n});\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const nodeId = parseInt(response) - 1;\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status;\n\n  if (parseInt(nodeBalance) == 50000) {\n    status = 'full';\n  } else {\n    status = 'accepting';\n  }\n\n  return {\n    nodeId: nodeId,\n    nodeBalance: nodeBalance,\n    status: status\n  };\n});\nexport const isOwner = createAsyncThunk('node/isOwner', async _user => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts();\n\n  if (response == acts[0]) {\n    return 'yes';\n  } else {\n    return 'no';\n  }\n});\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState: {\n    balance: -1,\n    status: 'idle',\n    error: '',\n    currentNode: -1,\n    user: '',\n    owner: false,\n    depositStatus: 'full',\n    options: []\n  },\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getUserAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.user = action.payload;\n    }).addCase(getBalanceAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.balance = action.payload;\n    }).addCase(getNodeAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.currentNode = action.payload;\n    }).addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.depositStatus = action.payload;\n    }).addCase(updateNodeStats.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.depositStatus = action.payload.status;\n      state.balance = action.payload.nodeBalance;\n      state.currentNode = action.payload.nodeId;\n      state.status = 'func';\n    }).addCase(isOwner.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.owner = action.payload;\n    }).addCase(loadSelectElements.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.options = action.payload;\n    });\n  }\n});\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","web3","getUserAsync","acts","eth","getAccounts","loadSelectElements","response","methods","nodeCount","call","options","i","push","value","label","getBalanceAsync","_nodeId","getCumulativeNodeDeposit","stakeRenAsync","_amount","_sender","stakeRen","send","from","createNodeAsync","createNode","getNodeAsync","parseInt","getDepositStatusAsync","currentNodeBalance","updateNodeStats","nodeId","nodeBalance","status","isOwner","_user","owner","nodeSlice","name","initialState","balance","error","currentNode","user","depositStatus","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return acts[0];\n})\n\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n  for(var i=0;i < response;i++){\n      options.push({ value: i, label: i })\n  }\n  return options;\n})\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async (_nodeId) => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (_amount, _nodeId, _sender) => {\n  const response = await controller.methods.stakeRen(_amount,_nodeId).send({from: _sender});\n  return response;\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const nodeId = parseInt(response) - 1;\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  return {nodeId: nodeId, nodeBalance: nodeBalance, status: status}\n})\n\n\nexport const isOwner = createAsyncThunk('node/isOwner', async (_user) => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts(); \n\n  if(response == acts[0]){\n    return 'yes';\n  }\n  else{\n    return 'no';\n  }\n  \n})\n\n\n\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState: {\n      balance: -1,\n      status:'idle',\n      error:'',\n      currentNode: -1,\n      user:'',\n      owner:false,\n      depositStatus:'full',\n      options:[]\n    },\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getUserAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.user = action.payload\n\n      })\n      .addCase(getBalanceAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.balance = action.payload\n      })\n      .addCase(getNodeAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentNode = action.payload\n      })\n      .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.depositStatus = action.payload\n      })\n      .addCase(updateNodeStats.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.status ='func'\n      })\n      .addCase(isOwner.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.owner = action.payload\n      })\n      .addCase(loadSelectElements.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.options = action.payload\n      })\n      \n    }\n})\n\n\n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}