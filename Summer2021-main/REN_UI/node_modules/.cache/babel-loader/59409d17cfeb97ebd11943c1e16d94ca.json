{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nimport web3 from './../web3';\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts();\n  return acts[0];\n});\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit().call();\n  return response;\n});\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async () => {\n  const response = await controller.methods.stakeRen(0, 0).call();\n  return response;\n});\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n});\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.nodeCount.call();\n  return response;\n});\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState: {\n    balance: 0,\n    status: 'idle',\n    error: '',\n    currentNode: 0,\n    user: ''\n  },\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getUserAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.user = action.payload;\n    });\n  }\n});\nexport const selectUser = state => state.node.user;\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","web3","getUserAsync","acts","eth","getAccounts","fetchBalanceAsync","response","methods","getCumulativeNodeDeposit","call","stakeRenAsync","stakeRen","createNodeAsync","createNode","send","getNodeAsync","nodeCount","nodeSlice","name","initialState","balance","status","error","currentNode","user","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectUser","node","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,gBAA9B,QAAsD,kBAAtD;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAMA,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CAAC,mBAAD,EAAsB,YAAY;AAC5E,QAAMI,IAAI,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAnB;AACA,SAAOF,IAAI,CAAC,CAAD,CAAX;AACD,CAH2C,CAArC;AAMP,OAAO,MAAMG,iBAAiB,GAAGP,gBAAgB,CAAC,wBAAD,EAA2B,YAAY;AACtF,QAAMQ,QAAQ,GAAG,MAAMP,UAAU,CAACQ,OAAX,CAAmBC,wBAAnB,GAA8CC,IAA9C,EAAvB;AACA,SAAOH,QAAP;AACD,CAHgD,CAA1C;AAMP,OAAO,MAAMI,aAAa,GAAGZ,gBAAgB,CAAC,oBAAD,EAAuB,YAAY;AAC9E,QAAMQ,QAAQ,GAAG,MAAMP,UAAU,CAACQ,OAAX,CAAmBI,QAAnB,CAA4B,CAA5B,EAA8B,CAA9B,EAAiCF,IAAjC,EAAvB;AACA,SAAOH,QAAP;AACD,CAH4C,CAAtC;AAMP,OAAO,MAAMM,eAAe,GAAGd,gBAAgB,CAAC,sBAAD,EAAyB,YAAY;AAClF,QAAMQ,QAAQ,GAAG,MAAMP,UAAU,CAACQ,OAAX,CAAmBM,UAAnB,GAAgCC,IAAhC,EAAvB;AACA,SAAOR,QAAP;AACD,CAH8C,CAAxC;AAKP,OAAO,MAAMS,YAAY,GAAGjB,gBAAgB,CAAC,mBAAD,EAAsB,YAAY;AAC5E,QAAMQ,QAAQ,GAAG,MAAMP,UAAU,CAACiB,SAAX,CAAqBP,IAArB,EAAvB;AACA,SAAOH,QAAP;AACD,CAH2C,CAArC;AAMP,MAAMW,SAAS,GAAGrB,WAAW,CAAC;AAC1BsB,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,CADG;AAEZC,IAAAA,MAAM,EAAC,MAFK;AAGZC,IAAAA,KAAK,EAAC,EAHM;AAIZC,IAAAA,WAAW,EAAE,CAJD;AAKZC,IAAAA,IAAI,EAAC;AALO,GAFY;AAS1BC,EAAAA,QAAQ,EAAE,CACR;AADQ,GATgB;AAY1BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgB3B,YAAY,CAAC4B,SAA7B,EAAwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzD;AACAD,MAAAA,KAAK,CAACT,MAAN,GAAe,WAAf;AACAS,MAAAA,KAAK,CAACN,IAAN,GAAaO,MAAM,CAACC,OAApB;AAED,KALD;AAMD;AApByB,CAAD,CAA7B;AAuBE,OAAO,MAAMC,UAAU,GAAGH,KAAK,IAAIA,KAAK,CAACI,IAAN,CAAWV,IAAvC;AAEP,eAAeP,SAAS,CAACkB,OAAzB","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return acts[0];\n})\n\n\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit().call();\n  return response;\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async () => {\n  const response = await controller.methods.stakeRen(0,0).call();\n  return response;\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.nodeCount.call();\n  return response;\n})\n\n\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState: {\n      balance: 0,\n      status:'idle',\n      error:'',\n      currentNode: 0,\n      user:''\n    },\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getUserAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.user = action.payload\n\n      })\n    },\n})\n\n  export const selectUser = state => state.node.user\n\n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}