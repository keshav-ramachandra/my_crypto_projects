{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nimport web3 from './../web3';\nconst initialState = {\n  balance: 0,\n  status: 'idle',\n  error: '',\n  currentNode: 0,\n  user: null\n};\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts()[0];\n  return acts[0];\n});\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(initialState.currentNode).call();\n  return response;\n});\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async () => {\n  const response = await controller.methods.stakeRen(0, 0).call();\n  return response;\n});\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n});\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.nodeCount.call();\n  return response;\n});\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState,\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getUserAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.user = action.payload;\n    });\n  }\n});\nexport const selectUser = state => state.node.value;\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","web3","initialState","balance","status","error","currentNode","user","getUserAsync","acts","eth","getAccounts","fetchBalanceAsync","response","methods","getCumulativeNodeDeposit","call","stakeRenAsync","stakeRen","createNodeAsync","createNode","send","getNodeAsync","nodeCount","nodeSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","selectUser","node","value","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,gBAA9B,QAAsD,kBAAtD;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,MAAM,EAAC,MAFY;AAGnBC,EAAAA,KAAK,EAAC,EAHa;AAInBC,EAAAA,WAAW,EAAE,CAJM;AAKnBC,EAAAA,IAAI,EAAC;AALc,CAArB;AAWA,OAAO,MAAMC,YAAY,GAAGT,gBAAgB,CAAC,mBAAD,EAAsB,YAAY;AAC5E,QAAMU,IAAI,GAAG,MAAMR,IAAI,CAACS,GAAL,CAASC,WAAT,GAAuB,CAAvB,CAAnB;AACA,SAAOF,IAAI,CAAC,CAAD,CAAX;AACD,CAH2C,CAArC;AAMP,OAAO,MAAMG,iBAAiB,GAAGb,gBAAgB,CAAC,wBAAD,EAA2B,YAAY;AACtF,QAAMc,QAAQ,GAAG,MAAMb,UAAU,CAACc,OAAX,CAAmBC,wBAAnB,CAA4Cb,YAAY,CAACI,WAAzD,EAAsEU,IAAtE,EAAvB;AACA,SAAOH,QAAP;AACD,CAHgD,CAA1C;AAMP,OAAO,MAAMI,aAAa,GAAGlB,gBAAgB,CAAC,oBAAD,EAAuB,YAAY;AAC9E,QAAMc,QAAQ,GAAG,MAAMb,UAAU,CAACc,OAAX,CAAmBI,QAAnB,CAA4B,CAA5B,EAA8B,CAA9B,EAAiCF,IAAjC,EAAvB;AACA,SAAOH,QAAP;AACD,CAH4C,CAAtC;AAMP,OAAO,MAAMM,eAAe,GAAGpB,gBAAgB,CAAC,sBAAD,EAAyB,YAAY;AAClF,QAAMc,QAAQ,GAAG,MAAMb,UAAU,CAACc,OAAX,CAAmBM,UAAnB,GAAgCC,IAAhC,EAAvB;AACA,SAAOR,QAAP;AACD,CAH8C,CAAxC;AAKP,OAAO,MAAMS,YAAY,GAAGvB,gBAAgB,CAAC,mBAAD,EAAsB,YAAY;AAC5E,QAAMc,QAAQ,GAAG,MAAMb,UAAU,CAACuB,SAAX,CAAqBP,IAArB,EAAvB;AACA,SAAOH,QAAP;AACD,CAH2C,CAArC;AAMP,MAAMW,SAAS,GAAG3B,WAAW,CAAC;AAC1B4B,EAAAA,IAAI,EAAE,MADoB;AAE1BvB,EAAAA,YAF0B;AAG1BwB,EAAAA,QAAQ,EAAE,CACR;AADQ,GAHgB;AAM1BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,YAAY,CAACsB,SAA7B,EAAwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzD;AACAD,MAAAA,KAAK,CAACxB,IAAN,GAAayB,MAAM,CAACC,OAApB;AAED,KAJD;AAKD;AAbyB,CAAD,CAA7B;AAgBE,OAAO,MAAMC,UAAU,GAAIH,KAAD,IAAsBA,KAAK,CAACI,IAAN,CAAWC,KAApD;AAEP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\nconst initialState = {\n  balance: 0,\n  status:'idle',\n  error:'',\n  currentNode: 0,\n  user:null\n}\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts()[0]; \n  return acts[0];\n})\n\n\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(initialState.currentNode).call();\n  return response;\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async () => {\n  const response = await controller.methods.stakeRen(0,0).call();\n  return response;\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.nodeCount.call();\n  return response;\n})\n\n\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState,\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getUserAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.user = action.payload\n\n      })\n    },\n})\n\n  export const selectUser = (state: RootState) => state.node.value\n  \n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}