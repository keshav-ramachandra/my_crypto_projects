{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nimport web3 from './../web3';\nconst initialState = {\n  balance: 0,\n  status: 'idle',\n  error: '',\n  currentNode: 0,\n  user: ''\n};\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts()[0];\n  return acts[0];\n});\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(initialState.currentNode).call();\n  return response;\n});\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async () => {\n  const response = await controller.methods.stakeRen(0, 0).call();\n  return response;\n});\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n});\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.nodeCount.call();\n  return response;\n});\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState,\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: {\n    [fetchBalanceAsync.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchBalanceAsync.fulfilled]: (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      console.log(\"payloadccc is\", action.payload);\n      state.balance = action.payload;\n    },\n    [fetchBalanceAsync.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    },\n    [stakeRenAsync.pending]: (state, action) => {\n      state.status = 'depositing';\n    },\n    [stakeRenAsync.fulfilled]: (state, action) => {\n      state.status = 'deposited'; // Add any fetched posts to the array\n\n      console.log(\"deposited\");\n    },\n    [stakeRenAsync.rejected]: (state, action) => {\n      state.status = 'Node is full';\n      state.error = action.error.message;\n    },\n    [createNodeAsync.pending]: (state, action) => {\n      state.status = 'creating';\n    },\n    [createNodeAsync.fulfilled]: (state, action) => {\n      state.status = 'created'; // Add any fetched posts to the array\n\n      console.log(\"node created\");\n    },\n    [createNodeAsync.rejected]: (state, action) => {\n      state.status = 'Node could not be created';\n      state.error = action.error.message;\n    },\n    [getNodeAsync.pending]: (state, action) => {\n      state.status = 'fetching node';\n    },\n    [getNodeAsync.fulfilled]: (state, action) => {\n      state.status = 'fetched'; // Add any fetched posts to the array\n\n      console.log(\"payload is\", action.payload);\n      state.currentNode = parseInt(action.payload) - 1;\n    },\n    [getNodeAsync.rejected]: (state, action) => {\n      state.status = 'Node could not be fetched';\n      state.error = action.error.message;\n    },\n    [getUserAsync.pending]: (state, action) => {\n      state.status = 'fetching user';\n      console.log(\"fetching user\");\n    },\n    [getUserAsync.fulfilled]: (state, action) => {\n      state.status = 'fetched';\n      console.log(\"fetched user\", action.payload);\n      state.user = action.payload;\n    },\n    [getUserAsync.rejected]: (state, action) => {\n      state.status = 'User could not be fetched';\n      state.error = action.error.message;\n    }\n  }\n}); //export const { fetchBalance } = nodeSlice.actions;\n\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","web3","initialState","balance","status","error","currentNode","user","getUserAsync","acts","eth","getAccounts","fetchBalanceAsync","response","methods","getCumulativeNodeDeposit","call","stakeRenAsync","stakeRen","createNodeAsync","createNode","send","getNodeAsync","nodeCount","nodeSlice","name","reducers","extraReducers","pending","state","action","fulfilled","console","log","payload","rejected","message","parseInt","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\nconst initialState = {\n  balance: 0,\n  status:'idle',\n  error:'',\n  currentNode: 0,\n  user:''\n}\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts()[0]; \n  return acts[0];\n})\n\n\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(initialState.currentNode).call();\n  return response;\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async () => {\n  const response = await controller.methods.stakeRen(0,0).call();\n  return response;\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.nodeCount.call();\n  return response;\n})\n\n\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState,\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: {\n      [fetchBalanceAsync.pending]: (state, action) => {\n        state.status = 'loading'\n      },\n      [fetchBalanceAsync.fulfilled]: (state, action) => {\n        state.status = 'succeeded';\n        // Add any fetched posts to the array\n        console.log(\"payloadccc is\", action.payload);\n        state.balance = action.payload;\n      },\n      [fetchBalanceAsync.rejected]: (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message\n      },\n       [stakeRenAsync.pending]: (state, action) => {\n        state.status = 'depositing'\n      },\n      [stakeRenAsync.fulfilled]: (state, action) => {\n        state.status = 'deposited';\n        // Add any fetched posts to the array\n        console.log(\"deposited\");\n      },\n      [stakeRenAsync.rejected]: (state, action) => {\n        state.status = 'Node is full';\n        state.error = action.error.message\n      },\n       [createNodeAsync.pending]: (state, action) => {\n        state.status = 'creating'\n      },\n      [createNodeAsync.fulfilled]: (state, action) => {\n        state.status = 'created';\n        // Add any fetched posts to the array\n        console.log(\"node created\");\n      },\n      [createNodeAsync.rejected]: (state, action) => {\n        state.status = 'Node could not be created';\n        state.error = action.error.message;\n      },\n      [getNodeAsync.pending]: (state, action) => {\n        state.status = 'fetching node'\n      },\n      [getNodeAsync.fulfilled]: (state, action) => {\n        state.status = 'fetched';\n        // Add any fetched posts to the array\n        console.log(\"payload is\", action.payload);\n        state.currentNode = parseInt(action.payload) - 1;\n      },\n      [getNodeAsync.rejected]: (state, action) => {\n        state.status = 'Node could not be fetched'\n        state.error = action.error.message\n      },\n       [getUserAsync.pending]: (state, action) => {\n        state.status = 'fetching user'\n        console.log(\"fetching user\")\n      },\n      [getUserAsync.fulfilled]: (state, action) => {\n        state.status = 'fetched'\n        console.log(\"fetched user\",action.payload);\n        state.user = action.payload\n      },\n      [getUserAsync.rejected]: (state, action) => {\n        state.status = 'User could not be fetched';\n        state.error = action.error.message\n      }\n    }\n  })\n\n  //export const { fetchBalance } = nodeSlice.actions;\n\n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}