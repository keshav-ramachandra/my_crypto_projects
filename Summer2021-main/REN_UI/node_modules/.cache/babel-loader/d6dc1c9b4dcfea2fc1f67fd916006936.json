{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nconst initialState = {\n  balance: 0,\n  status: 'idle',\n  error: ''\n};\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAs', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(0).call();\n  return response;\n});\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState,\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: {\n    [fetchBalanceAsync.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchBalanceAsync.fulfilled]: (state, action) => {\n      state.status = 'succeeded'; // Add any fetched posts to the array\n\n      state.balance = action.payload;\n    },\n    [fetchBalanceAsync.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n}); //export const { fetchBalance } = nodeSlice.actions;\n\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","initialState","balance","status","error","fetchBalanceAsync","response","methods","getCumulativeNodeDeposit","call","nodeSlice","name","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","message","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,gBAA9B,QAAsD,kBAAtD;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,MAAM,EAAC,MAFY;AAGnBC,EAAAA,KAAK,EAAC;AAHa,CAArB;AAMA,OAAO,MAAMC,iBAAiB,GAAGN,gBAAgB,CAAC,qBAAD,EAAwB,YAAY;AACnF,QAAMO,QAAQ,GAAG,MAAMN,UAAU,CAACO,OAAX,CAAmBC,wBAAnB,CAA4C,CAA5C,EAA+CC,IAA/C,EAAvB;AACA,SAAOH,QAAP;AACD,CAHgD,CAA1C;AAMP,MAAMI,SAAS,GAAGb,WAAW,CAAC;AAC1Bc,EAAAA,IAAI,EAAE,MADoB;AAE1BV,EAAAA,YAF0B;AAG1BW,EAAAA,QAAQ,EAAE,CACR;AADQ,GAHgB;AAM1BC,EAAAA,aAAa,EAAE;AACb,KAACR,iBAAiB,CAACS,OAAnB,GAA6B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACZ,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACE,iBAAiB,CAACY,SAAnB,GAA+B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACZ,MAAN,GAAe,WAAf,CADgD,CAEhD;;AACAY,MAAAA,KAAK,CAACb,OAAN,GAAgBc,MAAM,CAACE,OAAvB;AACD,KARY;AASb,KAACb,iBAAiB,CAACc,QAAnB,GAA8B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,MAAAA,KAAK,CAACZ,MAAN,GAAe,QAAf;AACAY,MAAAA,KAAK,CAACX,KAAN,GAAcY,MAAM,CAACZ,KAAP,CAAagB,OAA3B;AACD;AAZY;AANW,CAAD,CAA7B,C,CAsBE;;AAEA,eAAeV,SAAS,CAACW,OAAzB","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\n\nconst initialState = {\n  balance: 0,\n  status:'idle',\n  error:''\n}\n\nexport const fetchBalanceAsync = createAsyncThunk('node/fetchBalanceAs', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(0).call();\n  return response;\n})\n\n\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState,\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: {\n      [fetchBalanceAsync.pending]: (state, action) => {\n        state.status = 'loading'\n      },\n      [fetchBalanceAsync.fulfilled]: (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        state.balance = action.payload;\n      },\n      [fetchBalanceAsync.rejected]: (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      }\n    }\n  })\n\n  //export const { fetchBalance } = nodeSlice.actions;\n\n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}