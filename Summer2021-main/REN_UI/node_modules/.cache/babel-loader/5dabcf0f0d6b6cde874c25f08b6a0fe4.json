{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit';\nimport controller from '../controller';\nimport web3 from './../web3';\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts();\n  return acts[0];\n});\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(getNodeAsync()).call();\n  return response;\n});\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (_amount, _nodeId, _sender) => {\n  const response = await controller.methods.stakeRen(_amount, _nodeId).send({\n    from: _sender\n  });\n  return response;\n});\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n});\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response) - 1;\n});\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync', async () => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n\n  if (parseInt(currentNodeBalance) == 50000) {\n    return 'full';\n  } else {\n    return 'accepting';\n  }\n});\nconst nodeSlice = createSlice({\n  name: 'node',\n  initialState: {\n    balance: -1,\n    status: 'idle',\n    error: '',\n    currentNode: -1,\n    user: '',\n    depositStatus: 'full'\n  },\n  reducers: {// omit existing reducers here\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getUserAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.user = action.payload;\n    }).addCase(getBalanceAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.balance = action.payload;\n    }).addCase(getNodeAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.currentNode = action.payload;\n    }).addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.status = 'succeeded';\n      state.depositStatus = action.payload;\n    });\n  }\n});\nexport default nodeSlice.reducer;","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/nodeSlice.js"],"names":["createSlice","nanoid","createAsyncThunk","controller","web3","getUserAsync","acts","eth","getAccounts","getBalanceAsync","response","methods","getCumulativeNodeDeposit","getNodeAsync","call","stakeRenAsync","_amount","_nodeId","_sender","stakeRen","send","from","createNodeAsync","createNode","nodeCount","parseInt","getDepositStatusAsync","currentNodeBalance","nodeSlice","name","initialState","balance","status","error","currentNode","user","depositStatus","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return acts[0];\n})\n\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async () => {\n  const response = await controller.methods.getCumulativeNodeDeposit(getNodeAsync()).call();\n  return response;\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (_amount, _nodeId, _sender) => {\n  const response = await controller.methods.stakeRen(_amount,_nodeId).send({from: _sender});\n  return response;\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async () => {\n  const response = await controller.methods.createNode().send();\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\n\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState: {\n      balance: -1,\n      status:'idle',\n      error:'',\n      currentNode: -1,\n      user:'',\n      depositStatus:'full'\n    },\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getUserAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.user = action.payload\n\n      })\n      .addCase(getBalanceAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.balance = action.payload\n      })\n      .addCase(getNodeAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentNode = action.payload\n      })\n      .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.depositStatus = action.payload\n      })\n    }\n})\n\n\n  export default nodeSlice.reducer"]},"metadata":{},"sourceType":"module"}