{"ast":null,"code":"var _jsxFileName = \"/home/kesha/Videos/my-app/src/features/nodeUpdater/Node.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from 'react-select';\nimport { getBalanceAsync, getUserAsync, getNodeAsync, getDepositStatusAsync, updateNodeStats, isOwner } from './nodeSlice'; //import styles from './Node.module.css';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Node() {\n  _s();\n\n  //const fetchStatus = useSelector(state => state.node.status)\n  //const error = useSelector(state => state.node.error)\n  const user = useSelector(state => state.node.user);\n  const currentNode = useSelector(state => state.node.currentNode);\n  const balance = useSelector(state => state.node.balance); //const [user, setUser] = useState(null);\n\n  const options = [];\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  const handleChange = selectedOption => {\n    setSelectedOption(selectedOption);\n    console.log(selectedOption.value); //this prints the selected option\n  };\n\n  const dispatch = useDispatch(); //dispatch(getUserAsync());\n\n  const status = useSelector(state => state.node.status);\n  const depositStatus = useSelector(state => state.node.depositStatus);\n  const nodeBalance = useSelector(state => state.node.balance);\n  const owner = useSelector(state => state.node.owner);\n  useEffect(() => {\n    if (status == 'idle') {\n      dispatch(getUserAsync());\n      dispatch(isOwner());\n      dispatch(updateNodeStats());\n      dispatch(loadSelectElements());\n    }\n\n    for (var i = 0; i <= currentNode; i++) {\n      options.push({\n        'value': i,\n        'label': i\n      });\n    }\n  }, []);\n  let content;\n\n  if (owner == 'yes') {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this);\n  } else {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Owner yet to create a Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"posts-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"User: \", user]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Node id: \", currentNode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Node Balance: \", nodeBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"deposit Status : \", depositStatus, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"owner: \", owner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      value: selectedOption,\n      onChange: handleChange,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Node, \"Oy0ryyPJEcKWSWCwcHZpEZ6GHs0=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/home/kesha/Videos/my-app/src/features/nodeUpdater/Node.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Select","getBalanceAsync","getUserAsync","getNodeAsync","getDepositStatusAsync","updateNodeStats","isOwner","Node","user","state","node","currentNode","balance","options","selectedOption","setSelectedOption","handleChange","console","log","value","dispatch","status","depositStatus","nodeBalance","owner","loadSelectElements","i","push","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SACEC,eADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,qBAJF,EAKEC,eALF,EAMEC,OANF,QAOO,aAPP,C,CAQA;;;AAEA,OAAO,SAASC,IAAT,GAAgB;AAAA;;AACrB;AACA;AACA,QAAMC,IAAI,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,IAArB,CAAxB;AACA,QAAMG,WAAW,GAAGb,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,WAArB,CAA/B;AACA,QAAMC,OAAO,GAAGd,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWE,OAArB,CAA3B,CALqB,CAMrB;;AAEA,QAAMC,OAAO,GAAG,EAAhB;AAGA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,IAAD,CAApD;;AACA,QAAMoB,YAAY,GAAIF,cAAD,IAAoB;AACvCC,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAc,CAACK,KAA3B,EAFuC,CAEJ;AACpC,GAHD;;AAMA,QAAMC,QAAQ,GAAGrB,WAAW,EAA5B,CAlBqB,CAoBrB;;AACA,QAAMsB,MAAM,GAAGvB,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWW,MAArB,CAA1B;AACA,QAAMC,aAAa,GAAGxB,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWY,aAArB,CAAjC;AACA,QAAMC,WAAW,GAAGzB,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWE,OAArB,CAA/B;AACA,QAAMY,KAAK,GAAG1B,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWc,KAArB,CAAzB;AAEC3B,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIwB,MAAM,IAAI,MAAd,EAAsB;AACpBD,MAAAA,QAAQ,CAAClB,YAAY,EAAb,CAAR;AACAkB,MAAAA,QAAQ,CAACd,OAAO,EAAR,CAAR;AACAc,MAAAA,QAAQ,CAACf,eAAe,EAAhB,CAAR;AACAe,MAAAA,QAAQ,CAACK,kBAAkB,EAAnB,CAAR;AACD;;AAGC,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,IAAEf,WAAf,EAA2Be,CAAC,EAA5B,EAA+B;AAC7Bb,MAAAA,OAAO,CAACc,IAAR,CAAa;AAAC,iBAAQD,CAAT;AAAW,iBAAQA;AAAnB,OAAb;AACD;AACJ,GAZS,EAYP,EAZO,CAAT;AAgBD,MAAIE,OAAJ;;AAEA,MAAIJ,KAAK,IAAI,KAAb,EAAoB;AAClBI,IAAAA,OAAO,gBAAG;AAAA,6BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YAAV;AACD,GAFD,MAGI;AACFA,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AAGD,sBACE;AAAS,IAAA,SAAS,EAAC,YAAnB;AAAA,4BACE;AAAA,2BAAWpB,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAA,8BAAcG,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,mCAAmBY,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA,sCAAsBD,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,4BAAYE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA,gBAAKI;AAAL;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEd,cADT;AAEE,MAAA,QAAQ,EAAEE,YAFZ;AAGE,MAAA,OAAO,EAAEH;AAHX;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GArEeN,I;UAGDT,W,EACOA,W,EACJA,W,EAaCC,W,EAGFD,W,EACOA,W,EACFA,W,EACNA,W;;;KAxBAS,I","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Select from 'react-select';\n\nimport {\n  getBalanceAsync,\n  getUserAsync,\n  getNodeAsync,\n  getDepositStatusAsync,\n  updateNodeStats,\n  isOwner\n} from './nodeSlice';\n//import styles from './Node.module.css';\n\nexport function Node() {\n  //const fetchStatus = useSelector(state => state.node.status)\n  //const error = useSelector(state => state.node.error)\n  const user = useSelector(state => state.node.user);\n  const currentNode = useSelector(state => state.node.currentNode);\n  const balance = useSelector(state => state.node.balance);\n  //const [user, setUser] = useState(null);\n\n  const options = [\n  ];\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const handleChange = (selectedOption) => {\n    setSelectedOption(selectedOption);\n    console.log(selectedOption.value); //this prints the selected option\n  }\n\n\n  const dispatch = useDispatch();\n\n  //dispatch(getUserAsync());\n  const status = useSelector(state => state.node.status) \n  const depositStatus = useSelector(state => state.node.depositStatus) \n  const nodeBalance = useSelector(state => state.node.balance)\n  const owner = useSelector(state => state.node.owner)\n\n   useEffect(() => {\n    if (status == 'idle') {\n      dispatch(getUserAsync())\n      dispatch(isOwner())\n      dispatch(updateNodeStats())\n      dispatch(loadSelectElements())\n    }\n\n\n      for(var i=0;i<=currentNode;i++){\n        options.push({'value':i,'label':i})\n      }\n  }, [])\n\n  \n  \n  let content\n\n  if (owner == 'yes') {\n    content = <div><button>Create Node</button></div>\n  }\n  else{\n    content = <div>Owner yet to create a Node</div>\n  }\n\n\n  return (\n    <section className=\"posts-list\">\n      <h2>User: {user}</h2>\n\n      <h2>Node id: {currentNode}</h2>\n      <h2>Node Balance: {nodeBalance}</h2>\n      <h2>deposit Status : {depositStatus} </h2>\n      <h2>owner: {owner}</h2>\n      <h2>{content}</h2>\n      <Select\n        value={selectedOption}\n        onChange={handleChange}\n        options={options}\n      />\n      \n    </section>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}