[{"/home/kesha/Videos/app/src/index.js":"1","/home/kesha/Videos/app/src/App.js":"2","/home/kesha/Videos/app/src/serviceWorker.js":"3","/home/kesha/Videos/app/src/app/store.js":"4","/home/kesha/Videos/app/src/features/nodeUpdater/nodeSlice.js":"5","/home/kesha/Videos/app/src/features/nodeUpdater/Node.js":"6","/home/kesha/Videos/app/src/features/controller.js":"7","/home/kesha/Videos/app/src/features/web3.js":"8"},{"size":968,"mtime":1630472717161,"results":"9","hashOfConfig":"10"},{"size":241,"mtime":1629815376776,"results":"11","hashOfConfig":"10"},{"size":5014,"mtime":1629758460841,"results":"12","hashOfConfig":"10"},{"size":196,"mtime":1629815880282,"results":"13","hashOfConfig":"10"},{"size":5483,"mtime":1630670587944,"results":"14","hashOfConfig":"10"},{"size":3967,"mtime":1630671833012,"results":"15","hashOfConfig":"10"},{"size":14839,"mtime":1629811387262,"results":"16","hashOfConfig":"10"},{"size":578,"mtime":1629818501835,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"wcs37q",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/home/kesha/Videos/app/src/index.js",["38","39","40"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { getBalanceAsync, getUserAsync, getNodeAsync, getDepositStatusAsync, updateNodeStats } from './features/nodeUpdater/nodeSlice'\n\n\nstore.dispatch(getUserAsync())\n//store.dispatch(getNodeAsync())\n//store.dispatch(getBalanceAsync(store.getState.currentNode))\n\nstore.dispatch(updateNodeStats())\n//store.dispatch(getDepositStatusAsync())\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["41","42"],"/home/kesha/Videos/app/src/App.js",["43"],"import React from 'react';\nimport logo from './logo.svg';\nimport { Node } from './features/nodeUpdater/Node';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Node />\n    </div>\n  );\n}\n\nexport default App;\n","/home/kesha/Videos/app/src/serviceWorker.js",[],"/home/kesha/Videos/app/src/app/store.js",[],"/home/kesha/Videos/app/src/features/nodeUpdater/nodeSlice.js",["44","45","46","47","48","49"],"import { createSlice, nanoid, createAsyncThunk } from '@reduxjs/toolkit'\nimport controller from '../controller'\nimport web3 from './../web3'\n\n\n\n\n\nexport const getUserAsync = createAsyncThunk('node/getUserAsync', async () => {\n  const acts = await web3.eth.getAccounts(); \n  return acts[0];\n})\n\nexport const loadSelectElements = createAsyncThunk('node/loadSelectElements', async () => {\n  const response = await controller.methods.nodeCount().call();\n  const options = [];\n  for(var i=0;i < response;i++){\n      options.push({ value: i, label: i })\n  }\n  return options;\n})\n\nexport const getBalanceAsync = createAsyncThunk('node/getBalanceAsync', async (_nodeId) => {\n  const response = await controller.methods.getCumulativeNodeDeposit(_nodeId).call();\n  return response;\n})\n\nexport const updateCurrentNodeAsync = createAsyncThunk('node/updateCurrentNodeAsync', async (_nodeId) => {\n  return parseInt(_nodeId);\n})\n\n\nexport const stakeRenAsync = createAsyncThunk('node/stakeRenAsync', async (data) => {\n  //const {_amount,_nodeId,_sender}= data;\n  await controller.methods.stakeRen(parseInt(data.incrementAmount),parseInt(data.currentNode)).send({from:data.user});\n\n  \n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(data.currentNode).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  \n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(parseInt(data.currentNode)).call({from:data.user});\n\n  return {nodeId: data.currentNode, nodeBalance: nodeBalance, status: status, share:share}\n})\n\n\nexport const createNodeAsync = createAsyncThunk('node/createNodeAsync', async (_user) => {\n  const response = await controller.methods.createNode().send({from:_user});\n  return response;\n})\n\nexport const getNodeAsync = createAsyncThunk('node/getNodeAsync', async () => {\n  const response = await controller.methods.nodeCount().call();\n  return parseInt(response)-1;\n})\n\nexport const getDepositStatusAsync = createAsyncThunk('node/getDepositStatusAsync',async() => {\n  const currentNodeBalance = getBalanceAsync(getNodeAsync());\n  if(parseInt(currentNodeBalance) == 50000){\n    return 'full';\n  }\n  else{\n    return 'accepting';\n  }\n})\n\nexport const updateNodeStats = createAsyncThunk('node/updateNodeStats', async (data) => {\n  const response = await controller.methods.nodeCount().call();\n  \n  let nodeId \n  if(data._nodeId == -1){\n    nodeId= parseInt(response) - 1;\n  }\n  else{\n    nodeId = parseInt(data._nodeId)\n  }\n  const nodeBalance = await controller.methods.getCumulativeNodeDeposit(nodeId).call();\n  let status\n  if(parseInt(nodeBalance) == 50000){\n    status = 'full';\n  }\n  else{\n    status = 'accepting';\n  }\n\n  const acts = await web3.eth.getAccounts();\n  console.log(\"user is\", acts[0])\n\n\n  const share = await controller.methods.getMyCumulativeNodeDeposit(nodeId).call({from:acts[0]});\n\n  return {nodeId: nodeId, nodeBalance: nodeBalance, status: status,share:share}\n})\n\n\n\nexport const isOwner = createAsyncThunk('node/isOwner', async (_user) => {\n  const response = await controller.methods.owner().call();\n  const acts = await web3.eth.getAccounts(); \n\n  if(response == acts[0]){\n    return 'yes';\n  }\n  else{\n    return 'no';\n  }\n  \n})\n\n\n\nlet initialState= {\n      balance: -1,\n      status:'idle',\n      error:'',\n      currentNode: -1,\n      user:'',\n      owner:false,\n      depositStatus:'full',\n      share:0,\n      options:[]\n    }\nconst nodeSlice = createSlice({\n    name: 'node',\n    initialState,\n    reducers: {\n      // omit existing reducers here\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(getUserAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.user = action.payload\n\n      })\n      .addCase(getBalanceAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.balance = action.payload\n      })\n      .addCase(getNodeAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.currentNode = action.payload\n      })\n      .addCase(getDepositStatusAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.status = 'succeeded'\n        state.depositStatus = action.payload\n      })\n      .addCase(updateNodeStats.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.share = action.payload.share\n        state.status ='func'\n      })\n      .addCase(isOwner.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.owner = action.payload\n      })\n      .addCase(loadSelectElements.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.options = action.payload\n      })\n      .addCase(stakeRenAsync.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.depositStatus = action.payload.status\n        state.balance = action.payload.nodeBalance\n        state.currentNode = action.payload.nodeId\n        state.share = action.payload.share\n        state.status ='func'\n      })\n      \n    }\n})\n\n\n  export default nodeSlice.reducer","/home/kesha/Videos/app/src/features/nodeUpdater/Node.js",["50","51","52","53","54","55","56","57","58","59","60","61"],"/home/kesha/Videos/app/src/features/controller.js",[],"/home/kesha/Videos/app/src/features/web3.js",[],{"ruleId":"62","severity":1,"message":"63","line":10,"column":10,"nodeType":"64","messageId":"65","endLine":10,"endColumn":25},{"ruleId":"62","severity":1,"message":"66","line":10,"column":41,"nodeType":"64","messageId":"65","endLine":10,"endColumn":53},{"ruleId":"62","severity":1,"message":"67","line":10,"column":55,"nodeType":"64","messageId":"65","endLine":10,"endColumn":76},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"62","severity":1,"message":"72","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":12},{"ruleId":"62","severity":1,"message":"73","line":1,"column":23,"nodeType":"64","messageId":"65","endLine":1,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":40,"column":28,"nodeType":"76","messageId":"77","endLine":40,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":67,"column":35,"nodeType":"76","messageId":"77","endLine":67,"endColumn":37},{"ruleId":"74","severity":1,"message":"75","line":79,"column":19,"nodeType":"76","messageId":"77","endLine":79,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":87,"column":28,"nodeType":"76","messageId":"77","endLine":87,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":109,"column":15,"nodeType":"76","messageId":"77","endLine":109,"endColumn":17},{"ruleId":"62","severity":1,"message":"78","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":13},{"ruleId":"62","severity":1,"message":"63","line":9,"column":3,"nodeType":"64","messageId":"65","endLine":9,"endColumn":18},{"ruleId":"62","severity":1,"message":"66","line":11,"column":3,"nodeType":"64","messageId":"65","endLine":11,"endColumn":15},{"ruleId":"62","severity":1,"message":"67","line":12,"column":3,"nodeType":"64","messageId":"65","endLine":12,"endColumn":24},{"ruleId":"62","severity":1,"message":"79","line":32,"column":9,"nodeType":"64","messageId":"65","endLine":32,"endColumn":16},{"ruleId":"62","severity":1,"message":"80","line":39,"column":9,"nodeType":"64","messageId":"65","endLine":39,"endColumn":15},{"ruleId":"62","severity":1,"message":"81","line":62,"column":17,"nodeType":"64","messageId":"65","endLine":62,"endColumn":25},{"ruleId":"82","severity":1,"message":"83","line":69,"column":6,"nodeType":"84","endLine":69,"endColumn":8,"suggestions":"85"},{"ruleId":"74","severity":1,"message":"75","line":75,"column":13,"nodeType":"76","messageId":"77","endLine":75,"endColumn":15},{"ruleId":"74","severity":1,"message":"75","line":75,"column":39,"nodeType":"76","messageId":"77","endLine":75,"endColumn":41},{"ruleId":"74","severity":1,"message":"75","line":78,"column":17,"nodeType":"76","messageId":"77","endLine":78,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":78,"column":42,"nodeType":"76","messageId":"77","endLine":78,"endColumn":44},"no-unused-vars","'getBalanceAsync' is defined but never used.","Identifier","unusedVar","'getNodeAsync' is defined but never used.","'getDepositStatusAsync' is defined but never used.","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"'logo' is defined but never used.","'nanoid' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Box' is defined but never used.","'balance' is assigned a value but never used.","'status' is assigned a value but never used.","'accounts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentNode' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [currentNode, dispatch]",{"range":"91","text":"92"},[2228,2230],"[currentNode, dispatch]"]